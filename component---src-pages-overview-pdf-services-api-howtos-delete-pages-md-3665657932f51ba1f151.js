"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2576],{34134:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return u}});var a=t(87462),s=t(45987),r=(t(15007),t(64983)),o=t(91515);const i=["components"],p={},l=(g="CodeBlock",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var g;const d={_frontmatter:p},c=o.Z;function u(e){let{components:n}=e,t=(0,s.Z)(e,i);return(0,r.mdx)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"delete-pages"},"Delete Pages"),(0,r.mdx)("p",null,"Delete one or more pages from a document"),(0,r.mdx)("h2",{id:"rest-api"},"REST API"),(0,r.mdx)("p",null,"See our public API Reference for ",(0,r.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Page-Manipulation"},"Delete Pages")),(0,r.mdx)("h2",{id:"delete-pages-in-a-pdf"},"Delete Pages in a PDF"),(0,r.mdx)("p",null,"The delete pages operation selectively removes pages from a PDF file."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(l,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.deletepages.DeletePDFPages\n \n     \n   public class DeletePDFPages {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(DeletePDFPages.class);\n\n   public static void main(String[] args) {\n       try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/deletePagesInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Delete pages of the document (as specified by PageRanges).\n            PageRanges pageRangeForDeletion = getPageRangeForDeletion();\n\n            // Create parameters for the job\n            DeletePagesParams deletePagesParams = new DeletePagesParams(pageRangeForDeletion);\n\n            // Creates a new job instance\n            DeletePagesJob deletePagesJob = new DeletePagesJob(asset, deletePagesParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(deletePagesJob);\n            PDFServicesResponse<DeletePagesResult> pdfServicesResponse = pdfServices.getJobResult(location, DeletePagesResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/deletePagesOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/deletePagesOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n       } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n           LOGGER.error("Exception encountered while executing operation", e);\n       }\n   }\n\n    private static PageRanges getPageRangeForDeletion() {\n        // Specify pages for deletion\n        PageRanges pageRangeForDeletion = new PageRanges();\n        // Add page 1\n        pageRangeForDeletion.addSinglePage(1);\n\n        // Add pages 3 to 4\n        pageRangeForDeletion.addRange(3, 4);\n        return pageRangeForDeletion;\n    }\n }\n')),(0,r.mdx)("h4",{id:"net"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd DeletePDFPages/\n// dotnet run DeletePDFPages.csproj\n\n    namespace DeletePDFPages\n    {\n      class Program\n      {\n          private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n          static void Main()\n          {\n              // Configure the logging\n              ConfigureLogging();\n              try\n              {\n                  // Initial setup, create credentials instance.\n                  Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n   \n                  // Create an ExecutionContext using credentials.\n                  ExecutionContext executionContext = ExecutionContext.Create(credentials);\n   \n                  // Create a new operation instance\n                  DeletePagesOperation deletePagesOperation = DeletePagesOperation.CreateNew();\n   \n                  // Set operation input from a source file.\n                  FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"deletePagesInput.pdf");\n                  deletePagesOperation.SetInput(sourceFileRef);\n   \n                  // Delete pages of the document (as specified by PageRanges).\n                  PageRanges pageRangeForDeletion = GetPageRangeForDeletion();\n                  deletePagesOperation.SetPageRanges(pageRangeForDeletion);\n   \n                  // Execute the operation.\n                  FileRef result = deletePagesOperation.Execute(executionContext);\n   \n                  // Save the result to the specified location.\n                  result.SaveAs(Directory.GetCurrentDirectory() + "/output/deletePagesOutput.pdf");\n              }\n              catch (ServiceUsageException ex)\n              {\n                  log.Error("Exception encountered while executing operation", ex);\n              }\n              // Catch more errors here . . .\n          }\n   \n          private static PageRanges GetPageRangeForDeletion()\n          {\n              // Specify pages for deletion.\n              PageRanges pageRangeForDeletion = new PageRanges();\n              // Add page 1.\n              pageRangeForDeletion.AddSinglePage(1);\n   \n              // Add pages 3 to 4.\n              pageRangeForDeletion.AddRange(3, 4);\n              return pageRangeForDeletion;\n          }\n   \n          static void ConfigureLogging()\n          {\n              ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n              XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n          }\n      }\n    }\n')),(0,r.mdx)("h4",{id:"node-js"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/deletepages/delete-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    DeletePagesParams,\n    PageRanges,\n    DeletePagesJob,\n    DeletePagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./deletePagesInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Delete pages of the document (as specified by PageRanges).\n        const pageRangeForDeletion = getPageRangesForDeletion();\n\n        // Create parameters for the job\n        const params = new DeletePagesParams({\n            pageRanges: pageRangeForDeletion\n        });\n\n        // Creates a new job instance\n        const job = new DeletePagesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: DeletePagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset\'s content to it\n        const outputFilePath = "./deletePagesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n\nconst getPageRangesForDeletion = () => {\n    // Specify pages for deletion.\n    const pageRangesForDeletion = new PageRanges();\n    // Add page 1.\n    pageRangesForDeletion.addSinglePage(1);\n    // Add pages 3 to 4.\n    pageRangesForDeletion.addRange(3, 4);\n    return pageRangesForDeletion;\n};\n')),(0,r.mdx)("h4",{id:"python"},"Python"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/deletepages/delete_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass DeletePDFPages:\n    def __init__(self):\n        try:\n            file = open('deletePagesInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Delete pages of the document (as specified by PageRanges).\n            page_ranges_for_deletion = self.get_page_ranges_for_deletion()\n\n            # Create parameters for the job\n            delete_pages_params = DeletePagesParams(page_ranges=page_ranges_for_deletion)\n\n            # Creates a new job instance\n            delete_pages_job = DeletePagesJob(input_asset=input_asset,\n                                              delete_pages_params=delete_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(delete_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, DeletePagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = \"deletePagesOutput.pdf\"\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_page_ranges_for_deletion() -> PageRanges:\n        # Specify pages for deletion\n        page_range_for_deletion = PageRanges()\n        # Add page 1\n        page_range_for_deletion.add_single_page(1)\n        # Add pages 3 to 4\n        page_range_for_deletion.add_range(3, 4)\n        return page_range_for_deletion\n\n\nif __name__ == \"__main__\":\n    DeletePDFPages()\n\n\n")),(0,r.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Page-Manipulation\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/pagemanipulation\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "pageActions": [\n        {\n            "delete": {\n                "pageRanges": [\n                    {\n                        "start": 1,\n                        "end": 2\n                    }\n                ]\n            }\n        }\n    ]\n}\'\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-delete-pages-md-3665657932f51ba1f151.js.map