{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/pdf-services-api/howtos/protect-pdf.md"],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"mappings":"0OAUsBA,E,mEAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,eADR,gBAGA,eACE,GAAM,mCADR,oCAGA,yHAEA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBH,QAAQ,eACnF,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,0pEA+CL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,68EA6DL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,ojEAgDL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,gFAD6B,UAGzC,eACE,GAAM,oCADR,qCAGA,+LAEyB,uBAAYA,WAAW,KAAvB,qBAFzB,SAE+F,uBAAYA,WAAW,KAAvB,cAF/F,8GAKA,SAACb,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBH,QAAQ,eACnF,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,ykFAyDL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,mhGAsEL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,qnFAyDL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,gFAD6B,UAO7CN,EAAWO,gBAAiB","file":"component---src-pages-pdf-services-api-howtos-protect-pdf-md-78f5dadcb8c2367239ea.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"protect-pdf\"\n    }}>{`Protect PDF`}</h1>\n    <h2 {...{\n      \"id\": \"protect-pdfs-with-user-password\"\n    }}>{`Protect PDFs with user password`}</h2>\n    <p>{`You can password protect PDFs so that only users with a document open\npassword can open the file.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.protectpdf.ProtectPDF\n \n      public class ProtectPDF {\n        // Initialize the logger.\n        private static final Logger LOGGER = LoggerFactory.getLogger(ProtectPDF.class);\n     \n        public static void main(String[] args) {\n     \n            try {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                        .fromFile(\"pdfservices-api-credentials.json\")\n                        .build();\n     \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.create(credentials);\n     \n                // Build ProtectPDF options by setting a User Password and Encryption\n                // Algorithm (used for encrypting the PDF file).\n                ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.passwordProtectOptionsBuilder()\n                        .setUserPassword(\"encryptPassword\")\n                        .setEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                        .build();\n     \n                // Create a new operation instance.\n                ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.createNew(protectPDFOptions);\n     \n                // Set operation input from a source file.\n                FileRef source = FileRef.createFromLocalFile(\"src/main/resources/protectPDFInput.pdf\");\n                protectPDFOperation.setInput(source);\n     \n                // Execute the operation\n                FileRef result = protectPDFOperation.execute(executionContext);\n     \n                // Save the result at the specified location\n                result.saveAs(\"output/protectPDFOutput.pdf\");\n     \n            } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n                LOGGER.error(\"Exception encountered while executing operation\", ex);\n            }\n        }\n      }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-1\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ProtectPDF/\n// dotnet run ProtectPDF.csproj\n\n  namespace ProtectPDF\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Build ProtectPDF options by setting a User Password and Encryption\n                // Algorithm (used for encrypting the PDF file).\n                ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.PasswordProtectOptionsBuilder()\n                        .SetUserPassword(\"encryptPassword\")\n                        .SetEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                        .Build();\n \n                // Create a new operation instance\n                ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.CreateNew(protectPDFOptions);\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"protectPDFInput.pdf\");\n                protectPDFOperation.SetInput(sourceFileRef);\n \n                // Execute the operation.\n                FileRef result = protectPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + \"/output/protectPDFOutput.pdf\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/protectpdf/protect-pdf.js\n\n    const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n   \n    try {\n      // Initial setup, create credentials instance.\n      const credentials =  PDFServicesSdk.Credentials\n          .serviceAccountCredentialsBuilder()\n          .fromFile(\"pdfservices-api-credentials.json\")\n          .build();\n   \n      // Create an ExecutionContext using credentials\n      const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n   \n      // Build ProtectPDF options by setting a User Password and Encryption\n      // Algorithm (used for encrypting the PDF file).\n      const protectPDF = PDFServicesSdk.ProtectPDF,\n          options = new protectPDF.options.PasswordProtectOptions.Builder()\n              .setUserPassword(\"encryptPassword\")\n              .setEncryptionAlgorithm(PDFServicesSdk.ProtectPDF.options.EncryptionAlgorithm.AES_256)\n              .build();\n   \n      // Create a new operation instance.\n      const protectPDFOperation = protectPDF.Operation.createNew(options);\n   \n      // Set operation input from a source file.\n      const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/protectPDFInput.pdf');\n      protectPDFOperation.setInput(input);\n   \n      // Execute the operation and Save the result to the specified location.\n      protectPDFOperation.execute(executionContext)\n          .then(result => result.saveAsFile('output/protectPDFOutput.pdf'))\n          .catch(err => {\n              if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                  || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                  console.log('Exception encountered while executing operation', err);\n              } else {\n                  console.log('Exception encountered while executing operation', err);\n              }\n          });\n    } catch (err) {\n      console.log('Exception encountered while executing operation', err);\n    }\n`}</code></pre>\n    <p>{`The REST API example can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://documentcloud.adobe.com/document-services/index.html#post-protectPDF\"\n      }}>{`here`}</a></p>\n    <h2 {...{\n      \"id\": \"protect-pdfs-with-owner-password\"\n    }}>{`Protect PDFs with owner password`}</h2>\n    <p>{`You can secure a PDF file with owner/permissions password and set the\nrestriction on certain features like printing, editing and copying in\nthe PDF document. Refer to `}<inlineCode parentName=\"p\">{`ContentEncryption`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Permission`}</inlineCode>{` in the\nAPI docs for a list of supported types of content to encrypt and types\nof document permissions.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample-3\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.protectpdf.ProtectPDFWithOwnerPassword\n \n public class ProtectPDFWithOwnerPassword {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ProtectPDFWithOwnerPassword.class);\n\n   public static void main(String[] args) {\n\n       try {\n           // Initial setup, create credentials instance.\n           Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                   .fromFile(\"pdfservices-api-credentials.json\")\n                   .build();\n\n           // Create an ExecutionContext using credentials.\n           ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n           // Create new permissions instance and add the required permissions\n           Permissions permissions = Permissions.createNew();\n           permissions.addPermission(Permission.PRINT_LOW_QUALITY);\n           permissions.addPermission(Permission.EDIT_DOCUMENT_ASSEMBLY);\n           permissions.addPermission(Permission.COPY_CONTENT);\n\n           // Build ProtectPDF options by setting an Owner/Permissions Password, Permissions,\n           // Encryption Algorithm (used for encrypting the PDF file) and specifying the type of content to encrypt.\n           ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.passwordProtectOptionsBuilder()\n                   .setOwnerPassword(\"password\")\n                   .setPermissions(permissions)\n                   .setEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                   .setContentEncryption(ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)\n                   .build();\n\n           // Create a new operation instance.\n           ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.createNew(protectPDFOptions);\n\n           // Set operation input from a source file.\n           FileRef source = FileRef.createFromLocalFile(\"src/main/resources/protectPDFInput.pdf\");\n           protectPDFOperation.setInput(source);\n\n           // Execute the operation\n           FileRef result = protectPDFOperation.execute(executionContext);\n\n           // Save the result at the specified location\n           result.saveAs(\"output/protectPDFWithOwnerPasswordOutput.pdf\");\n\n       } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n           LOGGER.error(\"Exception encountered while executing operation\", ex);\n       }\n   }\n }\n     \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-4\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ProtectPDFWithOwnerPassword/\n// dotnet run ProtectPDFWithOwnerPassword.csproj\n\n namespace ProtectPDFWithOwnerPassword\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                               .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                               .Build();\n\n               // Create an ExecutionContext using credentials.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n               // Create new permissions instance and add the required permissions\n               Permissions permissions = Permissions.CreateNew();\n               permissions.AddPermission(Permission.PRINT_LOW_QUALITY);\n               permissions.AddPermission(Permission.EDIT_DOCUMENT_ASSEMBLY);\n               permissions.AddPermission(Permission.COPY_CONTENT);\n\n               // Build ProtectPDF options by setting an Owner/Permissions Password, Permissions,\n               // Encryption Algorithm (used for encrypting the PDF file) and specifying the type of content to encrypt.\n               ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.PasswordProtectOptionsBuilder()\n                   .SetOwnerPassword(\"password\")\n                   .SetPermissions(permissions)\n                   .SetEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                   .SetContentEncryption(ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)\n                   .Build();\n\n               // Create a new operation instance\n               ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.CreateNew(protectPDFOptions);\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"protectPDFInput.pdf\");\n               protectPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = protectPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + \"/output/protectPDFWithOwnerPasswordOutput.pdf\");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error(\"Exception encountered while executing operation\", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n       }\n   }\n }\n   \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-5\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/protectpdf/protect-pdf-with-owner-password.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Create an ExecutionContext using credentials\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n \n    // Create new permissions instance and add the required permissions\n    const protectPDF = PDFServicesSdk.ProtectPDF,\n        protectPDFOptions = protectPDF.options,\n        permissions = protectPDFOptions.Permissions.createNew();\n    permissions.addPermission(protectPDFOptions.Permission.PRINT_LOW_QUALITY);\n    permissions.addPermission(protectPDFOptions.Permission.EDIT_DOCUMENT_ASSEMBLY);\n    permissions.addPermission(protectPDFOptions.Permission.COPY_CONTENT);\n \n    // Build ProtectPDF options by setting an Owner/Permissions Password, Permissions,\n    // Encryption Algorithm (used for encrypting the PDF file) and specifying the type of content to encrypt.\n    const options = new protectPDFOptions.PasswordProtectOptions.Builder()\n            .setOwnerPassword(\"password\")\n            .setPermissions(permissions)\n            .setEncryptionAlgorithm(protectPDFOptions.EncryptionAlgorithm.AES_256)\n            .setContentEncryption(protectPDFOptions.ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)\n            .build();\n \n    // Create a new operation instance.\n    const protectPDFOperation = protectPDF.Operation.createNew(options);\n \n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/protectPDFInput.pdf');\n    protectPDFOperation.setInput(input);\n \n    // Execute the operation and Save the result to the specified location.\n    protectPDFOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/protectPDFWithOwnerPasswordOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <p>{`The REST API example can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://documentcloud.adobe.com/document-services/index.html#post-protectPDF\"\n      }}>{`here`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}