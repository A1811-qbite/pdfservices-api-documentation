{"version":3,"file":"component---src-pages-overview-2-2-0-pdf-services-api-howtos-replace-pages-md-dc10afcd6f0e65a1eaca.js","mappings":"4OAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iBADR,kBAGA,eACE,GAAM,wBADR,yBAGA,4GAEA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCH,QAAQ,eAC9F,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,+8FAiEL,eACE,GAAM,OADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,q0GAgFL,eACE,GAAM,WADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,u3FAgEL,eACE,GAAM,YADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,+xEAmER,CAEDN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/2.2.0/pdf-services-api/howtos/replace-pages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"replace-pages\"\n    }}>{`Replace Pages`}</h1>\n    <h2 {...{\n      \"id\": \"replace-pages-in-pdf\"\n    }}>{`Replace Pages in PDF`}</h2>\n    <p>{`The replace pages operation replaces pages in a PDF with pages from\nother PDF files.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.replacepages.ReplacePDFPages\n \n     public class ReplacePDFPages {\n    \n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(ReplacePDFPages.class);\n    \n       public static void main(String[] args) {\n    \n           try {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                       .fromFile(\"pdfservices-api-credentials.json\")\n                       .build();\n    \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.create(credentials);\n               ReplacePagesOperation replacePagesOperation = ReplacePagesOperation.createNew();\n    \n               // Set operation base input from a source file.\n               FileRef baseSourceFile = FileRef.createFromLocalFile(\"src/main/resources/baseInput.pdf\");\n               replacePagesOperation.setBaseInput(baseSourceFile);\n    \n               // Create a FileRef instance using a local file.\n               FileRef firstInputFile = FileRef.createFromLocalFile(\"src/main/resources/replacePagesInput1.pdf\");\n               PageRanges pageRanges = getPageRangeForFirstFile();\n    \n               // Adds the pages (specified by the page ranges) of the input PDF file for replacing the\n               // page of the base PDF file.\n               replacePagesOperation.addPagesForReplace(firstInputFile, pageRanges, 1);\n    \n    \n               // Create a FileRef instance using a local file.\n               FileRef secondInputFile = FileRef.createFromLocalFile(\"src/main/resources/replacePagesInput2.pdf\");\n    \n               // Adds all the pages of the input PDF file for replacing the page of the base PDF file.\n               replacePagesOperation.addPagesForReplace(secondInputFile, 3);\n    \n               // Execute the operation\n               FileRef result = replacePagesOperation.execute(executionContext);\n    \n               // Save the result at the specified location\n               result.saveAs(\"output/replacePagesOutput.pdf\");\n           } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n               LOGGER.error(\"Exception encountered while executing operation\", e);\n           }\n       }\n    \n       private static PageRanges getPageRangeForFirstFile() {\n           // Specify pages of the first file for replacing the page of base PDF file.\n           PageRanges pageRanges = new PageRanges();\n           // Add pages 1 to 3.\n           pageRanges.addRange(1, 3);\n    \n           // Add page 4.\n           pageRanges.addSinglePage(4);\n    \n           return pageRanges;\n       }\n     }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ReplacePDFPages/\n// dotnet run ReplacePDFPages.csproj\n\n   namespace ReplacePDFPages\n   {\n     class Program\n     {\n         private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n         static void Main()\n         {\n             //Configure the logging\n             ConfigureLogging();\n             try\n             {\n                 // Initial setup, create credentials instance.\n                 Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                 .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                 .Build();\n  \n                 // Create an ExecutionContext using credentials.\n                 ExecutionContext executionContext = ExecutionContext.Create(credentials);\n  \n                 // Create a new operation instance\n                 ReplacePagesOperation replacePagesOperation = ReplacePagesOperation.CreateNew();\n  \n                 // Set operation base input from a source file.\n                 FileRef baseSourceFile = FileRef.CreateFromLocalFile(@\"baseInput.pdf\");\n                 replacePagesOperation.SetBaseInput(baseSourceFile);\n  \n                 // Create a FileRef instance using a local file.\n                 FileRef firstInputFile = FileRef.CreateFromLocalFile(@\"replacePagesInput1.pdf\");\n                 PageRanges pageRanges = GetPageRangeForFirstFile();\n  \n                 // Adds the pages (specified by the page ranges) of the input PDF file for replacing the\n                 // page of the base PDF file.\n                 replacePagesOperation.AddPagesForReplace(firstInputFile, pageRanges, 1);\n  \n                 // Create a FileRef instance using a local file.\n                 FileRef secondInputFile = FileRef.CreateFromLocalFile(@\"replacePagesInput2.pdf\");\n  \n                 // Adds all the pages of the input PDF file for replacing the page of the base PDF file.\n                 replacePagesOperation.AddPagesForReplace(secondInputFile, 3);\n  \n                 // Execute the operation.\n                 FileRef result = replacePagesOperation.Execute(executionContext);\n  \n                 // Save the result to the specified location.\n                 result.SaveAs(Directory.GetCurrentDirectory() + \"/output/replacePagesOutput.pdf\");\n             }\n             catch (ServiceUsageException ex)\n             {\n                 log.Error(\"Exception encountered while executing operation\", ex);\n             // Catch more errors here . . .\n         }\n  \n         private static PageRanges GetPageRangeForFirstFile()\n         {\n             // Specify pages of the first file for replacing the page of base PDF file.\n             PageRanges pageRanges = new PageRanges();\n             // Add pages 1 to 3.\n             pageRanges.AddRange(1, 3);\n  \n             // Add page 4.\n             pageRanges.AddSinglePage(4);\n  \n             return pageRanges;\n         }\n  \n         static void ConfigureLogging()\n         {\n             ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n             XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n         }\n     }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/replacepages/replace-pdf-pages.js\n\n     const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n    \n     const getPageRangesForFirstFile = () => {\n       // Specify pages of the first file for replacing the page of base PDF file.\n       const pageRangesForFirstFile = new PDFServicesSdk.PageRanges();\n       // Add pages 1 to 3.\n       pageRangesForFirstFile.addPageRange(1, 3);\n    \n       // Add page 4.\n       pageRangesForFirstFile.addSinglePage(4);\n    \n       return pageRangesForFirstFile;\n     };\n    \n     try {\n       // Initial setup, create credentials instance.\n       const credentials = PDFServicesSdk.Credentials\n           .serviceAccountCredentialsBuilder()\n           .fromFile(\"pdfservices-api-credentials.json\")\n           .build();\n    \n       // Create an ExecutionContext using credentials and create a new operation instance.\n       const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n           replacePagesOperation = PDFServicesSdk.ReplacePages.Operation.createNew();\n    \n       // Set operation base input from a source file.\n       const baseInputFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/baseInput.pdf');\n       replacePagesOperation.setBaseInput(baseInputFile);\n    \n       // Create a FileRef instance using a local file.\n       const firstInputFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/replacePagesInput1.pdf'),\n           pageRanges = getPageRangesForFirstFile();\n    \n       // Adds the pages (specified by the page ranges) of the input PDF file for replacing the\n       // page of the base PDF file.\n       replacePagesOperation.addPagesForReplace(1, firstInputFile, pageRanges);\n    \n       // Create a FileRef instance using a local file.\n       const secondInputFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/replacePagesInput2.pdf');\n    \n       // Adds all the pages of the input PDF file for replacing the page of the base PDF file.\n       replacePagesOperation.addPagesForReplace(3, secondInputFile);\n    \n       // Execute the operation and Save the result to the specified location.\n       replacePagesOperation.execute(executionContext)\n           .then(result => result.saveAsFile('output/replacePagesOutput.pdf'))\n           .catch(err => {\n               if (err instanceof PDFServicesSdk.Error.ServiceApiError\n                   || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                   console.log('Exception encountered while executing operation', err);\n               } else {\n                   console.log('Exception encountered while executing operation', err);\n               }\n           });\n     } catch (err) {\n       console.log('Exception encountered while executing operation', err);\n     }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-combinePDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"documentsIn\\\\\": [{\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 4\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile1\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1\n                }, {\n                    \\\\\"end\\\\\": 25\n                }, {\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile2\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }]\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-916ee91c156b42349a7847a7d564fb13\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOut\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"OutputFile\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile1=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile2=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}