{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-rotate-pages-md-5dd9b16bf9dfa25e2621.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIU,YAJF,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,gBAAc,iBAEtBA,EAAAA,EAAAA,KAAA,oDACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,YAAU,aAElBA,EAAAA,EAAAA,KAAA,8CAAwCA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClD,KAAQ,wCAAsC,mBAElDX,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,6IAEAA,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClC,KAAQ,mBAAiB,mBACD,wCAC5BX,EAAAA,EAAAA,KAACL,EAAS,CAACiB,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,wCAAwCJ,QAAQ,eACtGV,EAAAA,EAAAA,KAAA,MACE,GAAM,QAAM,SAEdA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,miHA8EtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,OAAK,SAEbA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,o2GAsFtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,62GAmGtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,mBAAiB,sxGAgFlCX,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,aAEpBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,kgCAqC1C,CAEAP,EAAWW,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/rotate-pages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rotate-pages\"\n    }}>{`Rotate Pages`}</h1>\n    <p>{`Rotate a page in an existing document.`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`REST API`}</h2>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../apis/#tag/Page-Manipulation\"\n      }}>{`Rotate Pages.`}</a></p>\n    <h2 {...{\n      \"id\": \"rotate-pages-in-pdf\"\n    }}>{`Rotate Pages in PDF`}</h2>\n    <p>{`The rotate pages operation selectively rotates pages in PDF file. For\nexample, you can change portrait view to landscape view.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.rotatepages.RotatePDFPages\n \n  public class RotatePDFPages {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(RotatePDFPages.class);\n \n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/rotatePagesInput.pdf\").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                    System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // First set of page ranges for rotating the specified pages of the input PDF file.\n            PageRanges firstPageRange = getFirstPageRangeForRotation();\n\n            // Second set of page ranges for rotating the specified pages of the input PDF file.\n            PageRanges secondPageRange = getSecondPageRangeForRotation();\n\n            // Create parameters for the job\n            RotatePagesParams rotatePagesParams = RotatePagesParams.rotatePagesParamsBuilder()\n                    .withAngleToRotatePagesBy(Angle._90, firstPageRange)\n                    .withAngleToRotatePagesBy(Angle._180, secondPageRange)\n                    .build();\n\n            // Creates a new job instance\n            RotatePagesJob rotatePagesJob = new RotatePagesJob(asset, rotatePagesParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(rotatePagesJob);\n            PDFServicesResponse<RotatePagesResult> pdfServicesResponse = pdfServices.getJobResult(location, RotatePagesResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset's content to it\n            Files.createDirectories(Paths.get(\"output/\"));\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/rotatePagesOutput.pdf\").toPath());\n            LOGGER.info(\"Saving asset at output/rotatePagesOutput.pdf\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n            LOGGER.error(\"Exception encountered while executing operation\", e);\n        }\n    }\n \n    private static PageRanges getFirstPageRangeForRotation() {\n        // Specify pages for rotation\n        PageRanges firstPageRange = new PageRanges();\n        // Add page 1\n        firstPageRange.addSinglePage(1);\n\n        // Add pages 3 to 4\n        firstPageRange.addRange(3, 4);\n        return firstPageRange;\n    }\n \n    private static PageRanges getSecondPageRangeForRotation() {\n        // Specify pages for rotation\n        PageRanges secondPageRange = new PageRanges();\n        // Add page 2\n        secondPageRange.addSinglePage(2);\n\n        return secondPageRange;\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd RotatePDFPages/\n// dotnet run RotatePDFPages.csproj\n\n  namespace RotatePDFPages\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            // Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                        .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                        .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                RotatePagesOperation rotatePagesOperation = RotatePagesOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"rotatePagesInput.pdf\");\n                rotatePagesOperation.SetInput(sourceFileRef);\n \n                // Sets angle by 90 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges firstPageRange = GetFirstPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._90, firstPageRange);\n \n                // Sets angle by 180 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges secondPageRange = GetSecondPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._180, secondPageRange);\n \n                // Execute the operation.\n                FileRef result = rotatePagesOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + \"/output/rotatePagesOutput.pdf\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n \n        private static PageRanges GetFirstPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges firstPageRange = new PageRanges();\n            // Add page 1.\n            firstPageRange.AddSinglePage(1);\n \n            // Add pages 3 to 4.\n            firstPageRange.AddRange(3, 4);\n            return firstPageRange;\n        }\n \n        private static PageRanges GetSecondPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges secondPageRange = new PageRanges();\n            // Add page 2.\n            secondPageRange.AddSinglePage(2);\n \n            return secondPageRange;\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/rotatepages/rotate-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PageRanges,\n    RotatePagesParams,\n    Angle,\n    RotatePagesJob,\n    RotatePagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./rotatePagesInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // First set of page ranges for rotating the specified pages of the input PDF file\n        const firstPageRange = getFirstPageRangeForRotation();\n\n        // Second set of page ranges for rotating the specified pages of the input PDF file\n        const secondPageRange = getSecondPageRangeForRotation();\n\n        // Create parameters for the job\n        const params = new RotatePagesParams()\n            .setAngleToRotatePagesBy(Angle._90, firstPageRange)\n            .setAngleToRotatePagesBy(Angle._180, secondPageRange);\n\n        // Creates a new job instance\n        const job = new RotatePagesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: RotatePagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset's content to it\n        const outputFilePath = \"./rotatePagesOutput.pdf\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n\nfunction getFirstPageRangeForRotation() {\n    // Specify pages for rotation.\n    const firstPageRange = new PageRanges();\n    // Add page 1.\n    firstPageRange.addSinglePage(1);\n    // Add pages 3 to 4.\n    firstPageRange.addRange(3, 4);\n    return firstPageRange;\n}\n\nfunction getSecondPageRangeForRotation() {\n    // Specify pages for rotation.\n    const secondPageRange = new PageRanges();\n    // Add page 2.\n    secondPageRange.addSinglePage(2);\n    return secondPageRange;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/rotatepages/rotate_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass RotatePDFPages:\n    def __init__(self):\n        try:\n            file = open('rotatePagesInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # First set of page ranges for rotating the specified pages of the input PDF file.\n            first_page_range: PageRanges = self.get_first_page_range_for_rotation()\n\n            # Second set of page ranges for rotating the specified pages of the input PDF file.\n            second_page_range: PageRanges = self.get_second_page_range_for_rotation()\n\n            # Create parameters for the job\n            rotate_pages_params = RotatePagesParams()\n            rotate_pages_params.add_angle_to_rotate_for_page_ranges(angle=Angle.ANGLE_90, page_ranges=first_page_range)\n            rotate_pages_params.add_angle_to_rotate_for_page_ranges(angle=Angle.ANGLE_180, page_ranges=second_page_range)\n\n            # Creates a new job instance\n            reorder_pages_job = RotatePagesJob(input_asset=input_asset, rotate_pages_params=rotate_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(reorder_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, RotatePagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'rotatePagesOutput.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_first_page_range_for_rotation() -> PageRanges:\n        # Specify pages for rotation\n        first_page_range = PageRanges()\n        # Add page 1\n        first_page_range.add_single_page(1)\n        # Add pages 3 to 4\n        first_page_range.add_range(3, 4)\n        return first_page_range\n\n    @staticmethod\n    def get_second_page_range_for_rotation() -> PageRanges:\n        # Specify pages for rotation\n        second_page_range = PageRanges()\n        # Add page 2\n        second_page_range.add_single_page(2)\n        return second_page_range\n\n\nif __name__ == \"__main__\":\n    RotatePDFPages()\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Page-Manipulation\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pagemanipulation' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718f\",\n    \"pageActions\": [\n        {\n            \"rotate\": {\n                \"angle\": 90,\n                \"pageRanges\": [\n                    {\n                        \"start\": 1\n                    }\n                ]\n            }\n        },\n        {\n            \"rotate\": {\n                \"angle\": 180,\n                \"pageRanges\": [\n                    {\n                        \"start\": 2,\n                        \"end\": 2\n                    }\n                ]\n            }\n        }\n    ]\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}