{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/pdf-services-api/howtos/linearize-pdf.md"],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"mappings":"2OAUsBA,E,mEAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,kBADR,mBAGA,qIAEA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBH,QAAQ,eACnF,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,irDAsCL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,89DAoDL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,uoDAuCL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,kFAD6B,UAO7CN,EAAWO,gBAAiB","file":"component---src-pages-pdf-services-api-howtos-linearize-pdf-md-81d3d6b717b629a8d58d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"linearize-pdfs\"\n    }}>{`Linearize PDFs`}</h1>\n    <p>{`Linearizing a PDF creates a web-optimized PDF file which supports\nincremental access in network environments.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.linearizepdf.LinearizePDF\n \n     public class LinearizePDF {\n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(LinearizePDF.class);\n    \n       public static void main(String[] args) {\n    \n           try {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                       .fromFile(\"pdfservices-api-credentials.json\")\n                       .build();\n    \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.create(credentials);\n               LinearizePDFOperation linearizePDFOperation = LinearizePDFOperation.createNew();\n    \n               // Set operation input from a source file.\n               FileRef source = FileRef.createFromLocalFile(\"src/main/resources/linearizePDFInput.pdf\");\n               linearizePDFOperation.setInput(source);\n    \n               // Execute the operation\n               FileRef result = linearizePDFOperation.execute(executionContext);\n    \n               // Save the result at the specified location\n               result.saveAs(\"output/linearizePDFOutput.pdf\");\n    \n           } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n               LOGGER.error(\"Exception encountered while executing operation\", ex);\n           }\n       }\n     }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-1\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd LinearizePDF/\n// dotnet run LinearizePDF.csproj\n\n namespace LinearizePDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                               .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                               .Build();\n\n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               LinearizePDFOperation linearizePDFOperation = LinearizePDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"linearizePDFInput.pdf\");\n               linearizePDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = linearizePDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + \"/output/linearizePDFOutput.pdf\");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error(\"Exception encountered while executing operation\", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n       }\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/linearizepdf/linearize-pdf.js\n\n   const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n  \n   try {\n     // Initial setup, create credentials instance.\n     const credentials =  PDFServicesSdk.Credentials\n         .serviceAccountCredentialsBuilder()\n         .fromFile(\"pdfservices-api-credentials.json\")\n         .build();\n  \n     // Create an ExecutionContext using credentials and create a new operation instance.\n     const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n         linearizePDF = PDFServicesSdk.LinearizePDF,\n         linearizePDFOperation = linearizePDF.Operation.createNew();\n  \n     // Set operation input from a source file.\n     const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/linearizePDFInput.pdf');\n     linearizePDFOperation.setInput(input);\n  \n     // Execute the operation and Save the result to the specified location.\n     linearizePDFOperation.execute(executionContext)\n         .then(result => result.saveAsFile('output/linearizePDFOutput.pdf'))\n         .catch(err => {\n             if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                 || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                 console.log('Exception encountered while executing operation', err);\n             } else {\n                 console.log('Exception encountered while executing operation', err);\n             }\n         });\n   } catch (err) {\n     console.log('Exception encountered while executing operation', err);\n   }\n`}</code></pre>\n    <p>{`The REST API example can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://documentcloud.adobe.com/document-services/index.html#post-linearizePDF\"\n      }}>{`here`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}