"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3344],{73364:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return d},default:function(){return u}});var a,i=n(87462),o=n(63366),r=(n(15007),n(64983)),s=n(91515),l=["components"],d={},m=(a="InlineAlert",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),p={_frontmatter:d},c=s.Z;function u(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.mdx)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"ui-customization"},"UI Customization"),(0,r.mdx)("p",null,(0,r.mdx)("p",null,"The Embed API provides a number of options for customizing the user\ninterface and user interactions with the PDF. Features which are enabled\nby default can be explicitly disabled.\nOptional configurations include\ncontrols for:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Enabling and disabling commenting, form filling, and other user\ninteractions (applicable only in Full Window embed mode)."),(0,r.mdx)("li",{parentName:"ul"},"Enabling and disabling PDF download and print options."),(0,r.mdx)("li",{parentName:"ul"},"Modifying the PDF display to Fit Page or Fit Width (applicable in\nFull Window and Lightbox embed modes).")),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1060px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"55.094339622641506%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/dda86/ui.webp 265w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/010e6/ui.webp 530w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/668f0/ui.webp 1060w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/89d57/ui.webp 1590w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/4c6e1/ui.webp 1976w"],sizes:"(max-width: 1060px) 100vw, 1060px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/28773/ui.png 265w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/a0177/ui.png 530w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/ea60f/ui.png 1060w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/684d5/ui.png 1590w","/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/3f8e8/ui.png 1976w"],sizes:"(max-width: 1060px) 100vw, 1060px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/e28a3eb5ed87a90445dde7dc5493632b/ea60f/ui.png",alt:"Options for Customising User Interface using undo-redo, annotation tools, navigation, zoom etc",title:"Options for Customising User Interface using undo-redo, annotation tools, navigation, zoom etc",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    "))),(0,r.mdx)("h2",{id:"menu-and-tool-options"},"Menu and tool options"),(0,r.mdx)("p",null,"You can control various options provided by PDF Embed API and\ncustomize the PDF viewer as per your requirements."),(0,r.mdx)("p",null,"Initialize the ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeDC.View")," object with your client ID and\nthen invoke the ",(0,r.mdx)("inlineCode",{parentName:"p"},"previewFile")," API on ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeDC.View")," object.\nThe ",(0,r.mdx)("inlineCode",{parentName:"p"},"previewFile")," API reads the variable values and toggles\nfeatures on and off accordingly."),(0,r.mdx)("p",null,"In the example below, the embed mode is set as ",(0,r.mdx)("inlineCode",{parentName:"p"},"FULL_WINDOW")," and the download PDF option is disabled from the\noverflow menu in the top bar in full window embed mode with ",(0,r.mdx)("inlineCode",{parentName:"p"},"showDownloadPDF")," set to ",(0,r.mdx)("em",{parentName:"p"},"false"),". The\nPDF zoom control options are disabled with ",(0,r.mdx)("inlineCode",{parentName:"p"},"showZoomControl")," set to ",(0,r.mdx)("em",{parentName:"p"},"false"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<div id="adobe-dc-view"></div>\n<script src="https://documentservices.adobe.com/view-sdk/viewer.js"><\/script>\n<script type="text/javascript">\n// Store the UI options in a constant\nconst previewConfig = {\n   embedMode: "FULL_WINDOW",\n   showDownloadPDF: false,\n   showZoomControl: false\n}\n\ndocument.addEventListener("adobe_dc_view_sdk.ready", function () {\n   var adobeDCView = new AdobeDC.View({clientId: "<YOUR_CLIENT_ID>", divId: "adobe-dc-view"});\n   // Consume previewConfig here. . .\n   adobeDCView.previewFile({\n      content:{location: {url: "https://documentservices.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf"}},\n      metaData:{fileName: "Bodea Brochure.pdf"}\n   }, previewConfig);\n});\n<\/script>\n')),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Configuration options for AdobeDC.View object")),(0,r.mdx)("p",null,"This table lists down the various configurations which can be passed while initializing the ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeDC.View")," object."),(0,r.mdx)("br",null),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Variable"),(0,r.mdx)("th",{parentName:"tr",align:null},"Default"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"clientId"),(0,r.mdx)("td",{parentName:"tr",align:null},"None"),(0,r.mdx)("td",{parentName:"tr",align:null},"You'll need a client ID to use the Adobe PDF Embed API. To get one, ",(0,r.mdx)("a",{parentName:"td",href:"https://documentservices.adobe.com/dc-integration-creation-app-cdn/main.html?api=pdf-embed-api"},"click HERE"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"divId"),(0,r.mdx)("td",{parentName:"tr",align:null},'"adobe-dc-view"'),(0,r.mdx)("td",{parentName:"tr",align:null},"The div ID where your PDF will render.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"locale"),(0,r.mdx)("td",{parentName:"tr",align:null},'"en-US"'),(0,r.mdx)("td",{parentName:"tr",align:null},"You can select another language by passing the locale code variable. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos/#language-support"},"Language support"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"reportSuiteId"),(0,r.mdx)("td",{parentName:"tr",align:null},"None"),(0,r.mdx)("td",{parentName:"tr",align:null},"Pass the report suite ID to collect PDF analytics in Adobe Analytics. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtodata/#adobe-analytics"},"Adobe analytics"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"measurementId"),(0,r.mdx)("td",{parentName:"tr",align:null},"None"),(0,r.mdx)("td",{parentName:"tr",align:null},"Pass the measurement ID to collect PDF analytics in Google Analytics. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtodata/#google-analytics"},"Google Analytics"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"sendAutoPDFAnalytics"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"Use this configuration to disable PDF analytics collection in Adobe Analytics or Google Analytics. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtodata/#control-analytics-collection"},"Control analytics collection"),".")))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Configuration options for previewFile API")),(0,r.mdx)("p",null,"This table lists down the various preview configurations which can be passed to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"previewFile")," API to customize the PDF viewer."),(0,r.mdx)("br",null),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Variable"),(0,r.mdx)("th",{parentName:"tr",align:null},"Default"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showZoomControl"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"Set this to ",(0,r.mdx)("em",{parentName:"td"},"false")," to hide the zoom-in and zoom-out options available in the right-hand panel. This configuration will work for full window and lightbox embed modes.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showAnnotationTools"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"If ",(0,r.mdx)("em",{parentName:"td"},"true"),", tools such as add text, sticky note, highlight, and so on appear in the quick tools menu on the left-hand side in full window embed mode. For more details, see ",(0,r.mdx)("a",{parentName:"td",href:"./howtos_comments.md"},"Comments and Markup"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showFullScreen"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"By default, the full screen toggle appears in the bottom toolbar in sized container embed mode. Set this to ",(0,r.mdx)("em",{parentName:"td"},"false")," to hide the full screen toggle.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"defaultViewMode"),(0,r.mdx)("td",{parentName:"tr",align:null},'""'),(0,r.mdx)("td",{parentName:"tr",align:null},'This variable takes a string value of "',(0,r.mdx)("strong",{parentName:"td"},"FIT","_","WIDTH"),'", "',(0,r.mdx)("strong",{parentName:"td"},"FIT","_","PAGE"),'", "',(0,r.mdx)("strong",{parentName:"td"},"TWO","_","COLUMN"),'" or "',(0,r.mdx)("strong",{parentName:"td"},"TWO","_","COLUMN","_","FIT","_","PAGE"),'". ',(0,r.mdx)("br",null)," 1. ",(0,r.mdx)("strong",{parentName:"td"},"FIT","_","WIDTH"),": Expands the page horizontally to the full width of the document pane. ",(0,r.mdx)("br",null)," 2. ",(0,r.mdx)("strong",{parentName:"td"},"FIT","_","PAGE"),": Displays the entire page in the current view pane. ",(0,r.mdx)("br",null)," 3. ",(0,r.mdx)("strong",{parentName:"td"},"TWO","_","COLUMN"),": Displays two pages of the PDF side by side in the current view pane. ",(0,r.mdx)("br",null)," 4. ",(0,r.mdx)("strong",{parentName:"td"},"TWO","_","COLUMN","_","FIT","_","PAGE"),": Displays two pages of the PDF side by side where the entire two pages are displayed in the current view pane. Note that end users can also toggle the view mode via the Fit Width, Fit Page or Two-Column button on the right-hand panel. ",(0,r.mdx)("br",null),(0,r.mdx)("br",null),"In addition to these, there are two other view modes which are supported only in mobile browsers: ",(0,r.mdx)("br",null)," 1. ",(0,r.mdx)("strong",{parentName:"td"},"CONTINUOUS"),": This mode displays all the document pages one after the other and users can easily navigate through the pages by scrolling up or down. ",(0,r.mdx)("br",null)," 2. ",(0,r.mdx)("strong",{parentName:"td"},"SINGLE","_","PAGE"),": This mode displays only a single document page at a time and doesn’t show any adjoining page. Users can use the swipe gesture to navigate to other pages which will be displayed one at a time.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"enableFormFilling"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"If ",(0,r.mdx)("em",{parentName:"td"},"true"),", form filling is enabled and users can edit fields in full window embed mode.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showDownloadPDF"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"If ",(0,r.mdx)("em",{parentName:"td"},"true"),", PDF can be downloaded in all embed modes. Set this to ",(0,r.mdx)("em",{parentName:"td"},"false"),"  to disable PDF download.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showPrintPDF"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"If true, PDF can be printed in all embed modes. Set this to ",(0,r.mdx)("em",{parentName:"td"},"false")," to disable PDF printing.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"exitPDFViewerType"),(0,r.mdx)("td",{parentName:"tr",align:null},'"CLOSE"'),(0,r.mdx)("td",{parentName:"tr",align:null},"The top bar in lightbox embed mode contains the close button by default to close the PDF preview which can be configured to Back button by setting ",(0,r.mdx)("inlineCode",{parentName:"td"},"exitPDFViewerType"),' to "RETURN".')),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showThumbnails"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"Page thumbnails are available by default in full window and lightbox embed modes. Set this to ",(0,r.mdx)("em",{parentName:"td"},"false")," if you want to hide the thumbnails from the right-hand panel.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showBookmarks"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"true")),(0,r.mdx)("td",{parentName:"tr",align:null},"PDF bookmarks are available by default in full window and lightbox embed modes. Set this to ",(0,r.mdx)("em",{parentName:"td"},"false")," if you want to hide the bookmarks from the right-hand panel.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"enableLinearization"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"Set this to ",(0,r.mdx)("em",{parentName:"td"},"true")," to enable PDF linearization. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos.md#pdf-linearization"},"PDF linearization"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"enableAnnotationAPIs"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"Set this to ",(0,r.mdx)("em",{parentName:"td"},"true")," to add, update and delete PDF annotations programmatically in full window embed mode. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos_comments/#annotations-api-overview"},"Annotations API overview"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"includePDFAnnotations"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"This configuration is used with ",(0,r.mdx)("inlineCode",{parentName:"td"},"enableAnnotationAPIs")," to access existing PDF annotations. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos_comments/#annotations-api-overview"},"Annotations API overview"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"enableSearchAPIs"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"Set this to ",(0,r.mdx)("em",{parentName:"td"},"true")," to perform search operation in the PDF programmatically. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos_ui/#search-apis"},"Search APIs"),".")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"showDisabledSaveButton"),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("em",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"Set this to ",(0,r.mdx)("em",{parentName:"td"},"true")," to show the save button in disabled state even when there are no changes to be saved to the PDF.")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"focusOnRendering"),(0,r.mdx)("td",{parentName:"tr",align:null},"Varies according to embed mode"),(0,r.mdx)("td",{parentName:"tr",align:null},"With this configuration, website developers have the flexibility to control if the PDF should take focus when it is rendered. For more details, see the section ",(0,r.mdx)("a",{parentName:"td",href:"../howtos/#focus-on-pdf-rendering"},"Focus on PDF rendering"),".")))),(0,r.mdx)("h2",{id:"annotations"},"Annotations"),(0,r.mdx)("p",null,"For details, see ",(0,r.mdx)("a",{parentName:"p",href:"./howtos_comments.md"},"Comments and Markup"),"."),(0,r.mdx)("h2",{id:"callbacks--workflows"},"Callbacks & workflows"),(0,r.mdx)("p",null,"The PDF Embed API supports workflow customization via callbacks. By\nregistering callbacks with specified parameters, website developers can\ncontrol workflows related to saving files, user profiles, user settings,\nand so on."),(0,r.mdx)("p",null,"Every callback requires the following three parameters:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Callback type: One of SAVE","_","API, STATUS","_","API, GET","_","USER","_","PROFILE,\nGET","_","USER","_","SETTING","_","API, or SET","_","USER","_","SETTING","_","API"),(0,r.mdx)("li",{parentName:"ul"},"Function: A JavaScript function which returns a promise."),(0,r.mdx)("li",{parentName:"ul"},"Options: Additional options passed to the callback to control its\nbehaviour in certain scenarios.")),(0,r.mdx)("p",null,"You can only register one callback per type; for example, you can\nregister one callback for save and one for status."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeDC.View")," exposes ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerCallback"),", so the code looks something\nlike:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"adobeDCView.registerCallback(\n  <Callback Type>,\n  <Function>,\n  options\n);\n")),(0,r.mdx)("p",null,"The second parameter is a function which returns a promise which either\nresolves or fails with a response object consisting of ",(0,r.mdx)("em",{parentName:"p"},"code")," and\n",(0,r.mdx)("em",{parentName:"p"},"data"),". This promise should resolve in the case of successful execution,\nand it should be rejected in the case of an error. Pass the relevant\ncode along with the promises:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"return new Promise((resolve, reject) => {\n /* Success\n  resolve({\n      code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n      data: {...}\n  }); */\n\n /* Failure\n  reject({\n      code: AdobeDC.View.Enum.ApiResponseCode.FAIL,\n      data: {...}\n  }); */\n}\n")),(0,r.mdx)("h2",{id:"user-profiles"},"User Profiles"),(0,r.mdx)("p",null,'The user profile callback allows the user to specify user profile\ndetails such as first name, last name, and email address. By default, if\nyou do not register a user profile callback, the user name is displayed\nas "Guest" in the comments panel.'),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1060px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"76.98113207547169%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/dda86/userprofile_new.webp 265w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/010e6/userprofile_new.webp 530w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/668f0/userprofile_new.webp 1060w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/95f20/userprofile_new.webp 1440w"],sizes:"(max-width: 1060px) 100vw, 1060px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/28773/userprofile_new.png 265w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/a0177/userprofile_new.png 530w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/ea60f/userprofile_new.png 1060w","/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/89066/userprofile_new.png 1440w"],sizes:"(max-width: 1060px) 100vw, 1060px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/aff0739fdc450a559512804ab7ce1af3/ea60f/userprofile_new.png",alt:"User being referred to as guest",title:"User being referred to as guest",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,"When the callback is registered, user annotations are associated with\nthe corresponding username."),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"318px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"52.45283018867924%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/76ee406c047a7130f935f203d0024521/dda86/userprofile1.webp 265w","/pdfservices-api-documentation/static/76ee406c047a7130f935f203d0024521/1059b/userprofile1.webp 318w"],sizes:"(max-width: 318px) 100vw, 318px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/76ee406c047a7130f935f203d0024521/28773/userprofile1.png 265w","/pdfservices-api-documentation/static/76ee406c047a7130f935f203d0024521/f29e5/userprofile1.png 318w"],sizes:"(max-width: 318px) 100vw, 318px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/76ee406c047a7130f935f203d0024521/f29e5/userprofile1.png",alt:"User being referred with correct username",title:"User being referred with correct username",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"User profile callback signature")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const profile = {\n  userProfile: {\n      name: <name of user>,\n      firstName: <first name>,\n      lastName: <last name>,\n      email: <user email>\n  }\n};\n\nadobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.GET_USER_PROFILE_API,\n   function() {\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n            data: profile\n         });\n      });\n   },\n{});\n")),(0,r.mdx)("h2",{id:"user-settings"},"User settings"),(0,r.mdx)("p",null,"Users can update the color of an annotation by clicking on the PDF\nannotation and changing the color from the toolbar. The updated color\nis applied to all new annotations of that type added to the PDF. Also,\nwhen any annotation tool is selected for the first\ntime, there is a coach mark displayed to educate users about the\nannotation tool which goes away after a few seconds."),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Previously, the default implementation of these user preferences was\nthat the browser used to remember the updated annotation color and\nalso whether the coach mark for a selected annotation tool has been\ndisplayed or not. This was achieved by storing this data in the local\nstorage of the PDF Embed API domain. This is now deprecated and PDF\nEmbed API does not store this data."),(0,r.mdx)("p",null,"By default, these preferences are lost when the PDF reloads. As a\nresult, the updated annotation color is not remembered (default\nannotation color will be applied in this case) and users will see\nannotation tool coach marks again when the PDF reloads."),(0,r.mdx)("p",null,"Website developers can improve this experience by registering the user\nsetting callbacks. There are two callbacks involved:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"SET","_","USER","_","SETTING","_","API: This callback saves user-specific settings."),(0,r.mdx)("li",{parentName:"ul"},"GET","_","USER","_","SETTING","_","API: This callback fetches the current user\nsetting.")),(0,r.mdx)("p",null,"Developers can provide their own implementation using these callbacks\nand save the user preferences wherever they like."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"User settings callback signature")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"adobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.SET_USER_SETTING_API,\n   function(setting) {\n      /* Add your custom implementation here to save the user setting */\n      ...\n      ...\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS\n         });\n      });\n   },\n{});\n\n\nadobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.GET_USER_SETTING_API,\n   function() {\n      /* Fetch the user setting */\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n            data: {\n               setting: <USER_STORED_SETTING>\n            }\n         });\n      });\n   },\n{});\n")),(0,r.mdx)("p",null,"Find the working code sample\n",(0,r.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/pdfembedapi_samples"},"here")," under\n",(0,r.mdx)("inlineCode",{parentName:"p"},"/More Samples/Save User Preferences/"),". In this code sample, the user\nsetting callbacks are used to save the user preferences in the local\nstorage of the website domain. Using this implementation, the browser\nremembers the updated annotation color and also shows the coach mark\nonly once for every annotation tool in the current browser."),(0,r.mdx)("p",null,"This is only an example and it is up to the website developer how they\ndo the actual implementation of saving the user preferences."),(0,r.mdx)("h2",{id:"save-a-pdf"},"Save a PDF"),(0,r.mdx)("p",null,"The Save button on the top bar is not visible unless the PDF is\nmodified: it only becomes active after PDF modification (there are\nchanges to actually save). For example, when ",(0,r.mdx)("inlineCode",{parentName:"p"},"showAnnotationTools")," is\ntrue, users can add an annotation or comment, and you can provide them\nwith the option to save the modified PDF to a local or networked\nlocation."),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"A user cannot add comments or edit PDF files that are secure,\nprotected, or read-only. The annotation tools as well as the save\nbutton are hidden for such files."),(0,r.mdx)("p",null,"Note that while the Save button is hidden by default, you can show the\nbutton even when there are no changes to save by setting\n",(0,r.mdx)("inlineCode",{parentName:"p"},"showDisabledSaveButton")," to ",(0,r.mdx)("em",{parentName:"p"},"true")," and passing it as a preview\nconfiguration to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"previewFile")," API. In this case, the save button\nappears in disabled state until the PDF is modified."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"{\n  showDisabledSaveButton: <Boolean, default=false>,\n}\n")),(0,r.mdx)("h3",{id:"save-callback"},"Save callback"),(0,r.mdx)("p",null,"This callback allows users to save the updated PDF buffer which can then\nbe stored in an external file storage system."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"If you do not register a callback"),": When any annotation is added to the PDF,\na download button appears in the top bar. Click on the download button to save\nthe updated PDF to the user’s local machine.\nThe default location is often the Downloads folder."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"If you do register a callback"),": When any annotation is added to the PDF,\na save button appears in the top bar. Your code can enable saving the\nmodified document to an external file storage system like OneDrive\nor Google Drive. In this case, the code varies with the website\ndeveloper’s implementation.")),(0,r.mdx)("p",null,"Users can trigger the save functionality by either clicking on the\n",(0,r.mdx)("strong",{parentName:"p"},"Save")," or ",(0,r.mdx)("strong",{parentName:"p"},"Download")," button manually or by pressing ",(0,r.mdx)("strong",{parentName:"p"},"Ctrl+S")," on the keyboard. You\nshould register the callback to receive the modified file content when\nthe user initiates the save."),(0,r.mdx)("p",null,"To control the save callback behavior, you can pass the following\noptions:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"autoSaveFrequency"),": Optional. Default value is 0. The save callback\nsupports auto-saving so that manual saving is not required. The\nvalue is the time in seconds after which the PDF is auto-saved if\nthere are any unsaved changes and no other annotation changes are\nmade in the meantime. Using this configuration, the document is\nsaved even if the user does not manually save. You must set this\nparameter to a numeric value greater than 0."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"enableFocusPolling"),": Optional. Default value is false. When true, a\nPDF with unsaved changes is auto-saved whenever the user focus\nshifts from the current PDF preview (for example, by opening a new\ntab in the same browser). When false, auto-save does not happen. Set\nthis parameter to true if you want this to work."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"showSaveButton"),": Optional. Default value is true. Set this to false\nif you don't want the save button to be displayed at all, not even\nwhen the PDF is modified. When set to false, the save button is\nnever displayed and save operation will be done through auto-save or\nthrough the keyboard by pressing Ctrl+S.")),(0,r.mdx)("p",null,"The second callback parameter is a JavaScript function returning a\nPromise which either resolves or fails with a response object containing\ncode and data. The function parameters include:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"metaData"),": Information about the file"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"content"),": The ArrayBuffer of file content"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"options"),": (optional) Additional user options passed to the function\nto control its behavior in certain cases. For instance, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"saveAs"),"\noption is passed here when the current user saves a copy of a\nchanged PDF when multiple users are modifying the same file (See the\nFILE","_","MODIFIED case below).")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Save callback signature")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const saveOptions = {\n   autoSaveFrequency: <Number, default=0>,\n   enableFocusPolling: <Boolean, default=false>,\n   showSaveButton: <Boolean, default=true>\n}\n\nadobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.SAVE_API,\n   function(metaData, content, options) {\n      /* Add your custom save implementation here...and based on that resolve or reject response in given format */\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n            data: {\n               /* Updated file metadata after successful save operation */\n               metaData: <File MetaData>\n            }\n         });\n      });\n   },\n   saveOptions\n);\n")),(0,r.mdx)("p",null,"The website developer can write their own save implementation in this\nfunction and should send the response object with the appropriate code\nand data in the following format:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"SUCCESS: Use this response code to denote a successful save\noperation where the response data contains the updated file\nmetadata."),(0,r.mdx)("li",{parentName:"ul"},"FAIL: Use the FAIL response code when the save API fails. Response\ndata is optional in this case. The user will see an error popup and\nshould retry saving.")),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"326px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"55.094339622641506%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/c0f6e7a7964702f9c7121f6bc3ed61fe/dda86/fail.webp 265w","/pdfservices-api-documentation/static/c0f6e7a7964702f9c7121f6bc3ed61fe/10585/fail.webp 326w"],sizes:"(max-width: 326px) 100vw, 326px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/c0f6e7a7964702f9c7121f6bc3ed61fe/28773/fail.png 265w","/pdfservices-api-documentation/static/c0f6e7a7964702f9c7121f6bc3ed61fe/15a61/fail.png 326w"],sizes:"(max-width: 326px) 100vw, 326px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/c0f6e7a7964702f9c7121f6bc3ed61fe/15a61/fail.png",alt:"Generic Error Message",title:"Generic Error Message",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("br",null),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"FILE","_","MODIFIED: Use the response code FILE","_","MODIFIED to capture the case when two users\nsimultaneously modify a single PDF. This case only occurs for shared\nfiles. The save functionality will fail for the current user if the file\ncontent has been previously modified by another user. The response data\nwill contain the name and email of the other user modifying the same\nfile.")),(0,r.mdx)("p",null,"In this scenario, the current user sees a popup with two options:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Save a copy"),": Choosing the ",(0,r.mdx)("strong",{parentName:"li"},"Save a copy")," button initiates the\nsave callback again and saves a copy of the PDF with the current\nuser’s changes. The ",(0,r.mdx)("inlineCode",{parentName:"li"},"{saveAs: true}")," option is passed to the\n",(0,r.mdx)("inlineCode",{parentName:"li"},"options")," parameter of the function to denote that a new PDF is\nsaved."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Discard my changes"),": Discards the current user’s changes and\nreloads the PDF.")),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"499px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"40%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/eb541656b8d3bf53cfbdfc0cd64a13e4/dda86/file_modified.webp 265w","/pdfservices-api-documentation/static/eb541656b8d3bf53cfbdfc0cd64a13e4/aa66f/file_modified.webp 499w"],sizes:"(max-width: 499px) 100vw, 499px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/eb541656b8d3bf53cfbdfc0cd64a13e4/28773/file_modified.png 265w","/pdfservices-api-documentation/static/eb541656b8d3bf53cfbdfc0cd64a13e4/f80a3/file_modified.png 499w"],sizes:"(max-width: 499px) 100vw, 499px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/eb541656b8d3bf53cfbdfc0cd64a13e4/f80a3/file_modified.png",alt:"File Modified message",title:"File Modified message",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Save callback")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"/* Options to control save behavior */\nconst saveOptions = {\n   autoSaveFrequency: <Number, default=0>,\n   enableFocusPolling: <Boolean, default=false>,\n   showSaveButton: <Boolean, default=true>\n}\n\n/* Register save callback */\nadobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.SAVE_API,\n   function(metaData, content, options) {\n      /* Write down your own save implementation here... and based on that resolve or reject response in given format */\n      /* Save callback success case */\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n            data: {\n              metaData: Object.assign(metaData, {fileName: <UPDATED_FILE_NAME>})\n            }\n         });\n      });\n\n     /* Save callback failure case */\n     /* return new Promise((resolve, reject) => {\n           reject({\n              code: AdobeDC.View.Enum.ApiResponseCode.FAIL,\n              data: {\n                 <Optional>\n              }\n           });\n        }); */\n\n     /* Save callback file modified case */\n     /* return new Promise((resolve, reject) => {\n           resolve({\n              code: AdobeDC.View.Enum.ApiResponseCode.FILE_MODIFIED,\n              data: {\n                 modifiedBy: {\n                   name: <Username of the user who modified the file>,\n                   mail: <Email of the user who modified the file>,\n                 }\n              }\n           });\n        }); */\n   },\n   saveOptions);\n")),(0,r.mdx)("h2",{id:"status-callback"},"Status callback"),(0,r.mdx)("p",null,"The status callback allows you to poll the status of the file to check\nwhether the currently open file is changed by another user or not. This\nfile status polling occurs after a fixed interval of time defined in the\n",(0,r.mdx)("inlineCode",{parentName:"p"},"filePollFrequency")," option. Use both the save and status callbacks\ntogether to achieve the complete save experience including auto-save and\nfile status polling."),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"While you can specify additional options to control the status\ncallback, both ",(0,r.mdx)("inlineCode",{parentName:"p"},"autoSaveFrequency")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"enableFocusPolling")," are\ndeprecated for the status callback. Developers are advised to use\nthese options with the save callback."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"filePollFrequency"),": Optional. Default value is 10 seconds. The time\nin seconds after which the file is polled for changes. To disable\nfile status polling, set ",(0,r.mdx)("inlineCode",{parentName:"li"},"filePollFrequency")," to 0. By default, file\nstatus polling starts when there are unsaved changes made in the PDF\nby the current user."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"keepPolling"),": Optional. Default value is false (boolean). Set\n",(0,r.mdx)("inlineCode",{parentName:"li"},"keepPolling")," to true if you want file status polling to work\ncontinuously even if there are no unsaved changes made to the file\nby the current user. The frequency of the file status polling is\ngoverned by the time specified in ",(0,r.mdx)("inlineCode",{parentName:"li"},"filePollFrequency"),".")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Status callback signature")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const statusOptions = {\n   filePollFrequency: <Number, default=10>,\n   keepPolling: <Boolean, default=false>\n};\n\nadobeDCView.registerCallback(\n   AdobeDC.View.Enum.CallbackType.STATUS_API,\n   function(metaData) {\n      /* Resolve or reject response in given format */\n      return new Promise((resolve, reject) => {\n         resolve({\n            code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n            data: {\n               <Optional>\n            }\n          });\n       });\n    },\n    statusOptions\n);\n")),(0,r.mdx)("p",null,"The second parameter of the callback is a JavaScript function returning\na Promise which either resolves or fails with a response object\ncontaining a code and data. ",(0,r.mdx)("inlineCode",{parentName:"p"},"metaData")," is the only function parameter,\nand it refers to the file information. The response code in the Promise\ncan take either SUCCESS or FILE","_","MODIFIED:"),(0,r.mdx)("p",null,"SUCCESS: Use the response code SUCCESS to denote successful file polling\nand that the file has no changes made by another user. Response data is\noptional here."),(0,r.mdx)("p",null,"FILE","_","MODIFIED: Use the response code FILE","_","MODIFIED to capture the case\nof conflicting updates made by another user in a file sharing scenario.\nResponse data will contain the name and email of the other user\nmodifying the same file. Note the following:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"If the Promise returns FILE","_",'MODIFIED when the current user has not\nchanged the file, that denotes that the file was already modified by\nanother user and the current user is viewing an old version of the\nfile. The user sees a popup with the "Get Latest Version" option\nwhich will reload the latest version of the file.')),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"475px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"38.11320754716981%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/978877b177db3536657ac886cdb82bb7/dda86/getlatest.webp 265w","/pdfservices-api-documentation/static/978877b177db3536657ac886cdb82bb7/69f92/getlatest.webp 475w"],sizes:"(max-width: 475px) 100vw, 475px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/978877b177db3536657ac886cdb82bb7/28773/getlatest.png 265w","/pdfservices-api-documentation/static/978877b177db3536657ac886cdb82bb7/abae4/getlatest.png 475w"],sizes:"(max-width: 475px) 100vw, 475px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/978877b177db3536657ac886cdb82bb7/abae4/getlatest.png",alt:"Get Latest Version message",title:"Get Latest Version message",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("br",null),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"If the Promise returns FILE","_","MODIFIED after the current user has\nchanged the file, that denotes that two users are modifying the same\nfile simultaneously. In this scenario, the current user sees a popup\nwith two options: ",(0,r.mdx)("strong",{parentName:"li"},"Save a copy")," saves a copy of the PDF with the\ncurrent user’s changes while ",(0,r.mdx)("strong",{parentName:"li"},"Discard my changes")," discards the\ncurrent user’s changes and reloads the PDF.")),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"489px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"39.62264150943396%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/bff6872877fefd204981b3e68a667250/dda86/saveconflict.webp 265w","/pdfservices-api-documentation/static/bff6872877fefd204981b3e68a667250/0837a/saveconflict.webp 489w"],sizes:"(max-width: 489px) 100vw, 489px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/bff6872877fefd204981b3e68a667250/28773/saveconflict.png 265w","/pdfservices-api-documentation/static/bff6872877fefd204981b3e68a667250/7f605/saveconflict.png 489w"],sizes:"(max-width: 489px) 100vw, 489px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/bff6872877fefd204981b3e68a667250/7f605/saveconflict.png",alt:"Conflict On Save message",title:"Conflict On Save message",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Status callback")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const statusOptions = {\n       filePollFrequency: <Number, default=10>,\n       keepPolling: <Boolean, default=false>\n    };\n\n    adobeDCView.registerCallback(\n       AdobeDC.View.Enum.CallbackType.STATUS_API,\n       function(metaData) {\n          /* Resolve or reject response in given format */\n          /* Status callback success case */\n          return new Promise((resolve, reject) => {\n             resolve({\n                code: AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\n             });\n          });\n\n          /* Status callback file modified case */\n          /* return new Promise((resolve, reject) => {\n                resolve({\n                   code: AdobeDC.View.Enum.ApiResponseCode.FILE_MODIFIED,\n                   data: {\n                      modifiedBy: {\n                         name: <Username of the user who modified the file>,\n                         mail: <Email of the user who modified the file>,\n                      }\n                   }\n                });\n             }); */\n       },\n       statusOptions\n    );\n")),(0,r.mdx)("h2",{id:"viewer-api"},"Viewer API"),(0,r.mdx)("p",null,"The PDF Embed API provides a number of viewer APIs for customizing the\nuser interface and user interactions with the PDF. These APIs can be\nused to perform UI customizations programmatically at run-time."),(0,r.mdx)("h3",{id:"getapis-interface"},"GetAPIs Interface"),(0,r.mdx)("p",null,"The getAPIs interface allows you to invoke any of the viewer APIs as\nfollows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n<head>\n <title>Adobe Acrobat Services PDF Embed API Sample</title>\n <meta charset="utf-8"/>\n <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>\n <meta id="viewport" name="viewport" content="width=device-width, initial-scale=1"/>\n</head>\n<body style="margin: 0px">\n <div id="adobe-dc-view"></div>\n <script src="https://documentservices.adobe.com/view-sdk/viewer.js"><\/script>\n <script type="text/javascript">\n    document.addEventListener("adobe_dc_view_sdk.ready", function()\n    {\n        var adobeDCView = new AdobeDC.View({clientId: "<YOUR_CLIENT_ID>", divId: "adobe-dc-view"});\n        var previewFilePromise = adobeDCView.previewFile({\n         content:   {location: {url: "https://documentservices.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf"}},\n           metaData:  {fileName: "Bodea Brochure.pdf"}\n     });\n\n     previewFilePromise.then(adobeViewer => {\n     adobeViewer.getAPIs().then(apis => {\n          // All viewer APIs can be invoked here\n      });\n    });\n  });\n <\/script>\n</body>\n</html>\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"zoom-apis"},"Zoom APIs"),(0,r.mdx)("p",null,"These APIs can be used to perform zoom operations on the PDF\nprogrammatically. These APIs are supported in all embed modes except\nin-line embed mode."),(0,r.mdx)("h4",{id:"getzoomlimits"},"getZoomLimits"),(0,r.mdx)("p",null,"This API returns the minimum and maximum allowed zoom levels of the PDF."),(0,r.mdx)("h5",{id:"input-parameters"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with a JSON object including the minimum and maximum zoom level of the PDF. ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ minZoom: <MIN_ZOOM_LEVEL>, maxZoom: <MAX_ZOOM_LEVEL> }")),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"    \npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getZoomAPIs().getZoomLimits()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"zoomin"},"zoomIn"),(0,r.mdx)("p",null,"This API zooms in on the PDF and magnifies the PDF view to the next zoom\nlevel. The magnified zoom level will never exceed the maximum zoom level\nof the PDF."),(0,r.mdx)("h5",{id:"input-parameters-1"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-1"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the updated zoom level."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-1"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getZoomAPIs().zoomOut()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"zoomout"},"zoomOut"),(0,r.mdx)("p",null,"This API zooms out of the PDF and reduces the PDF view to the previous\nzoom level. The reduced zoom level will never be less than the minimum\nzoom level of the PDF."),(0,r.mdx)("h5",{id:"input-parameters-2"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-2"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the updated zoom level."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-2"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getZoomAPIs().zoomOut()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"setzoomlevel"},"setZoomLevel"),(0,r.mdx)("p",null,"This API accepts a float value as input and sets the zoom level of the\nPDF to that value. The input must lie between the minimum and maximum\nallowed zoom levels of the PDF."),(0,r.mdx)("p",null,"If the input passed is less than the minimum zoom level, then the\nminimum zoom level is applied to the PDF. Similarly, if the input passed\nis greater than the maximum zoom level, then the maximum zoom level is\napplied."),(0,r.mdx)("h5",{id:"input-parameters-3"},"Input parameters"),(0,r.mdx)("p",null,"<ZOOM_LEVEL: Float>"),(0,r.mdx)("h5",{id:"api-output-3"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the updated zoom level."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-3"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getZoomAPIs().setZoomLevel(<ZOOM_LEVEL>)\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"search-apis"},"Search APIs"),(0,r.mdx)("p",null,"This API can be used to search for a term in the PDF programmatically.\nThis API is supported in all embed modes."),(0,r.mdx)("p",null,"In order to enable search APIs, the configuration variable\n",(0,r.mdx)("inlineCode",{parentName:"p"},"enableSearchAPIs")," should be set to true and passed as a preview\nconfiguration to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"previewFile")," API."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n<head>\n <title>Adobe Acrobat Services PDF Embed API Sample</title>\n <meta charset="utf-8"/>\n <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>\n <meta id="viewport" name="viewport" content="width=device-width, initial-scale=1"/>\n</head>\n<body style="margin: 0px">\n <div id="adobe-dc-view"></div>\n <script src="https://documentservices.adobe.com/view-sdk/viewer.js"><\/script>\n <script type="text/javascript">\n    document.addEventListener("adobe_dc_view_sdk.ready", function()\n    {\n        var adobeDCView = new AdobeDC.View({clientId: "<YOUR_CLIENT_ID>", divId: "adobe-dc-view"});\n        var previewFilePromise = adobeDCView.previewFile({\n           content:   {location: {url: "https://documentservices.adobe.com/view-sdk-demo/PDFs/Bodea Brochure.pdf"}},\n           metaData:  {fileName: "Bodea Brochure.pdf"}\n       }, { enableSearchAPIs: true });\n\n       previewFilePromise.then(adobeViewer => {\n          adobeViewer.getAPIs().then(apis => {\n              // All viewer APIs can be invoked here\n          });\n       });\n  });\n <\/script>\n</body>\n</html>\n')),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"The document search option is not available in UI when search APIs are enabled."),(0,r.mdx)("p",null,"The search API takes a search term of String value as input and searches\nfor that term in the entire document. The first occurrence of the search\nterm is highlighted in the PDF, starting from the current page in view."),(0,r.mdx)("h5",{id:"input-parameters-4"},"Input parameters"),(0,r.mdx)("p",null,"<SEARCH_STRING: String>"),(0,r.mdx)("h5",{id:"api-output-4"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with a JSON object containing the following interfaces:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"onResultsUpdate()")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"next()")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"previous()")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"clear()")))),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-4"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.search(<SEARCH_STRING>)\n                        .then(searchObject => console.log(searchObject))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"onresultsupdate"},"onResultsUpdate"),(0,r.mdx)("p",null,"Users can register a callback function and pass as an input to the\n",(0,r.mdx)("inlineCode",{parentName:"p"},"onResultsUpdate()")," function. This callback function will be triggered\nevery time a search operation takes place through the search API and the\nsearch result is highlighted in the PDF. The callback function will\nreceive important information about the current search result in the\nform of a JSON. The JSON will include information such as current page\nnumber, current search result index, total number of search results and\nstatus."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'{\n    currentResult: {\n        pageNumber: Integer,  // Current page number in view\n        index: Integer,       // Index of the current highlighted search result\n    },\n    totalResults: Integer,   // Total number of search results found till the time callback function is executed\n    status: String           // Status of search result till the time callback function is executed. Values can be "IN_PROGRESS" or "COMPLETED".\n}\n')),(0,r.mdx)("h5",{id:"input-parameters-5"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-5"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves to true on successful operation. When operation is successful, the callback function is executed and receives information about the search results in the form of a JSON. Resolves to false when ",(0,r.mdx)("inlineCode",{parentName:"li"},"onResultsUpdate()")," operation fails."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-5"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'function callbackFunction(searchResult) {\n        console.log("Current search result: ", searchResult);\n}\n\npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.search(<SEARCH_STRING>).then(searchObject => {\n                        searchObject.onResultsUpdate(callbackFunction)\n                                .then(result => console.log(result))\n                                .catch(error => console.log(error));\n                })\n                .catch(error => console.log(error));\n        });\n});\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"next"},"next"),(0,r.mdx)("p",null,"This function will highlight and navigate to the next search result in\nthe PDF."),(0,r.mdx)("h5",{id:"input-parameters-6"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-6"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves to true on successful operation and the next search result is highlighted in the PDF. Resolves to false when ",(0,r.mdx)("inlineCode",{parentName:"li"},"next()")," operation fails."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-6"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.search(<SEARCH_STRING>).then(searchObject => {\n                        searchObject.next()\n                                .then(result => console.log(result))\n                                .catch(error => console.log(error));\n                })\n                .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"previous"},"previous"),(0,r.mdx)("p",null,"This function will highlight and navigate to the previous search result\nin the PDF."),(0,r.mdx)("h5",{id:"input-parameters-7"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-7"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves to true on successful operation and the previous search result is highlighted in the PDF. Resolves to false when ",(0,r.mdx)("inlineCode",{parentName:"li"},"previous()")," operation fails."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-7"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.search(<SEARCH_STRING>).then(searchObject => {\n                        searchObject.previous()\n                                .then(result => console.log(result))\n                                .catch(error => console.log(error));\n                })\n                .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"clear"},"clear"),(0,r.mdx)("p",null,"This function will cancel the ongoing search operation and clear the\nsearch results."),(0,r.mdx)("h5",{id:"input-parameters-8"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-8"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves to true on successful operation. Stops ongoing search operation and clears the search results. Resolves to false when ",(0,r.mdx)("inlineCode",{parentName:"li"},"clear()")," operation fails."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-8"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.search(<SEARCH_STRING>).then(searchObject => {\n                        searchObject.clear()\n                                .then(result => console.log(result))\n                                .catch(error => console.log(error));\n                })\n                .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Find the working code sample for search and zoom APIs\n",(0,r.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/pdfembedapi_samples"},"here")," under\n",(0,r.mdx)("inlineCode",{parentName:"p"},"/More Samples/Viewer APIs/Search and Zoom APIs")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"bookmark-apis"},"Bookmark APIs"),(0,r.mdx)("p",null,"These APIs programmatically access existing PDF bookmarks. Note that\nonly the Full Window embed mode supports these APIs."),(0,r.mdx)("h4",{id:"getbookmarks"},"getBookmarks"),(0,r.mdx)("p",null,"This API returns the list of existing PDF bookmarks Each bookmark item\nin this list is represented as a JSON containing important information\nsuch as ID, title and the list of nested bookmarks residing under this\nbookmark."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"{\n    id: Number      // Unique identifier of the bookmark\n    title: String,  // Title of the bookmark\n    children: [ CHILD_BOOKMARK_1, CHILD_BOOKMARK_2, ... ]     // List of nested bookmarks which exists under this bookmark\n}\n")),(0,r.mdx)("h5",{id:"input-parameters-9"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-9"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the list of bookmarks available in the PDF. ",(0,r.mdx)("inlineCode",{parentName:"li"},"[ Bookmark_1, Bookmark_2, ...]")),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-9"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getBookmarkAPIs().getBookmarks()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"openbookmark"},"openBookmark"),(0,r.mdx)("p",null,"This API accepts a bookmark ID as input and navigates to that particular\nPDF bookmark."),(0,r.mdx)("h5",{id:"input-parameters-10"},"Input parameters"),(0,r.mdx)("p",null,"<BOOKMARK_ID>"),(0,r.mdx)("h5",{id:"api-output-10"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves to true on successful API execution and the user navigates to that particular bookmark. Resolves to false when the bookmark does not exist in the PDF."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-10"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"const bookmark_ID = <BOOKMARK_ID>;\n\npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getBookmarkAPIs().openBookmark(bookmark_ID)\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Find the working code sample\n",(0,r.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/pdfembedapi_samples"},"here")," under\n",(0,r.mdx)("inlineCode",{parentName:"p"},"/More Samples/Viewer APIs/Bookmark APIs")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"attachment-apis"},"Attachment APIs"),(0,r.mdx)("p",null,"These APIs access the existing attachments in the PDF programmatically."),(0,r.mdx)("h4",{id:"getattachments"},"getAttachments"),(0,r.mdx)("p",null,"This API returns the list of existing attachments in the PDF. Each\nattachment item in this list is represented as a JSON containing\nimportant information such as name, mime type, description, creation\ndate and modified date."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"{\n    name: String         // Name of the attachment file\n    description: String, // Description of the attachment\n    mimeType: String     // Mime type of the attachment file\n    created: Date        // Date when the attachment was created\n    modified: Date       // Date when the attachment was modified\n}\n")),(0,r.mdx)("h5",{id:"input-parameters-11"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-11"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the list of attachments available in the PDF: ",(0,r.mdx)("inlineCode",{parentName:"li"},"[ Attachment_1, Attachment_2,...]")),(0,r.mdx)("li",{parentName:"ul"},"Every attachment item in this list will contain information such as ",(0,r.mdx)("inlineCode",{parentName:"li"},"name"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"description"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"mimeType"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"created")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"modified"),"."),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-11"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"    \npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getAttachmentAPIs().getAttachments()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h4",{id:"getattachmentbuffer"},"getAttachmentBuffer"),(0,r.mdx)("p",null,"This API accepts the name of an attachment as input and returns the\nArrayBuffer of the attachment content."),(0,r.mdx)("h5",{id:"input-parameters-12"},"Input parameters"),(0,r.mdx)("p",null,"<ATTACHMENT_NAME: String>"),(0,r.mdx)("h5",{id:"api-output-12"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the ArrayBuffer of the attachment file: ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ buffer: Int8Array }")),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-12"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getAttachmentAPIs().getAttachmentBuffer(<ATTACHMENT_NAME>)\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Find the working code sample\n",(0,r.mdx)("a",{parentName:"p",href:"https://www.adobe.com/go/pdfembedapi_samples"},"here")," under\n",(0,r.mdx)("inlineCode",{parentName:"p"},"/More Samples/Viewer APIs/Attachment APIs")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"getpdfmetadata"},"getPDFMetadata"),(0,r.mdx)("p",null,"This API returns basic information about the PDF fetched from the PDF\ndictionary; for example, the PDF's number of pages and title."),(0,r.mdx)("h5",{id:"input-parameters-13"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-13"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with a JSON object which includes the number of pages and title of PDF if successful: ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ numPages: <NUMBER_OF_PAGES>, pdfTitle: <PDF_TITLE> }")),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-13"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getPDFMetadata()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"getxmpmetadata"},"getXMPMetadata"),(0,r.mdx)("p",null,"XMP (Extensible Metadata Platform) is a technology developed by Adobe\nwhich provides a common XML framework to store metadata in digital\ndocuments. XMP Metadata includes information about the document and its\ncontents, such as the author's name, keywords, and copyright\ninformation."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"getXMPMetadata")," checks the PDF for XMP metadata and returns it if\npresent. The API accepts two optional input parameters."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The first optional input parameter takes a list of XMP metadata\nfields. The API returns the values of only these fields. If no field\nis passed, then it returns the default field values."),(0,r.mdx)("li",{parentName:"ul"},"The second optional input parameter takes a boolean value. If\n",(0,r.mdx)("em",{parentName:"li"},"true"),", the API will also return the complete XMP metadata stream.\nThe default value is ",(0,r.mdx)("em",{parentName:"li"},"false"),".")),(0,r.mdx)("h5",{id:"input-parameters-14"},"Input parameters"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"(fields = [<field1>, <field2>, ...], includeRawStream = <Boolean>)")),(0,r.mdx)("h5",{id:"api-output-14"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the JSON object containing the XMP metadata and XML stream (if ",(0,r.mdx)("inlineCode",{parentName:"li"},"includeRawStream")," is set to true) if successful: ",(0,r.mdx)("inlineCode",{parentName:"li"},"{ xmpMetadata: <XMP_METADATA>, xmpStream: <XML> }")),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-14"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'    \nconst fields = ["dc:title", "dc:creator", "xmp:CreateDate"];\nconst includeRawStream = true;\npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getXMPMetadata(fields, includeRawStream)\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"getselectedcontent"},"getSelectedContent"),(0,r.mdx)("p",null,"If a user selects any content in the viewer, then the selected content\ncan be fetched using this API. This API currently only works with text\nselection."),(0,r.mdx)("h5",{id:"input-parameters-15"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-15"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with a JSON object including the type of content and actual selected content if successful: ",(0,r.mdx)("inlineCode",{parentName:"li"},'{ type: "<CONTENT_TYPE>", data: "<SELECTED_CONTENT>" }')),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-15"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"    \npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getSelectedContent()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n        });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"setcursor"},"setCursor"),(0,r.mdx)("p",null,"This API sets the page cursor to any cursor style, such as help, wait,\ncrosshair, etc."),(0,r.mdx)("h5",{id:"input-parameters-16"},"Input parameters"),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor"},"A string denoting the cursor style"),": <Cursor_Type>"),(0,r.mdx)("h5",{id:"api-output-16"},"API output"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-signature-16"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'    \nconst cursor_type = <Cursor_Type>;\npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.setCursor(cursor_type)\n  .then(()  =>  console.log("Success"))\n  .catch(error  =>  console.log(error));\n         });\n});\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"resetcursor"},"resetCursor"),(0,r.mdx)("p",null,"This API revokes an applied cursor style and reverts it to the default\ncursor style."),(0,r.mdx)("h5",{id:"input-parameters-17"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-17"},"API output"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-signature-17"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n\n        adobeViewer.getAPIs().then(apis => {\n                apis.resetCursor();\n         });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"getcurrentpage"},"getCurrentPage"),(0,r.mdx)("p",null,"This API returns the current page number of the in focus page."),(0,r.mdx)("h5",{id:"input-parameters-18"},"Input parameters"),(0,r.mdx)("p",null,"N/A"),(0,r.mdx)("h5",{id:"api-output-18"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the current page number if successful"),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-18"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"previewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getCurrentPage()\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n         });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"getpagezoom"},"getPageZoom"),(0,r.mdx)("p",null,"This API takes the PDF page number as input and returns the zoom level\nof that page."),(0,r.mdx)("h5",{id:"input-parameters-19"},"Input parameters"),(0,r.mdx)("p",null,"<Page_Number>"),(0,r.mdx)("h5",{id:"api-output-19"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves with the zoom level if successful"),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-19"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"    \npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.getPageZoom(<Page_Number>)\n                        .then(result => console.log(result))\n                        .catch(error => console.log(error));\n         });\n});\n")),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"gotolocation"},"gotoLocation"),(0,r.mdx)("p",null,"This API enables navigation to any PDF page. It accepts a page number as\ninput. You can also pass the x and y coordinates on the page as optional\ninput parameters to enable navigation to a particular location on the\npage. When no coordinates are passed, the default coordinates are (0,\n0)."),(0,r.mdx)(m,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Navigation will not work if the specified page number exceeds the PDF\npage limit. Moreover, the x and y input coordinates must be within the\nPDF page width and height limit. If either the x or y coordinate is\nnot within the page limit, then they default to 0."),(0,r.mdx)("h5",{id:"input-parameters-20"},"Input parameters"),(0,r.mdx)("p",null,"(<Page_Number>, <X_Coordinate>, <Y_Coordinate>)"),(0,r.mdx)("h5",{id:"api-output-20"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves if successful"),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-20"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'previewFilePromise.then(adobeViewer => {\n\n        adobeViewer.getAPIs().then(apis => {\n                apis.gotoLocation(<Page_Number>, <X_Coordinate>, <Y_Coordinate>)\n                        .then(() => console.log("Success"))\n                        .catch(error => console.log(error));\n         });\n});\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"clearpageselection"},"clearPageSelection"),(0,r.mdx)("p",null,"This API accepts a page number as input and clears any text selection\napplied to the page."),(0,r.mdx)("h5",{id:"input-parameters-21"},"Input parameters"),(0,r.mdx)("p",null,"<Page_Number>"),(0,r.mdx)("h5",{id:"api-output-21"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves if successful"),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-21"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'previewFilePromise.then(adobeViewer => {\n\nadobeViewer.getAPIs().then(apis => {\n                apis.clearPageSelection(pageNumber)\n                        .then(() => console.log("Success"))\n                        .catch(error => console.log(error));\n         });\n});\n')),(0,r.mdx)("hr",null),(0,r.mdx)("h3",{id:"enabletextselection"},"enableTextSelection"),(0,r.mdx)("p",null,"This API controls text selection in PDF. The default is enabled\n(",(0,r.mdx)("em",{parentName:"p"},"true"),"). Note that disabling text selection also disables the highlight\nannotation tool from the quick tools menu on the left-hand side."),(0,r.mdx)("h5",{id:"input-parameters-22"},"Input parameters"),(0,r.mdx)("p",null,"Boolean"),(0,r.mdx)("h5",{id:"api-output-22"},"API output"),(0,r.mdx)("p",null,"Returns a Promise which, "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Resolves if successful"),(0,r.mdx)("li",{parentName:"ul"},"Rejects with an error object that includes a code and message.")),(0,r.mdx)("h5",{id:"api-signature-22"},"API signature"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'const allowTextSelection = false;\n\npreviewFilePromise.then(adobeViewer => {\n        adobeViewer.getAPIs().then(apis => {\n                apis.enableTextSelection(allowTextSelection)\n                        .then(() => console.log("Success"))\n                        .catch(error => console.log(error));\n         });\n});\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-embed-api-howtos-ui-md-64579cc7d5d3faa2c492.js.map