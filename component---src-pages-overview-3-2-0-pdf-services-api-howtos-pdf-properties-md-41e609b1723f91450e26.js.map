{"version":3,"file":"component---src-pages-overview-3-2-0-pdf-services-api-howtos-pdf-properties-md-41e609b1723f91450e26.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5BM,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAEMI,EAAc,CAClBN,aAAAA,GAEIO,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGT,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,kOACAA,EAAAA,EAAAA,KAAA,gTACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,YAAU,aAElBA,EAAAA,EAAAA,KAAA,8CAAwCA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClD,KAAQ,+EAA6E,kBAC9D,MAC3BX,EAAAA,EAAAA,KAAA,MACE,GAAM,wBAAsB,yBAE9BA,EAAAA,EAAAA,KAAA,sEACAA,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClC,KAAQ,mBAAiB,mBACD,wCAC5BX,EAAAA,EAAAA,KAACJ,EAAS,CAACgB,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCJ,QAAQ,eAC9FV,EAAAA,EAAAA,KAAA,MACE,GAAM,QAAM,SAEdA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,6oEAiDtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,OAAK,SAEbA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,+tEAwDtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,q3DA2CtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,aAEpBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,ioBAkB1C,CAEAP,EAAWW,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/3.2.0/pdf-services-api/howtos/pdf-properties.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"get-pdf-properties\"\n    }}>{`Get PDF Properties`}</h1>\n    <p>{`Use this service to get the metadata properties of a PDF. Metadata including page count, PDF version, file size, compliance levels, font info, permissions and more are provided in JSON format for easy processing.`}</p>\n    <p>{`This data can be used to: check if a document is fully text searchable (OCR), understand the e-signature certificate info, find out compliance levels (e.g., PDF/A and PDF/UA), assess file size before compressing, check permissions related to copy, edit, printing, encryption, and much more.`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h2>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/document-services/docs/apis/#tag/PDF-Properties\"\n      }}>{`PDF Properties`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"fetch-pdf-properties\"\n    }}>{`Fetch PDF Properties`}</h3>\n    <p>{`The sample below fetches the properties of an input PDF.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.pdfproperties.GetPDFProperties\n\n  public class GetPDFProperties {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(GetPDFProperties.class);\n\n    public static void main(String[] args) {\n\n      try {\n\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile(\"pdfservices-api-credentials.json\")\n            .build();\n\n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        PDFPropertiesOperation pdfPropertiesOperation = PDFPropertiesOperation.createNew();\n\n        // Provide an input FileRef for the operation\n        FileRef source = FileRef.createFromLocalFile(\"src/main/resources/pdfPropertiesInput.pdf\");\n        pdfPropertiesOperation.setInputFile(source);\n\n        // Build PDF Properties options to include page level properties and set them into the operation\n        PDFPropertiesOptions pdfPropertiesOptions = PDFPropertiesOptions.PDFPropertiesOptionsBuilder()\n              .includePageLevelProperties(true)\n              .build();\n        pdfPropertiesOperation.setOptions(pdfPropertiesOptions);\n\n        // Execute the operation ang get properties of the PDF in PDFProperties object.\n        PDFProperties result = pdfPropertiesOperation.execute(executionContext);\n            \n        // Get properties of the PDF\n        LOGGER.info(\"The Page level properties of the PDF: {}\", result.getDocument().getPageCount());\n        LOGGER.info(\"The Fonts used in the PDF: \");\n        for(Font font: result.getDocument().getFonts()) {\n            LOGGER.info(font.getName());\n        }\n\n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error(\"Exception encountered while executing operation\", ex);\n      }\n    }\n  }  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd PDFPropertiesAsJSONObject/\n// dotnet run GetPDFProperties.csproj\n\nnamespace GetPDFProperties\n{\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n    {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n            .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n            .Build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.Create(credentials);\n            PDFPropertiesOperation pdfPropertiesOperation = PDFPropertiesOperation.CreateNew();\n\n            // Provide an input FileRef for the operation\n            FileRef source = FileRef.CreateFromLocalFile(@\"pdfPropertiesInput.pdf\");\n            pdfPropertiesOperation.SetInput(source);\n\n            // Build PDF Properties options to include page level properties and set them into the operation\n            PDFPropertiesOptions pdfPropertiesOptions = PDFPropertiesOptions.PDFPropertiesOptionsBuilder()\n            .IncludePageLevelProperties(true)\n            .Build();\n            pdfPropertiesOperation.SetOptions(pdfPropertiesOptions);\n\n            // Execute the operation ang get properties of the PDF in PDFProperties object.\n            PDFProperties pdfProperties = pdfPropertiesOperation.Execute(executionContext);\n            Console.WriteLine(\"The resultant PDF Properties are: \" + result.ToString());\n\n        }\n        catch (ServiceUsageException ex)\n        {\n            log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n    }\n\n        static void ConfigureLogging()\n    {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n    }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/get-pdf-properties.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    //Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        pdfPropertiesOperation = PDFServicesSdk.PDFProperties.Operation.createNew();\n\n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/pdfPropertiesInput.pdf');\n    pdfPropertiesOperation.setInput(input);\n\n    // Provide any custom configuration options for the operation.\n    const options = new PDFServicesSdk.PDFProperties.options.PDFPropertiesOptions.Builder()\n        .includePageLevelProperties(true)\n        .build();\n    pdfPropertiesOperation.setOptions(options);\n\n    // Execute the operation ang get properties of the PDF in PDFProperties object.\n    pdfPropertiesOperation.execute(executionContext)\n        .then(result => console.log(\"The resultant json object is : \" + JSON.stringify(result, null, 4)))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-Properties\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdfproperties' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"pageLevel\": false\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-pdfProperties\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}