"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[226],{72813:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return a},default:function(){return P}});var r=t(87462),i=t(45987),s=(t(15007),t(64983)),o=t(91515);const p=["components"],a={},c=(d="CodeBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)});var d;const l={_frontmatter:a},f=o.Z;function P(e){let{components:n}=e,t=(0,i.Z)(e,p);return(0,s.mdx)(f,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"get-pdf-properties"},"Get PDF Properties"),(0,s.mdx)("p",null,"Use this service to get the metadata properties of a PDF. Metadata including page count, PDF version, file size, compliance levels, font info, permissions and more are provided in JSON format for easy processing."),(0,s.mdx)("p",null,"This data can be used to: check if a document is fully text searchable (OCR), understand the e-signature certificate info, find out compliance levels (e.g., PDF/A and PDF/UA), assess file size before compressing, check permissions related to copy, edit, printing, encryption, and much more."),(0,s.mdx)("h2",{id:"rest-api"},"REST API"),(0,s.mdx)("p",null,"See our public API Reference for ",(0,s.mdx)("a",{parentName:"p",href:"../../../apis/#tag/PDF-Properties"},"PDF Properties"),"."),(0,s.mdx)("h3",{id:"fetch-pdf-properties"},"Fetch PDF Properties"),(0,s.mdx)("p",null,"The sample below fetches the properties of an input PDF."),(0,s.mdx)("p",null,"Please refer the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.pdfproperties.GetPDFProperties\n\n  public class GetPDFProperties {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(GetPDFProperties.class);\n\n    public static void main(String[] args) {\n\n      try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/pdfPropertiesInput.pdf").toPath())) {\n        // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv("PDF_SERVICES_CLIENT_ID"),\n                System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n\n        // Creates an asset(s) from source file(s) and upload\n        Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n        // Create parameters for the job\n        PDFPropertiesParams pdfPropertiesParams = PDFPropertiesParams.pdfPropertiesParamsBuilder()\n                .includePageLevelProperties()\n                .build();\n\n        // Creates a new job instance\n        PDFPropertiesJob pdfPropertiesJob = new PDFPropertiesJob(asset)\n                .setParams(pdfPropertiesParams);\n\n        // Submit the job and gets the job result\n        String location = pdfServices.submit(pdfPropertiesJob);\n        PDFServicesResponse<PDFPropertiesResult> pdfServicesResponse = pdfServices.getJobResult(location, PDFPropertiesResult.class);\n\n        PDFProperties pdfProperties = pdfServicesResponse.getResult().getPdfProperties();\n        \n        // Fetch the requisite properties of the specified PDF.\n        LOGGER.info("Size of the specified PDF file: {}", pdfProperties.getDocument().getFileSize());\n        LOGGER.info("Version of the specified PDF file: {}", pdfProperties.getDocument().getPDFVersion());\n        LOGGER.info("Page count of the specified PDF file: {}", pdfProperties.getDocument().getPageCount());\n      } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n        LOGGER.error("Exception encountered while executing operation", ex);\n      }\n    }\n  }  \n')),(0,s.mdx)("h4",{id:"net"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd PDFPropertiesAsJSONObject/\n// dotnet run GetPDFProperties.csproj\n\nnamespace GetPDFProperties\n{\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n    {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.Create(credentials);\n            PDFPropertiesOperation pdfPropertiesOperation = PDFPropertiesOperation.CreateNew();\n\n            // Provide an input FileRef for the operation\n            FileRef source = FileRef.CreateFromLocalFile(@"pdfPropertiesInput.pdf");\n            pdfPropertiesOperation.SetInput(source);\n\n            // Build PDF Properties options to include page level properties and set them into the operation\n            PDFPropertiesOptions pdfPropertiesOptions = PDFPropertiesOptions.PDFPropertiesOptionsBuilder()\n            .IncludePageLevelProperties(true)\n            .Build();\n            pdfPropertiesOperation.SetOptions(pdfPropertiesOptions);\n\n            // Execute the operation ang get properties of the PDF in PDFProperties object.\n            PDFProperties pdfProperties = pdfPropertiesOperation.Execute(executionContext);\n            Console.WriteLine("The resultant PDF Properties are: " + result.ToString());\n\n        }\n        catch (ServiceUsageException ex)\n        {\n            log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n    }\n\n        static void ConfigureLogging()\n    {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n    }\n    }\n}\n')),(0,s.mdx)("h4",{id:"node-js"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/pdfproperties/get-pdf-properties.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PDFPropertiesParams,\n    PDFPropertiesJob,\n    PDFPropertiesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./pdfPropertiesInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new PDFPropertiesParams({\n            includePageLevelProperties: true\n        });\n\n        // Creates a new job instance\n        const job = new PDFPropertiesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: PDFPropertiesResult\n        });\n\n        const pdfProperties = pdfServicesResponse.result.pdfProperties;\n\n        // Fetch the requisite properties of the specified PDF.\n        console.log(`Size of the specified PDF file: ${pdfProperties.document.fileSize}`);\n        console.log(`Version of the specified PDF file: ${pdfProperties.document.pdfVersion}`);\n        console.log(`Page count of the specified PDF file: ${pdfProperties.document.pageCount}`);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,s.mdx)("h4",{id:"python"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},'# Get the samples from https://www.github.com/adobe/pdfservices-sdk-python-samples\n# Run the sample:\n# python src/pdfproperties/get_pdf_properties.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass GetPDFProperties:\n    def __init__(self):\n        try:\n            file = open(\'pdfPropertiesInput.pdf\', \'rb\')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv(\'PDF_SERVICES_CLIENT_ID\'),\n                client_secret=os.getenv(\'PDF_SERVICES_CLIENT_SECRET\')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            pdf_properties_params = PDFPropertiesParams(include_page_level_properties=True)\n\n            # Creates a new job instance\n            pdf_properties_job = PDFPropertiesJob(input_asset=input_asset, pdf_properties_params=pdf_properties_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(pdf_properties_job)\n            pdf_services_response = pdf_services.get_job_result(location, PDFPropertiesResult)\n\n            pdf_properties_result = pdf_services_response.get_result()\n\n            # Fetch the requisite properties of the specified PDF.\n            print("Size of the specified PDF file:"\n                  + str(pdf_properties_result.get_pdf_properties_dict().get("document").get("file_size")))\n            print("Version of the specified PDF file:"\n                  + str(pdf_properties_result.get_pdf_properties_dict().get("document").get("pdf_version")))\n            print("Page count of the specified PDF file:"\n                  + str(pdf_properties_result.get_pdf_properties_dict().get("document").get("page_count")))\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f\'Exception encountered while executing operation: {e}\')\n\n\nif __name__ == \'__main__\':\n    GetPDFProperties()\n')),(0,s.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-Properties\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdfproperties' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"pageLevel\": false\n}'\n")))}P.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-pdf-properties-md-d508af6ac0ca0b94f994.js.map