"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7075],{86544:function(e,n,o){o.r(n),o.d(n,{_frontmatter:function(){return p},default:function(){return u}});var t=o(87462),r=o(45987),s=(o(15007),o(64983)),i=o(91515);const a=["components"],p={},c=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)});var l;const d={_frontmatter:p},m=i.Z;function u(e){let{components:n}=e,o=(0,r.Z)(e,a);return(0,s.mdx)(m,(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"compress-pdfs"},"Compress PDFs"),(0,s.mdx)("p",null,"Reduce the size of PDF files by compressing to smaller sizes for lower bandwidth viewing, downloading, and sharing."),(0,s.mdx)("p",null,"Support for multiple compression levels to retain the quality of images and graphics"),(0,s.mdx)("h2",{id:"rest-api"},"Rest API"),(0,s.mdx)("p",null,"See our public API Reference for ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF"},"Compress PDF")),(0,s.mdx)("h2",{id:"compress-pdfs-1"},"Compress PDFs"),(0,s.mdx)("p",null,"Compress PDFs to reduce the file size prior to performing workflow\noperations that use bandwidth or memory."),(0,s.mdx)("p",null,"Please refer the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDF\n \n   public class CompressPDF {\n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDF.class);\n  \n     public static void main(String[] args) {\n  \n         try {\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile("pdfservices-api-credentials.json")\n                     .build();\n  \n             // Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n             CompressPDFOperation compressPDFOperation = CompressPDFOperation.createNew();\n  \n             // Set operation input from a source file.\n             FileRef source = FileRef.createFromLocalFile("src/main/resources/compressPDFInput.pdf");\n             compressPDFOperation.setInput(source);\n  \n             // Execute the operation\n             FileRef result = compressPDFOperation.execute(executionContext);\n  \n             // Save the result at the specified location\n             result.saveAs("output/compressPDFOutput.pdf");\n  \n         } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n             LOGGER.error("Exception encountered while executing operation", ex);\n         }\n     }\n   }\n')),(0,s.mdx)("h4",{id:"net"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDF.csproj\n\n namespace CompressPDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                    .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                    .Build();\n\n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n               compressPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = compressPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,s.mdx)("h4",{id:"node-js"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf.js\n\n   const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n  \n   try {\n     // Initial setup, create credentials instance.\n     const credentials =  PDFServicesSdk.Credentials\n         .serviceAccountCredentialsBuilder()\n         .fromFile(\"pdfservices-api-credentials.json\")\n         .build();\n  \n     // Create an ExecutionContext using credentials and create a new operation instance.\n     const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n         compressPDF = PDFServicesSdk.CompressPDF,\n         compressPDFOperation = compressPDF.Operation.createNew();\n  \n     // Set operation input from a source file.\n     const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/compressPDFInput.pdf');\n     compressPDFOperation.setInput(input);\n  \n     // Execute the operation and Save the result to the specified location.\n     compressPDFOperation.execute(executionContext)\n         .then(result => result.saveAsFile('output/compressPDFOutput.pdf'))\n         .catch(err => {\n             if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                 || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                 console.log('Exception encountered while executing operation', err);\n             } else {\n                 console.log('Exception encountered while executing operation', err);\n             }\n         });\n   } catch (err) {\n     console.log('Exception encountered while executing operation', err);\n   }\n")),(0,s.mdx)("h4",{id:"rest-api-1"},"Rest API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-compressPDF\n")),(0,s.mdx)("h2",{id:"compress-pdfs-with-compression-level"},"Compress PDFs with Compression Level"),(0,s.mdx)("p",null,"Compress PDFs to reduce the file size on the basis of provided\ncompression level, prior to performing workflow operations that use\nbandwidth or memory. Refer to ",(0,s.mdx)("inlineCode",{parentName:"p"},"CompressionLevel")," in the API docs for a\nlist of supported compression levels."),(0,s.mdx)("p",null,"Please refer the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java-1"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDFWithOptions\n \n    public class CompressPDFWithOptions {\n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDFWithOptions.class);\n   \n      public static void main(String[] args) {\n   \n          try {\n              // Initial setup, create credentials instance.\n              Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                      .fromFile("pdfservices-api-credentials.json")\n                      .build();\n   \n              // Create an ExecutionContext using credentials and create a new operation instance.\n              ExecutionContext executionContext = ExecutionContext.create(credentials);\n              CompressPDFOperation compressPDFOperation = CompressPDFOperation.createNew();\n   \n              // Set operation input from a source file.\n              FileRef source = FileRef.createFromLocalFile("src/main/resources/compressPDFInput.pdf");\n              compressPDFOperation.setInput(source);\n   \n              // Build CompressPDF options from supported compression levels and set them into the operation\n              CompressPDFOptions compressPDFOptions = CompressPDFOptions.compressPDFOptionsBuilder()\n                      .withCompressionLevel(CompressionLevel.LOW)\n                      .build();\n              compressPDFOperation.setOptions(compressPDFOptions);\n   \n              // Execute the operation\n              FileRef result = compressPDFOperation.execute(executionContext);\n   \n              // Save the result at the specified location\n              result.saveAs("output/compressPDFWithOptionsOutput.pdf");\n   \n          } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n              LOGGER.error("Exception encountered while executing operation", ex);\n          }\n      }\n    }\n')),(0,s.mdx)("h4",{id:"net-1"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDFWithOptions.csproj\n\n  namespace CompressPDFWithOptions\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                        .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                        .Build();\n \n                // Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n                compressPDFOperation.SetInput(sourceFileRef);\n \n                // Build CompressPDF options from supported compression levels and set them into the operation\n                CompressPDFOptions compressPDFOptions = CompressPDFOptions.CompressPDFOptionsBuilder()\n                        .WithCompressionLevel(CompressionLevel.LOW)\n                        .Build();\n                compressPDFOperation.SetOptions(compressPDFOptions);\n \n                // Execute the operation.\n                FileRef result = compressPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFWithOptionsOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n  }\n')),(0,s.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf-with-options.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       compressPDF = PDFServicesSdk.CompressPDF,\n       compressPDFOperation = compressPDF.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/compressPDFInput.pdf');\n   compressPDFOperation.setInput(input);\n\n   // Provide any custom configuration options for the operation.\n   const options = new compressPDF.options.CompressPDFOptions.Builder()\n       .withCompressionLevel(PDFServicesSdk.CompressPDF.options.CompressionLevel.MEDIUM)\n       .build();\n   compressPDFOperation.setOptions(options);\n\n   // Execute the operation and Save the result to the specified location.\n   compressPDFOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/compressPDFWithOptionsOutput.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,s.mdx)("h4",{id:"rest-api-2"},"Rest API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"compressionLevel\": \"MEDIUM\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-compressPDF\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-3-2-0-pdf-services-api-howtos-compress-pdf-md-d3fd36241ab3cd93b6fc.js.map