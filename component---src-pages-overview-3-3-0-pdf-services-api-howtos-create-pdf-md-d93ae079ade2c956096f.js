"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3038],{18091:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return g}});var o=n(87462),a=n(45987),r=(n(15007),n(64983)),i=n(91515);const s=["components"],c={},p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",t)},l=p("InlineAlert"),d=p("CodeBlock"),u={_frontmatter:c},m=i.Z;function g(e){let{components:t}=e,n=(0,a.Z)(e,s);return(0,r.mdx)(m,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"create-pdf"},"Create PDF"),(0,r.mdx)("p",null,"Create PDFs from a variety of formats, including static and dynamic HTML; Microsoft Word, PowerPoint, and Excel; as well as text, image, Zip, and URL. Support for HTML to PDF, DOC to PDF, DOCX to PDF, PPT to PDF, PPTX to PDF, XLS to PDF, XLSX to PDF, TXT to PDF, RTF to PDF, BMP to PDF, JPEG to PDF, GIF to PDF, TIFF to PDF, PNG to PDF"),(0,r.mdx)("h2",{id:"rest-api"},"Rest API"),(0,r.mdx)("p",null,"See our public API Reference for :"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/document-services/docs/apis/#tag/Create-PDF"},"Create PDF from Office formats")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/document-services/docs/apis/#tag/Html-To-PDF"},"Create PDF from HTML"))),(0,r.mdx)("h2",{id:"create-a-pdf"},"Create a PDF"),(0,r.mdx)("p",null,"Use the sample below to create PDFs from Microsoft Office documents\n(Word, Excel and PowerPoint) and other ",(0,r.mdx)("a",{parentName:"p",href:"https://opensource.adobe.com/pdfservices-java-sdk-samples/apidocs/latest/com/adobe/pdfservices/operation/pdfops/CreatePDFOperation.SupportedSourceFormat.html"},"supported file\nformats"),".\nWhile the example shows .docx file conversion, the SDK supports the\nfollowing formats:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Microsoft Word (DOC, DOCX)"),(0,r.mdx)("li",{parentName:"ul"},"Microsoft PowerPoint (PPT, PPTX)"),(0,r.mdx)("li",{parentName:"ul"},"Microsoft Excel (XLS, XLSX)"),(0,r.mdx)("li",{parentName:"ul"},"Text (TXT, RTF)"),(0,r.mdx)("li",{parentName:"ul"},"Image (BMP, JPEG, GIF, TIFF, PNG)")),(0,r.mdx)(l,{slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"If a Microsoft Word/PowerPoint input file has an embedded TrueType font, the output pdf will also contain the same embedded TrueType font.\nFor more information, refer ",(0,r.mdx)("a",{parentName:"p",href:"https://support.microsoft.com/en-us/office/benefits-of-embedding-custom-fonts-cb3982aa-ea76-4323-b008-86670f222dbc#OfficeVersion=Windows"},"Benefits of embedding custom fonts"),"."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromDOCX\n\npublic class CreatePDFFromDOCX {\n\n    // Initialize the logger. \n    private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromDOCX .class);\n\n    public static void main(String[] args) {\n\n        try {\n\n            // Initial setup, create credentials instance. \n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile("pdfservices-api-credentials.json").build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n            CreatePDFOperation createPdfOperation = CreatePDFOperation.createNew();\n\n            // Set operation input from a source file. \n            FileRef source = FileRef.createFromLocalFile("src/main/resources/createPDFInput.docx");\n            createPdfOperation.setInput(source);\n\n            // Execute the operation. \n            FileRef result = createPdfOperation.execute(executionContext);\n\n            // Save the result to the specified location.\n            result.saveAs("output/createPDFFromDOCX.pdf");\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error("Exception encountered while executing\n                    operation", ex);\n        }\n    }\n}\n')),(0,r.mdx)("h4",{id:"net"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromDocx/\n// dotnet run CreatePDFFromDocx.csproj\n\nnamespace CreatePDFFromDocx\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n           Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CreatePDFOperation createPdfOperation = CreatePDFOperation.CreateNew();\n\n         // Set operation input from a source file.\n         FileRef source = FileRef.CreateFromLocalFile(@"createPdfInput.docx");\n         createPdfOperation.SetInput(source);\n\n         // Execute the operation.\n         FileRef result = createPdfOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPdfOutput.pdf");\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error("Exception encountered while executing operation", ex);\n       }\n       // Catch more errors here. . .\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n     }\n   }\n }\n')),(0,r.mdx)("h4",{id:"node-js"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/createpdf/create-pdf-from-docx.js \n\nconst PDFservicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       createPdfOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFInput.docx');\n   createPdfOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   createPdfOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/createPDFFromDOCX.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,r.mdx)("h4",{id:"rest-api-1"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Create-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/createpdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-createPDF\n")),(0,r.mdx)("h2",{id:"create-pdf-with-documentlanguage"},"Create PDF with DocumentLanguage"),(0,r.mdx)("p",null,"Use the sample below to create PDFs with supported documentLanguage from\nMicrosoft Office documents (Word, Excel and PowerPoint). The example\nshows .docx file conversion with english as the language of the input\nfile, the SDK supports the following formats:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Microsoft Word (DOC, DOCX)"),(0,r.mdx)("li",{parentName:"ul"},"Microsoft PowerPoint (PPT, PPTX)"),(0,r.mdx)("li",{parentName:"ul"},"Microsoft Excel (XLS, XLSX)"),(0,r.mdx)("li",{parentName:"ul"},"Text (TXT, RTF)")),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromDOCXWithOptions\n\npublic class CreatePDFFromDOCXWithOptions {\n\n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromDOCXWithOptions.class);\n\n      public static void main(String[] args) {\n\n        try {\n\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n              .fromFile("pdfservices-api-credentials.json")\n              .build();\n\n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.create(credentials);\n          CreatePDFOperation createPdfOperation = CreatePDFOperation.createNew();\n\n          // Set operation input from a source file.\n          FileRef source = FileRef.createFromLocalFile("src/main/resources/createPDFInput.docx");\n          createPdfOperation.setInput(source);\n\n          // Provide any custom configuration options for the operation.\n          setCustomOptions(createPdfOperation);\n\n          // Execute the operation.\n          FileRef result = createPdfOperation.execute(executionContext);\n\n          // Save the result to the specified location.\n          result.saveAs("output/createPDFFromDOCXWithOptionsOutput.pdf");\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n          LOGGER.error("Exception encountered while executing operation", ex);\n        }\n      }\n\n      private static void setCustomOptions(CreatePDFOperation createPdfOperation) {\n        // Select the documentLanguage for input file.\n        SupportedDocumentLanguage documentLanguage = SupportedDocumentLanguage.EN_US;\n\n        // Set the desired Word-to-PDF conversion options.\n        CreatePDFOptions wordOptions = CreatePDFOptions.wordOptionsBuilder().\n        withDocumentLanguage(documentLanguage).\n        build();\n\n        createPdfOperation.setOptions(wordOptions);\n   }\n }\n')),(0,r.mdx)("h4",{id:"net-1"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromDocxWithOptions/\n// dotnet run CreatePDFFromDocxWithOptions.csproj\n\nnamespace CreatePDFFromDocxWithOptions\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n         Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                 .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                 .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CreatePDFOperation createPdfOperation = CreatePDFOperation.CreateNew();\n\n         // Set operation input from a source file.\n         FileRef source = FileRef.CreateFromLocalFile(@"createPdfInput.docx");\n         createPdfOperation.SetInput(source);\n         \n         //Provide any custom conifguration option for the operation.\n         SetCustomOptions(createPdfOperation);  \n\n         // Execute the operation.\n         FileRef result = createPdfOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPDFFromDOCXWithOptionsOutput.pdf");\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error("Exception encountered while executing operation", ex);\n       }\n       // Catch more errors here. . .\n     }\n\n     private static void SetCustomOptions(CreatePDFOperation createPdfOperation)\n     {\n       // Select the documentLanguage for input file.\n       SupportedDocumentLanguage documentLanguage = SupportedDocumentLanguage.EN_US;\n\n       // Set the desired Word-to-PDF conversion options.\n       CreatePDFOptions createPDFOptions = CreatePDFOptions.WordOptionsBuilder()\n       .WithDocumentLanguage(documentLanguage)\n       .Build();\n       createPdfOperation.SetOptions(createPDFOptions);\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n     }\n   }\n }\n')),(0,r.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/createpdf/create-pdf-from-docx-with-options.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\nconst setCustomOptions = (createPdfOperation) => {\n    // Select the documentLanguage for input file.\n    const documentLanguage = PDFServicesSdk.CreatePDF.options.word.SupportedDocumentLanguage.EN_US;\n\n    // Set the desired WORD-to-PDF conversion options with documentLanguage.\n    const createPdfOptions = new PDFServicesSdk.CreatePDF.options.word.CreatePDFFromWordOptions.Builder()\n        .withDocumentLanguage(documentLanguage).build();\n    createPdfOperation.setOptions(createPdfOptions);\n};\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        createPdfOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n    // Set operation input from a source file.\n        const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFInput.docx');\n    createPdfOperation.setInput(input);\n\n    // Provide any custom configuration options for the operation.\n    setCustomOptions(createPdfOperation);\n\n    // Execute the operation and Save the result to the specified location.\n    createPdfOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/createPDFFromDOCXWithOptionsOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n")),(0,r.mdx)("h4",{id:"rest-api-2"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Create-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/createpdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"documentLanguage\": \"en-US\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-createPDF\n")),(0,r.mdx)("h2",{id:"create-a-pdf-from-static-html"},"Create a PDF from static HTML"),(0,r.mdx)("p",null,"The sample below creates a PDF file from a static HTML file. The file\nmust be local. Since HTML/web pages typically contain external assets,\nthe input file must be a zip file containing an index.html at the top\nlevel of the archive as well as any dependencies such as images, css\nfiles, and so on."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromStaticHTML\n\npublic class CreatePDFFromStaticHTML {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromStaticHTML.class);\n\n   public static void main(String[] args) {\n\n     try {\n\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile("pdfservices-api-credentials.json")\n           .build();\n\n       //Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.createNew();\n\n       // Set operation input from a source file.\n       FileRef source = FileRef.createFromLocalFile("src/main/resources/createPDFFromStaticHtmlInput.zip");\n       htmlToPDFOperation.setInput(source);\n\n       // Provide any custom configuration options for the operation.\n       setCustomOptions(htmlToPDFOperation);\n\n       // Execute the operation.\n       FileRef result = htmlToPDFOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       result.saveAs("output/createPDFFromStaticHtmlOutput.pdf");\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error("Exception encountered while executing operation", ex);\n     }\n   }\n\n   private static void setCustomOptions(CreatePDFOperation htmlToPDFOperation) {\n     // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n     PageLayout pageLayout = new PageLayout();\n     pageLayout.setPageSize(8, 11.5);\n\n     // Set the desired HTML-to-PDF conversion options.\n     CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.htmlOptionsBuilder()\n         .includeHeaderFooter(true)\n         .withPageLayout(pageLayout)\n         .build();\n     htmlToPDFOperation.setOptions(htmlToPdfOptions);\n   }\n }\n')),(0,r.mdx)("h4",{id:"net-2"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromStaticHtml/\n// dotnet run CreatePDFFromStaticHtml.csproj\n\nnamespace CreatePDFFromStaticHtml\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n         Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                 .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                 .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.CreateNew();\n\n         // Set operation input from a source file.\n         FileRef source = FileRef.CreateFromLocalFile(@"createPDFFromStaticHtmlInput.zip");\n         htmlToPDFOperation.SetInput(source);\n\n         // Provide any custom configuration options for the operation.\n         SetCustomOptions(htmlToPDFOperation);\n\n         // Execute the operation.\n         FileRef result = htmlToPDFOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPdfFromStaticHtmlOutput.pdf");\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error("Exception encountered while executing operation", ex);\n       }\n        // Catch more errors here. . .\n     }\n\n     private static void SetCustomOptions(CreatePDFOperation htmlToPDFOperation)\n     {\n       // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n       PageLayout pageLayout = new PageLayout();\n       pageLayout.SetPageSize(8, 11.5);\n\n       // Set the desired HTML-to-PDF conversion options.\n       CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.HtmlOptionsBuilder()\n           .IncludeHeaderFooter(true)\n           .WithPageLayout(pageLayout)\n           . Build();\n       htmlToPDFOperation.SetOptions(htmlToPdfOptions);\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n     }\n   }\n }\n')),(0,r.mdx)("h4",{id:"node-js-2"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/createpdf/create-pdf-from-static-html.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n const setCustomOptions = (htmlToPDFOperation) => {\n   // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n   const pageLayout = new PDFServicesSdk.CreatePDF.options.PageLayout();\n   pageLayout.setPageSize(8, 11.5);\n\n   // Set the desired HTML-to-PDF conversion options.\n   const htmlToPdfOptions = new PDFServicesSdk.CreatePDF.options.html.CreatePDFFromHtmlOptions.Builder()\n     .includesHeaderFooter(true)\n     .withPageLayout(pageLayout)\n     .build();\n   htmlToPDFOperation.setOptions(htmlToPdfOptions);\n };\n\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n     .serviceAccountCredentialsBuilder()\n     .fromFile(\"pdfservices-api-credentials.json\")\n     .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n     htmlToPDFOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFFromStaticHtmlInput.zip');\n   htmlToPDFOperation.setInput(input);\n\n   // Provide any custom configuration options for the operation.\n   setCustomOptions(htmlToPDFOperation);\n\n   // Execute the operation and Save the result to the specified location.\n   htmlToPDFOperation.execute(executionContext)\n     .then(result => result.saveAsFile('output/createPdfFromStaticHtmlOutput.pdf'))\n     .catch(err => {\n       if(err instanceof PDFServicesSdk.Error.ServiceApiError\n         || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n         console.log('Exception encountered while executing operation', err);\n       } else {\n         console.log('Exception encountered while executing operation', err);\n       }\n     });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,r.mdx)("h4",{id:"rest-api-3"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Html-To-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/htmltopdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "json": "{}",\n    "includeHeaderFooter": true,\n    "pageLayout": {\n        "pageWidth": 11,\n        "pageHeight": 8.5\n    }\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-htmlToPDF\n')),(0,r.mdx)("h2",{id:"create-a-pdf-from-static-html-with-inline-css"},"Create a PDF from static HTML with inline CSS"),(0,r.mdx)("p",null,"The sample below creates a PDF file from a static HTML file with inline CSS. The file must be local."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromHTMLWithInlineCSS\n\n   public class CreatePDFFromHTMLWithInlineCSS {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromStaticHTML.class);\n\n    public static void main(String[] args) {\n\n      try {\n\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile("pdfservices-api-credentials.json")\n            .build();\n\n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.createNew();\n\n        // Set operation input from a source file.\n        FileRef source = FileRef.createFromLocalFile("src/main/resources/createPDFFromHTMLWithInlineCSSInput.html");\n        htmlToPDFOperation.setInput(source);\n\n        // Provide any custom configuration options for the operation.\n        setCustomOptions(htmlToPDFOperation);\n\n        // Execute the operation.\n        FileRef result = htmlToPDFOperation.execute(executionContext);\n\n        // Save the result to the specified location.\n        result.saveAs("output/createPDFFromHTMLWithInlineCSSOutput.pdf");\n\n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error("Exception encountered while executing operation", ex);\n      }\n    }\n\n    private static void setCustomOptions(CreatePDFOperation htmlToPDFOperation) {\n      // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n      PageLayout pageLayout = new PageLayout();\n      pageLayout.setPageSize(20, 25);\n\n      // Set the desired HTML-to-PDF conversion options.\n      CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.htmlOptionsBuilder()\n          .includeHeaderFooter(true)\n          .withPageLayout(pageLayout)\n          .build();\n      htmlToPDFOperation.setOptions(htmlToPdfOptions);\n    }\n  }\n')),(0,r.mdx)("h4",{id:"net-3"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromHTMLWithInlineCSS/\n// dotnet run CreatePDFFromHTMLWithInlineCSS.csproj\n\nnamespace CreatePDFFromHTMLWithInlineCSS\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                  .Build();\n\n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.CreateNew();\n\n          // Set operation input from a source file.\n          FileRef source = FileRef.CreateFromLocalFile(@"createPDFFromHTMLWithInlineCSSInput.html");\n          htmlToPDFOperation.SetInput(source);\n\n          // Provide any custom configuration options for the operation.\n          SetCustomOptions(htmlToPDFOperation);\n\n          // Execute the operation.\n          FileRef result = htmlToPDFOperation.Execute(executionContext);\n\n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPDFFromHTMLWithInlineCSSOutput.pdf");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error("Exception encountered while executing operation", ex);\n        }\n         // Catch more errors here. . .\n      }\n\n      private static void SetCustomOptions(CreatePDFOperation htmlToPDFOperation)\n      {\n        // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n        PageLayout pageLayout = new PageLayout();\n        pageLayout.SetPageSize(20, 25);\n\n        // Set the desired HTML-to-PDF conversion options.\n        CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.HtmlOptionsBuilder()\n            .IncludeHeaderFooter(true)\n            .WithPageLayout(pageLayout)\n            . Build();\n        htmlToPDFOperation.SetOptions(htmlToPdfOptions);\n      }\n\n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n      }\n    }\n  }\n')),(0,r.mdx)("h4",{id:"node-js-3"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/create-pdf-from-html-with-inline-css.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\nconst setCustomOptions = (htmlToPDFOperation) => {\n    // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n    const pageLayout = new PDFServicesSdk.CreatePDF.options.PageLayout();\n    pageLayout.setPageSize(20, 25);\n\n    // Set the desired HTML-to-PDF conversion options.\n    const htmlToPdfOptions = new PDFServicesSdk.CreatePDF.options.html.CreatePDFFromHtmlOptions.Builder()\n        .includesHeaderFooter(true)\n        .withPageLayout(pageLayout)\n        .build();\n    htmlToPDFOperation.setOptions(htmlToPdfOptions);\n};\n\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        htmlToPDFOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFFromHTMLWithInlineCSSInput.html');\n    htmlToPDFOperation.setInput(input);\n\n    // Provide any custom configuration options for the operation.\n    setCustomOptions(htmlToPDFOperation);\n\n    // Execute the operation and Save the result to the specified location.\n    htmlToPDFOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/createPDFFromHTMLWithInlineCSSOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n")),(0,r.mdx)("h4",{id:"rest-api-4"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Html-To-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/htmltopdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "json": "{}",\n    "includeHeaderFooter": true,\n    "pageLayout": {\n        "pageWidth": 11,\n        "pageHeight": 8.5\n    }\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-htmlToPDF\n')),(0,r.mdx)("h2",{id:"create-a-pdf-file-from-html-specified-via-url"},"Create a PDF File From HTML specified via URL"),(0,r.mdx)("p",null,"The sample below creates a PDF file from a HTML file specified via URL."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromURL\n\n  public class CreatePDFFromURL {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromStaticHTML.class);\n\n    public static void main(String[] args) {\n\n      try {\n\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile("pdfservices-api-credentials.json")\n            .build();\n\n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.createNew();\n\n        // Set operation input from a source URL.\n        FileRef source = FileRef.createFromURL(new URL("https://www.adobe.io"));\n        htmlToPDFOperation.setInput(source);\n\n        // Provide any custom configuration options for the operation.\n        setCustomOptions(htmlToPDFOperation);\n\n        // Execute the operation.\n        FileRef result = htmlToPDFOperation.execute(executionContext);\n\n        // Save the result to the specified location.\n        result.saveAs("output/createPDFFromURLOutput.pdf");\n\n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error("Exception encountered while executing operation", ex);\n      }\n    }\n\n    private static void setCustomOptions(CreatePDFOperation htmlToPDFOperation) {\n      // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n      PageLayout pageLayout = new PageLayout();\n      pageLayout.setPageSize(20, 25);\n\n      // Set the desired HTML-to-PDF conversion options.\n      CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.htmlOptionsBuilder()\n          .includeHeaderFooter(true)\n          .withPageLayout(pageLayout)\n          .build();\n      htmlToPDFOperation.setOptions(htmlToPdfOptions);\n    }\n  }\n')),(0,r.mdx)("h4",{id:"net-4"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromURL/\n// dotnet run CreatePDFFromURL.csproj\n\nnamespace CreatePDFFromURL\n{\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n    {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n            .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n            .Build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.Create(credentials);\n            CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.CreateNew();\n\n            // Set operation input from a source URL.\n            FileRef source = FileRef.CreateFromURI(new Uri("https://www.adobe.io"));\n            htmlToPDFOperation.SetInput(source);\n\n            // Provide any custom configuration options for the operation.\n            SetCustomOptions(htmlToPDFOperation);\n\n            // Execute the operation.\n            FileRef result = htmlToPDFOperation.Execute(executionContext);\n\n            // Save the result to the specified location.\n            result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPdfFromURLOutput.pdf");\n        }\n        catch (ServiceUsageException ex)\n        {\n            log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n    }\n\n        private static void SetCustomOptions(CreatePDFOperation htmlToPDFOperation)\n    {\n        // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n        PageLayout pageLayout = new PageLayout();\n        pageLayout.SetPageSize(20, 25);\n\n        // Set the desired HTML-to-PDF conversion options.\n        CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.HtmlOptionsBuilder()\n        .IncludeHeaderFooter(true)\n        .WithPageLayout(pageLayout)\n        . Build();\n        htmlToPDFOperation.SetOptions(htmlToPdfOptions);\n    }\n\n    static void ConfigureLogging()\n    {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n    }\n}\n}\n')),(0,r.mdx)("h4",{id:"node-js-4"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/create-pdf-from-url.js\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\nconst setCustomOptions = (htmlToPDFOperation) => {\n    // Define the page layout, in this case an 20 x 25 inch page (effectively portrait orientation).\n    const pageLayout = new PDFServicesSdk.CreatePDF.options.PageLayout();\n    pageLayout.setPageSize(20, 25);\n\n    // Set the desired HTML-to-PDF conversion options.\n    const htmlToPdfOptions = new PDFServicesSdk.CreatePDF.options.html.CreatePDFFromHtmlOptions.Builder()\n        .includesHeaderFooter(true)\n        .withPageLayout(pageLayout)\n        .build();\n    htmlToPDFOperation.setOptions(htmlToPdfOptions);\n};\n\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        htmlToPDFOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromURL(\n        \"https://www.adobe.io\"\n    );\n    htmlToPDFOperation.setInput(input);\n\n    // Provide any custom configuration options for the operation.\n    setCustomOptions(htmlToPDFOperation);\n\n    // Execute the operation and Save the result to the specified location.\n    htmlToPDFOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/createPdfFromURLOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n")),(0,r.mdx)("h4",{id:"rest-api-5"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Html-To-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/htmltopdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "inputUrl": "https://developer.adobe.com/document-services/homepage",\n    "json": "{}",\n    "includeHeaderFooter": true,\n    "pageLayout": {\n        "pageWidth": 11,\n        "pageHeight": 8.5\n    }\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-htmlToPDF\n')),(0,r.mdx)("h2",{id:"create-a-pdf-from-dynamic-html"},"Create a PDF from dynamic HTML"),(0,r.mdx)("p",null,"To support workflows with dynamic data, ",(0,r.mdx)("inlineCode",{parentName:"p"},"CreatePDFFromDynamicHTML"),"\ncreates PDFs from dynamic HTML. It's a common scenario for enterprise to\nprovide end users with an HTML template with form fields. This API\nallows you to capture the users unique data entries and then save it as\nPDF. Collected data is stored in a JSON file, and the source HTML file\nmust include ",(0,r.mdx)("inlineCode",{parentName:"p"},"<script src='./json.js' type='text/javascript'><\/script>"),".\nRefer to the API docs for usage."),(0,r.mdx)("p",null,"The sample ",(0,r.mdx)("inlineCode",{parentName:"p"},"CreatePDFFromDynamicHTML")," converts a zip file, containing\nthe input HTML file and its resources, along with the input data to a\nPDF file. The input data is used by the JavaScript in the HTML file to\nmanipulate the HTML DOM, thus effectively updating the source HTML file.\nThis mechanism can be used to provide data to the template HTML\ndynamically prior to PDF conversion."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java-5"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.createpdf.CreatePDFFromDynamicHTML\n public class CreatePDFFromDynamicHTML {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDFFromDynamicHTML.class);\n\n   public static void main(String[] args) {\n\n     try {\n\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile("pdfservices-api-credentials.json")\n           .build();\n\n       //Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.createNew();\n\n       // Set operation input from a source file.\n       FileRef source = FileRef.createFromLocalFile("src/main/resources/createPDFFromDynamicHtmlInput.zip");\n       htmlToPDFOperation.setInput(source);\n\n       // Provide any custom configuration options for the operation.\n       setCustomOptions(htmlToPDFOperation);\n\n       // Execute the operation.\n       FileRef result = htmlToPDFOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       result.saveAs("output/createPDFFromDynamicHtmlOutput.pdf");\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error("Exception encountered while executing operation", ex);\n     }\n   }\n\n   private static void setCustomOptions(CreatePDFOperation htmlToPDFOperation) {\n     // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n     PageLayout pageLayout = new PageLayout();\n     pageLayout.setPageSize(8, 11.5);\n\n     //Set the dataToMerge field that needs to be populated in the HTML before its conversion\n     JSONObject dataToMerge = new JSONObject();\n     dataToMerge.put("title","Create, Convert PDFs and More!");\n     dataToMerge.put("sub_title","Easily integrate PDF actions within your document workflows.");\n\n     // Set the desired HTML-to-PDF conversion options.\n     CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.htmlOptionsBuilder()\n         .includeHeaderFooter(true)\n         .withPageLayout(pageLayout)\n         .withDataToMerge(dataToMerge)\n         .build();\n     htmlToPDFOperation.setOptions(htmlToPdfOptions);\n   }\n }\n')),(0,r.mdx)("h4",{id:"net-5"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CreatePDFFromDynamicHtml/\n// dotnet run CreatePDFFromDynamicHtml.csproj\n\n namespace CreatePDFFromDynamicHtml\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n         Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                 .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                 .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CreatePDFOperation htmlToPDFOperation = CreatePDFOperation.CreateNew();\n\n         // Set operation input from a source file.\n         FileRef source = FileRef.CreateFromLocalFile(@"createPDFFromDynamicHtmlInput.zip");\n         htmlToPDFOperation.SetInput(source);\n\n         // Provide any custom configuration options for the operation.\n         SetCustomOptions(htmlToPDFOperation);\n\n         // Execute the operation.\n         FileRef result = htmlToPDFOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + "/output/createPdfFromDynamicHtmlOutput.pdf");\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error("Exception encountered while executing operation", ex);\n       }\n       // errors continued. . .\n     }\n\n     private static void SetCustomOptions(CreatePDFOperation htmlToPDFOperation)\n     {\n       // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n       PageLayout pageLayout = new PageLayout();\n       pageLayout.SetPageSize(8, 11.5);\n\n       //Set the dataToMerge field that needs to be populated in the HTML before its conversion\n       JObject dataToMerge = new JObject\n       {\n         { "title", "Create, Convert PDFs and More!" },\n         { "sub_title", "Easily integrate PDF actions within your document workflows." }\n       };\n\n       // Set the desired HTML-to-PDF conversion options.\n       CreatePDFOptions htmlToPdfOptions = CreatePDFOptions.HtmlOptionsBuilder()\n           .IncludeHeaderFooter(true)\n           .WithPageLayout(pageLayout)\n           .WithDataToMerge(dataToMerge)\n           .Build();\n       htmlToPDFOperation.SetOptions(htmlToPdfOptions);\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n     }\n   }\n }\n')),(0,r.mdx)("h4",{id:"node-js-5"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/createpdf/create-pdf-from-dynamic-html.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n const setCustomOptions = (htmlToPDFOperation) => {\n   // Define the page layout, in this case an 8 x 11.5 inch page (effectively portrait orientation).\n   const pageLayout = new PDFServicesSdk.CreatePDF.options.PageLayout();\n   pageLayout.setPageSize(8, 11.5);\n   //Set the dataToMerge field that needs to be populated in the HTML before its conversion.\n   const dataToMerge = {\n       \"title\":\"Create, Convert PDFs and More!\",\n       \"sub_title\": \"Easily integrate PDF actions within your document workflows.\"\n   };\n   // Set the desired HTML-to-PDF conversion options.\n   const htmlToPdfOptions = new PDFServicesSdk.CreatePDF.options.html.CreatePDFFromHtmlOptions.Builder()\n       .includesHeaderFooter(true)\n       .withPageLayout(pageLayout)\n       .withDataToMerge(dataToMerge)\n       .build();\n   htmlToPDFOperation.setOptions(htmlToPdfOptions);\n };\n\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       htmlToPDFOperation = PDFServicesSdk.CreatePDF.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/createPDFFromDynamicHtmlInput.zip');\n   htmlToPDFOperation.setInput(input);\n\n   // Provide any custom configuration options for the operation.\n   setCustomOptions(htmlToPDFOperation);\n\n   // Execute the operation and Save the result to the specified location.\n   htmlToPDFOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/createPdfFromDynamicHtmlOutput.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,r.mdx)("h4",{id:"rest-api-6"},"Rest API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Html-To-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/htmltopdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "json": "{}",\n    "includeHeaderFooter": true,\n    "pageLayout": {\n        "pageWidth": 11,\n        "pageHeight": 8.5\n    }\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-htmlToPDF\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-3-3-0-pdf-services-api-howtos-create-pdf-md-d93ae079ade2c956096f.js.map