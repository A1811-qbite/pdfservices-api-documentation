{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-insert-pages-md-17a7658ea4d38a9276ec.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIU,YAJF,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,gBAAc,iBAEtBA,EAAAA,EAAAA,KAAA,gEACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,YAAU,aAElBA,EAAAA,EAAAA,KAAA,8CAAwCA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClD,KAAQ,kCAAgC,kBAE5CX,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,sGAEAA,EAAAA,EAAAA,KAAA,8BAAwBA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClC,KAAQ,mBAAiB,mBACD,wCAC5BX,EAAAA,EAAAA,KAACL,EAAS,CAACiB,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,wCAAwCJ,QAAQ,eACtGV,EAAAA,EAAAA,KAAA,MACE,GAAM,QAAM,SAEdA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,yvHAsEtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,OAAK,SAEbA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,g0GAiFtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,8kHAiGtCX,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,mBAAiB,+yHAsFlCX,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,aAEpBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,uBAAqB,i0CAgD1C,CAEAP,EAAWW,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/insert-pages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"insert-pages\"\n    }}>{`Insert Pages`}</h1>\n    <p>{`Insert one or more pages into an existing document`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`REST API`}</h2>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../apis/#tag/Combine-PDF\"\n      }}>{`Insert Pages`}</a></p>\n    <h2 {...{\n      \"id\": \"insert-pages-in-pdf\"\n    }}>{`Insert Pages in PDF`}</h2>\n    <p>{`The insert operation inserts additional pages from different PDFs into\nan existing PDF.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.insertpages.InsertPDFPages\n \n    public class InsertPDFPages {\n  \n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(InsertPDFPages.class);\n  \n     public static void main(String[] args) {\n         try (InputStream baseInputStream = Files.newInputStream(new File(\"src/main/resources/baseInput.pdf\").toPath());\n              InputStream firstInputStreamToInsert = Files.newInputStream(new File(\"src/main/resources/firstFileToInsertInput.pdf\").toPath());\n              InputStream secondInputStreamToInsert = Files.newInputStream(new File(\"src/main/resources/secondFileToInsertInput.pdf\").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                    System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset baseAsset = pdfServices.upload(baseInputStream, PDFServicesMediaType.PDF.getMediaType());\n            Asset firstAssetToInsert = pdfServices.upload(firstInputStreamToInsert, PDFServicesMediaType.PDF.getMediaType());\n            Asset secondAssetToInsert = pdfServices.upload(secondInputStreamToInsert, PDFServicesMediaType.PDF.getMediaType());\n\n            PageRanges pageRanges = getPageRangeForFirstFile();\n\n            // Create parameters for the job\n            InsertPagesParams insertPagesParams = InsertPagesParams.insertPagesParamsBuilder(baseAsset)\n                    .addPagesToInsertAt(firstAssetToInsert, pageRanges, 2) // Add the first asset as input to the params, along with its page ranges and base page\n                    .addPagesToInsertAt(secondAssetToInsert, 3) // Add the seccond asset as input to the params, along with base page\n                    .build();\n\n            // Creates a new job instance\n            InsertPagesPDFJob insertPagesJob = new InsertPagesPDFJob(insertPagesParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(insertPagesJob);\n            PDFServicesResponse<InsertPagesResult> pdfServicesResponse = pdfServices.getJobResult(location, InsertPagesResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset's content to it\n            Files.createDirectories(Paths.get(\"output/\"));\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/insertPagesOutput.pdf\").toPath());\n            LOGGER.info(\"Saving asset at output/insertPagesOutput.pdf\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n         } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n             LOGGER.error(\"Exception encountered while executing operation\", e);\n         }\n     }\n  \n     private static PageRanges getPageRangeForFirstFile() {\n         // Specify which pages of the first file are to be inserted in the base file\n         PageRanges pageRanges = new PageRanges();\n         // Add pages 1 to 3\n         pageRanges.addRange(1, 3);\n  \n         // Add page 4.\n         pageRanges.addSinglePage(4);\n  \n         return pageRanges;\n     }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd InsertPDFPages/\n// dotnet run InsertPDFPages.csproj\n\n  namespace InsertPDFPages\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            // Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                InsertPagesOperation insertPagesOperation = InsertPagesOperation.CreateNew();\n \n                // Set operation base input from a source file.\n                FileRef baseSourceFile = FileRef.CreateFromLocalFile(@\"baseInput.pdf\");\n                insertPagesOperation.SetBaseInput(baseSourceFile);\n \n                // Create a FileRef instance using a local file.\n                FileRef firstFileToInsert = FileRef.CreateFromLocalFile(@\"firstFileToInsertInput.pdf\");\n                PageRanges pageRanges = GetPageRangeForFirstFile();\n \n                // Adds the pages (specified by the page ranges) of the input PDF file to be inserted at\n                // the specified page of the base PDF file.\n                insertPagesOperation.AddPagesToInsertAt(firstFileToInsert, pageRanges, 2);\n \n                // Create a FileRef instance using a local file.\n                FileRef secondFileToInsert = FileRef.CreateFromLocalFile(@\"secondFileToInsertInput.pdf\");\n \n                // Adds all the pages of the input PDF file to be inserted at the specified page of the\n                // base PDF file.\n                insertPagesOperation.AddPagesToInsertAt(secondFileToInsert, 3);\n \n                // Execute the operation.\n                FileRef result = insertPagesOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + \"/output/insertPagesOutput.pdf\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            // Catch more errors here . . .\n        }\n \n        private static PageRanges GetPageRangeForFirstFile()\n        {\n            // Specify which pages of the first file are to be inserted in the base file.\n            PageRanges pageRanges = new PageRanges();\n            // Add pages 1 to 3.\n            pageRanges.AddRange(1, 3);\n \n            // Add page 4.\n            pageRanges.AddSinglePage(4);\n \n            return pageRanges;\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/insertpages/insert-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PageRanges,\n    InsertPagesParams,\n    InsertPagesJob,\n    InsertPagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let baseReadStream;\n    let firstReadStreamToInsert;\n    let secondReadStreamToInsert;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        baseReadStream = fs.createReadStream(\"./baseInput.pdf\");\n        firstReadStreamToInsert = fs.createReadStream(\"./firstFileToInsertInput.pdf\");\n        secondReadStreamToInsert = fs.createReadStream(\"./secondFileToInsertInput.pdf\");\n        const [baseAsset, firstAssetToInsert, secondAssetToInsert] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: baseReadStream,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: firstReadStreamToInsert,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: secondReadStreamToInsert,\n                mimeType: MimeType.PDF\n            }]\n        });\n\n        // Create parameters for the job\n        const params = new InsertPagesParams(baseAsset)\n            // Add the first asset as input to the params, along with its page ranges and base page\n            .addPagesToInsertAt({\n                inputAsset: firstAssetToInsert,\n                pageRanges: getPageRangesForFirstFile(),\n                basePage: 2\n            })\n            // Add the second asset as input to the params, along with base page\n            .addPagesToInsertAt({\n                inputAsset: secondAssetToInsert,\n                basePage: 3\n            });\n\n        // Create a new job instance\n        const job = new InsertPagesJob({params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: InsertPagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy result asset's content to it\n        const outputFilePath = \"./insertPagesOutput.pdf\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        baseReadStream?.destroy();\n        firstReadStreamToInsert?.destroy();\n        secondReadStreamToInsert?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/insertpages/insert_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass InsertPDFPages:\n    def __init__(self):\n        try:\n            base_file = open('baseInput.pdf', 'rb')\n            base_input_stream = base_file.read()\n            base_file.close()\n\n            first_file_to_insert = open('firstFileToInsertInput.pdf', 'rb')\n            first_input_stream_to_insert = first_file_to_insert.read()\n            first_file_to_insert.close()\n\n            second_file_to_insert = open('secondFileToInsertInput.pdf', 'rb')\n            second_input_stream_to_insert = second_file_to_insert.read()\n            second_file_to_insert.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            base_asset = pdf_services.upload(input_stream=base_input_stream,\n                                             mime_type=PDFServicesMediaType.PDF)\n            first_asset_to_insert = pdf_services.upload(input_stream=first_input_stream_to_insert,\n                                                        mime_type=PDFServicesMediaType.PDF)\n            second_asset_to_insert = pdf_services.upload(input_stream=second_input_stream_to_insert,\n                                                         mime_type=PDFServicesMediaType.PDF)\n\n            page_ranges = self.get_page_range_for_first_file()\n\n            # Create parameters for the job\n            insert_pages_params = InsertPagesParams(base_asset=base_asset)\n\n            # Add the first asset as input to the params, along with its page ranges and base page\n            insert_pages_params.add_pages_to_insert(input_asset=first_asset_to_insert, page_ranges=page_ranges, base_page=2)\n\n            # Add the second asset as input to the params, along with base page\n            insert_pages_params.add_pages_to_insert(input_asset=second_asset_to_insert, base_page=3)\n\n            # Creates a new job instance\n            insert_pages_job = InsertPagesJob(insert_pages_params=insert_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(insert_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, InsertPagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = \"insertpagesOutput.pdf\"\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_page_range_for_first_file() -> PageRanges:\n        # Specify which pages of the first file are to be included in the combined file\n        page_ranges_for_first_file = PageRanges()\n        # Add pages 1 to 3\n        page_ranges_for_first_file.add_range(1, 3)\n        # Add single page 1\n        page_ranges_for_first_file.add_single_page(1)\n        return page_ranges_for_first_file\n\n\nif __name__ == \"__main__\":\n    InsertPDFPages()\n\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Combine-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/combinepdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assets\": [\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n            \"pageRanges\": [\n                {\n                    \"start\": 1,\n                    \"end\": 1\n                }\n            ]\n        },\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n            \"pageRanges\": [\n                {\n                    \"start\": 4\n                }\n            ]\n        },\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n            \"pageRanges\": [\n                {\n                    \"start\": 1\n                }\n            ]\n        },\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n            \"pageRanges\": [\n                {\n                    \"start\": 2\n                }\n            ]\n        }\n    ]\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}