{"version":3,"file":"component---src-pages-overview-pdf-accessibility-auto-tag-api-howtos-rest-md-b84c8822a13b08f17390.js","mappings":"4OAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,aADR,cAGA,uDAAwC,cAAGC,WAAW,IAClD,KAAQ,+BAD4B,kCAAxC,MAGA,eACE,GAAM,+GADR,iHAGA,mJACA,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,mBADY,mBAAxB,wCAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,yBAAyBJ,QAAQ,eACvF,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,49DA+CL,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBADZ,q/DAkDL,eACE,GAAM,YADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,+hBAiBR,CAEDH,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-accessibility-auto-tag-api/howtos/rest.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rest-apis\"\n    }}>{`REST APIs`}</h1>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../apis/#tag/Auto-Tag\"\n      }}>{`PDF Accessibility Auto-Tag API`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-with-version-17-along-with-an-xlsx-report-and-shift-the-headings-in-the-output-pdf-file\"\n    }}>{`Generate tagged PDF with version 1.7 along with an XLSX report and shift the headings in the output PDF file`}</h2>\n    <p>{`The sample below generate tagged PDF of version 1.7 along with an XLSX report and shift the headings in the output PDF file.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, Python, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://git.corp.adobe.com/dc/dc-cpf-sdk-java-samples/tree/beta\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithOptions \n\npublic class AutotagPDFWithOptions {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithOptions.class);\n\n    public static void main(String[] args) {\n\n        try {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n            AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n            // Provide an input FileRef for the operation\n            autotagPDFOperation.setInput(FileRef.createFromLocalFile(\"src/main/resources/autotagPdfInput.pdf\"));\n\n            // Build AutotagPDF options and set them into the operation\n            AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .shiftHeadings()\n                    .generateReport()\n                    .build();\n            autotagPDFOperation.setOptions(autotagPDFOptions);\n\n            // Execute the operation\n            AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n            // Save the output files at the specified location\n            autotagOutputFiles.saveTaggedPDF(\"output/AutotagPDFWithOptions-tagged.pdf\");\n            autotagOutputFiles.saveReport(\"output/AutotagPDFWithOptions-report.xlsx\");\n\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples from https://git.corp.adobe.com/dc/dc-cpf-python-sdk-samples/tree/beta\n# Run the sample:\n# python src/autotagpdf/autotag_pdf_with_options.py\n\nlogging.basicConfig(level=os.environ.get('LOGLEVEL', 'INFO'))\n\ntry:\n    # get base path.\n    base_path = str(Path(__file__).parents[2])\n\n    # Initial setup, create credentials instance.\n    credentials = Credentials.service_account_credentials_builder() \\\\\n        .from_file(base_path + '/pdfservices-api-credentials.json') \\\\\n        .build()\n\n    # Create an ExecutionContext using credentials and create a new operation instance.\n    execution_context = ExecutionContext.create(credentials)\n    autotag_pdf_operation = AutotagPDFOperation.create_new()\n\n    # Set operation input from a source file.\n    input_file_path = 'autotagPdfInput.pdf'\n    source = FileRef.create_from_local_file(base_path + '/resources/' + input_file_path)\n    autotag_pdf_operation.set_input(source)\n\n    # Build AutotagPDF options and set them into the operation\n    autotag_pdf_options: AutotagPDFOptions = AutotagPDFOptions.builder()\\\\\n        .with_shift_headings()\\\\\n        .with_generate_report()\\\\\n        .build()\n    autotag_pdf_operation.set_options(autotag_pdf_options)\n\n    # Execute the operation.\n    autotag_output_files: AutotagPDFOutputFiles = autotag_pdf_operation.execute(execution_context)\n\n    input_file_name = Path(input_file_path).stem\n    base_output_path = base_path + '/output/AutotagPDFWithOptions/'\n\n    Path(base_output_path).mkdir(parents=True, exist_ok=True)\n    tagged_pdf_path = f'{base_output_path}{input_file_name}-tagged.pdf'\n    report_path = f'{base_output_path}{input_file_name}-report.xlsx'\n\n    # Save the result to the specified location.\n    autotag_output_files.save_pdf_file(tagged_pdf_path)\n    autotag_output_files.save_xls_file(report_path)\n\nexcept (ServiceApiException, ServiceUsageException, SdkException) as e:\n    logging.exception(f'Exception encountered while executing operation: {e}')\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Auto-Tag\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/autotag' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"shiftHeadings\": true,\n    \"generateReport\": true\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}