"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[452],{9871:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return u}});var o=n(87462),r=n(45987),s=(n(15007),n(64983)),a=n(91515);const i=["components"],c={},p=(m="CodeBlock",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)});var m;const l={_frontmatter:c},d=a.Z;function u(e){let{components:t}=e,n=(0,r.Z)(e,i);return(0,s.mdx)(d,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"remove-protection"},"Remove Protection"),(0,s.mdx)("p",null,"Remove password security from a PDF document. This can only be accomplished with the owner password of the document which must be passed in the operation."),(0,s.mdx)("h2",{id:"rest-api"},"REST API"),(0,s.mdx)("p",null,"See our public API Reference for ",(0,s.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Remove-Protection"},"Remove Protection")),(0,s.mdx)("h2",{id:"remove-security-from-pdfs"},"Remove security from PDFs"),(0,s.mdx)("p",null,"Use the below sample to remove security from a PDF document."),(0,s.mdx)("p",null,"Please refer the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(p,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.removeprotection.RemoveProtection\n \n  public class RemoveProtection {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(RemoveProtection.class);\n \n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/removeProtectionInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Create parameters for the job\n            RemoveProtectionParams removeProtectionParams = new RemoveProtectionParams("password");\n\n            // Creates a new job instance\n            RemoveProtectionJob removeProtectionJob = new RemoveProtectionJob(asset, removeProtectionParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(removeProtectionJob);\n            PDFServicesResponse<RemoveProtectionResult> pdfServicesResponse = pdfServices.getJobResult(location, RemoveProtectionResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/removeProtectionOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/removeProtectionOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n            LOGGER.error("Exception encountered while executing operation", e);\n        }\n    }\n  }  \n')),(0,s.mdx)("h4",{id:"net"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd RemoveProtection/\n// dotnet run RemoveProtection.csproj\n\n  namespace RemoveProtection\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                RemoveProtectionOperation removeProtectionOperation = RemoveProtectionOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"removeProtectionInput.pdf");\n                removeProtectionOperation.SetInput(sourceFileRef);\n \n                // Set the password for removing security from a PDF document.\n                removeProtectionOperation.SetPassword("password");\n \n                // Execute the operation.\n                FileRef result = removeProtectionOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/removeProtectionOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n  }\n   \n')),(0,s.mdx)("h4",{id:"node-js"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/removeprotection/remove-protection.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    RemoveProtectionParams,\n    RemoveProtectionJob,\n    RemoveProtectionResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance.\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./removeProtectionInput.pdf")\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new RemoveProtectionParams({\n            password: "password"\n        });\n\n        // Creates a new job instance\n        const job = new RemoveProtectionJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: RemoveProtectionResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = "./removeProtectionOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,s.mdx)("h4",{id:"python"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/removeprotection/remove_protection.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass RemoveProtection:\n    def __init__(self):\n        try:\n            file = open('removeProtectionInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            remove_protection_params = RemoveProtectionParams(password=\"password\")\n\n            # Creates a new job instance\n            remove_protection_job = RemoveProtectionJob(input_asset=input_asset,\n                                                        remove_protection_params=remove_protection_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(remove_protection_job)\n            pdf_services_response = pdf_services.get_job_result(location, RemoveProtectionResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'removeProtectionOutput.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n\nif __name__ == \"__main__\":\n    RemoveProtection()\n")),(0,s.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Remove-Protection\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/removeprotection' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"password\": \"mypassword\",\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-remove-protection-md-3e6d1b4b06fd8ed075ba.js.map