{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/document-generation-api/quickstarts.md"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"mappings":"8SAQaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,KAGZG,EAAcL,EAAc,eAC5BM,EAAYN,EAAc,aAC1BO,EAAc,CAClBR,gBAEIS,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGT,GACF,YACD,OAAO,SAACM,GAAD,UAAeD,EAAiBL,EAAhC,CAAuCS,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,eADR,gBAGA,iLAGA,eACE,GAAM,gBADR,iBAGA,mBAAG,mBAAQC,WAAW,KAAnB,qDACH,mBAAG,gBAAKA,WAAW,IACf,IAAO,gGACP,IAAO,YAEX,mBAAG,mBAAQA,WAAW,KAAnB,4BACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,4GASL,mBAAG,mBAAQA,WAAW,KAAnB,8EAEH,4EACA,oBACE,eAAIA,WAAW,MAAf,oBAAwC,cAAGA,WAAW,KAClD,KAAQ,kEAD4B,aAAxC,MAIA,eAAIA,WAAW,MAAf,0CAA8D,cAAGA,WAAW,KACxE,KAAQ,uBADkD,oBAA9D,OAKF,SAACR,EAAD,CAAaS,MAAM,OAAOF,QAAQ,iBAClC,iEAAkD,cAAGC,WAAW,IAC5D,KAAQ,uBADsC,yBAGlD,6KAGA,eACE,GAAM,0BADR,2BAGA,SAACP,EAAD,CAAWQ,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,0tEAmDL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,msGA2EL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,ylEAkDL,eACE,GAAM,yBADR,0BAGA,SAACP,EAAD,CAAWQ,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,wwEAkDL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8sGA4EL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,unEAmDL,wHAEA,mBAAG,gBAAKA,WAAW,IACf,IAAO,wFACP,IAAO,YAEX,eACE,GAAM,mBADR,oBAGA,iFACA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,gCAApB,+DAEA,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,yBAApB,mDAONH,EAAWO,gBAAiB","file":"component---src-pages-document-generation-api-quickstarts-md-51b94dd6a447c44b04d9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"quickstarts\"\n    }}>{`Quickstarts`}</h1>\n    <p>{`Use Document Generation API to merge JSON data into Word based document\ntemplates and produce high fidelity PDF and Word documents from any\napplication.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How It Works`}</h2>\n    <p><strong parentName=\"p\">{`Use MS Word Add-In to design document templates`}</strong></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/pdfservices-api-documentation/508d74f50d6ab35962a0cedc8e10dea4/design_document_templates.gif\",\n        \"alt\": \"image\"\n      }}></img></p>\n    <p><strong parentName=\"p\">{`Prepare your JSON data`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    \"Client\" : {\n      \"Name\" : \"Some Corp Inc\",\n      \"Address\" : \"Somewhere Street\"\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Create Data Driven Word and PDF documents using Document Generation\nAPI`}</strong></p>\n    <p>{`There are two ways to access Document Generation API:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use cloud based `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.adobe.com/go/dcsdk_APIdocs#post-documentGeneration\"\n        }}>{`REST\nAPI`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Or, directly use our offering through `}<a parentName=\"li\" {...{\n          \"href\": \"../pdf-services-api\"\n        }}>{`PDFServices\nSDK`}</a>{`.`}</li>\n    </ul>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To get started with PDFServices SDK, refer `}<a parentName=\"p\" {...{\n        \"href\": \"../pdf-services-api\"\n      }}>{`Quickstarts Section`}</a></p>\n    <p>{`The samples below illustrate how to merge Word based document template\nwith the JSON data to generate the output document in the Word or PDF\nformat.`}</p>\n    <h3 {...{\n      \"id\": \"generate-word-document\"\n    }}>{`Generate Word document`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.documentmerge.MergeDocumentToDOCX\n \n   package com.adobe.pdfservices.operation.samples.documentmerge;\n \n   public class MergeDocumentToDOCX {\n \n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(MergeDocumentToDOCX.class);\n \n      public static void main(String[] args) {\n \n          try {\n \n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n \n            // Setup input data for the document merge process.\n            JSONObject jsonDataForMerge = new JSONObject(\"{\\\\\"customerName\\\\\": \\\\\"Kane Miller\\\\\",\\\\\"customerVisits\\\\\": 100}\");\n \n            // Create an ExecutionContext using credentials.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n \n            // Create a new DocumentMergeOptions instance.\n            DocumentMergeOptions documentMergeOptions = new DocumentMergeOptions(jsonDataForMerge, OutputFormat.DOCX);\n \n            // Create a new DocumentMergeOperation instance with the DocumentMergeOptions instance.\n            DocumentMergeOperation documentMergeOperation = DocumentMergeOperation.createNew(documentMergeOptions);\n \n            // Set the operation input document template from a source file.\n            FileRef documentTemplate = FileRef.createFromLocalFile(\"src/main/resources/documentMergeTemplate.docx\");\n            documentMergeOperation.setInput(documentTemplate);\n \n            // Execute the operation.\n            FileRef result = documentMergeOperation.execute(executionContext);\n \n            // Save the result to the specified location.\n            result.saveAs(\"output/documentMergeOutput.docx\");\n \n          } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n              LOGGER.error(\"Exception encountered while executing operation\", ex);\n          }\n      }\n   }\n     \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-1\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd MergeDocumentToDocx/\n// dotnet run MergeDocumentToDOCX.csproj\n\n  namespace MergeDocumentToDOCX\n   {\n       class Program\n       {\n           private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n  \n           static void Main()\n           {\n               //Configure the logging.\n               ConfigureLogging();\n               try\n               {\n                   // Initial setup, create credentials instance.\n                   Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                            .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                            .Build();\n  \n                   // Create an ExecutionContext using credentials.\n                   ExecutionContext executionContext = ExecutionContext.Create(credentials);\n  \n                   // Setup input data for the document merge process.\n                   JObject jsonDataForMerge = JObject.Parse(\"{\\\\\"customerName\\\\\": \\\\\"Kane Miller\\\\\",\\\\\"customerVisits\\\\\": 100}\");\n  \n                   // Create a new DocumentMerge Options instance.\n                   DocumentMergeOptions documentMergeOptions = new DocumentMergeOptions(jsonDataForMerge, OutputFormat.DOCX);\n  \n                   // Create a new DocumentMerge Operation instance with the DocumentMerge Options instance.\n                   DocumentMergeOperation documentMergeOperation = DocumentMergeOperation.CreateNew(documentMergeOptions);\n  \n                   // Set the operation input document template from a source file.\n                   documentMergeOperation.SetInput(FileRef.CreateFromLocalFile(@\"documentMergeTemplate.docx\"));\n  \n                   // Execute the operation.\n                   FileRef result = documentMergeOperation.Execute(executionContext);\n  \n                   // Save the result to the specified location.\n                   result.SaveAs(Directory.GetCurrentDirectory() + \"/output/DocumentMergeOutput.docx\");\n               }\n               catch (ServiceUsageException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (ServiceApiException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (SDKException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (IOException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (Exception ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n           }\n  \n           static void ConfigureLogging()\n           {\n               ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n               XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n           }\n       }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/documentmerge/merge-document-to-docx.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Setup input data for the document merge process.\n   const jsonString = \"{\\\\\"customerName\\\\\": \\\\\"Kane Miller\\\\\", \\\\\"customerVisits\\\\\": 100}\",\n       jsonDataForMerge = JSON.parse(jsonString);\n\n   // Create an ExecutionContext using credentials.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n\n   // Create a new DocumentMerge options instance.\n   const documentMerge = PDFServicesSdk.DocumentMerge,\n       documentMergeOptions = documentMerge.options,\n       options = new documentMergeOptions.DocumentMergeOptions(jsonDataForMerge, documentMergeOptions.OutputFormat.DOCX);\n\n   // Create a new operation instance using the options instance.\n   const documentMergeOperation = documentMerge.Operation.createNew(options);\n\n   // Set operation input document template from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/documentMergeTemplate.docx');\n   documentMergeOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   documentMergeOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/documentMergeOutput.docx'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n }\n catch (err) {\n     console.log('Exception encountered while executing operation', err);\n }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-pdf-document\"\n    }}>{`Generate PDF document`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample-3\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.documentmerge.MergeDocumentToPDF\n \n    public class MergeDocumentToPDF {\n   \n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(MergeDocumentToPDF.class);\n   \n      public static void main(String[] args) {\n   \n            try {\n   \n              // Initial setup, create credentials instance.\n              Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                      .fromFile(\"pdfservices-api-credentials.json\")\n                      .build();\n   \n              // Setup input data for the document merge process.\n              String content = new String(Files.readAllBytes(Paths.get(\"src/main/resources/salesOrder.json\")));\n              JSONObject jsonDataForMerge = new JSONObject(content);\n   \n              // Create an ExecutionContext using credentials.\n              ExecutionContext executionContext = ExecutionContext.create(credentials);\n   \n              //Create a new DocumentMergeOptions instance.\n              DocumentMergeOptions documentMergeOptions = new DocumentMergeOptions(jsonDataForMerge, OutputFormat.PDF);\n   \n              // Create a new DocumentMergeOperation instance with the DocumentMergeOptions instance.\n              DocumentMergeOperation documentMergeOperation = DocumentMergeOperation.createNew(documentMergeOptions);\n   \n              // Set the operation input document template from a source file.\n              FileRef documentTemplate = FileRef.createFromLocalFile(\"src/main/resources/salesOrderTemplate.docx\");\n              documentMergeOperation.setInput(documentTemplate);\n   \n              // Execute the operation.\n              FileRef result = documentMergeOperation.execute(executionContext);\n   \n              // Save the result to the specified location.\n              result.saveAs(\"output/salesOrderOutput.pdf\");\n   \n            } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n                LOGGER.error(\"Exception encountered while executing operation\", ex);\n            }\n        }\n     }\n     \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-4\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd MergeDocumentToPDF/\n// dotnet run MergeDocumentToPDF.csproj\n\n  namespace MergeDocumentToPDF\n   {\n       class Program\n       {\n           private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n  \n           static void Main()\n           {\n               //Configure the logging.\n               ConfigureLogging();\n               try\n               {\n                   // Initial setup, create credentials instance.\n                   Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                 .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                 .Build();\n  \n                   // Create an ExecutionContext using credentials.\n                   ExecutionContext executionContext = ExecutionContext.Create(credentials);\n  \n                   // Setup input data for the document merge process.\n                   var content = File.ReadAllText(@\"salesOrder.json\");\n                   JObject jsonDataForMerge = JObject.Parse(content);\n  \n                   // Create a new DocumentMerge Options instance.\n                   DocumentMergeOptions documentMergeOptions = new DocumentMergeOptions(jsonDataForMerge, OutputFormat.PDF);\n  \n                   // Create a new DocumentMerge Operation instance with the DocumentMerge Options instance.\n                   DocumentMergeOperation documentMergeOperation = DocumentMergeOperation.CreateNew(documentMergeOptions);\n  \n                   // Set the operation input document template from a source file.\n                   documentMergeOperation.SetInput(FileRef.CreateFromLocalFile(@\"salesOrderTemplate.docx\"));\n  \n                   // Execute the operation.\n                   FileRef result = documentMergeOperation.Execute(executionContext);\n  \n                   // Save the result to the specified location.\n                   result.SaveAs(Directory.GetCurrentDirectory() + \"/output/salesOrderOutput.pdf\");\n               }\n               catch (ServiceUsageException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (ServiceApiException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (SDKException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (IOException ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n               catch (Exception ex)\n               {\n                   log.Error(\"Exception encountered while executing operation\", ex);\n               }\n           }\n  \n           static void ConfigureLogging()\n           {\n               ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n               XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n           }\n       }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-5\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/documentmerge/merge-document-to-docx.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk'),\n      fs = require('fs');\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Setup input data for the document merge process.\n    const jsonString = fs.readFileSync('resources/salesOrder.json'),\n        jsonDataForMerge = JSON.parse(jsonString);\n \n    // Create an ExecutionContext using credentials.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n \n    // Create a new DocumentMerge options instance.\n    const documentMerge = PDFServicesSdk.DocumentMerge,\n        documentMergeOptions = documentMerge.options,\n        options = new documentMergeOptions.DocumentMergeOptions(jsonDataForMerge, documentMergeOptions.OutputFormat.PDF);\n \n    // Create a new operation instance using the options instance.\n    const documentMergeOperation = documentMerge.Operation.createNew(options)\n \n    // Set operation input document template from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/salesOrderTemplate.docx');\n    documentMergeOperation.setInput(input);\n \n    // Execute the operation and Save the result to the specified location.\n    documentMergeOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/salesOrderOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n      console.log('Exception encountered while executing operation', err);\n  }\n  \n`}</code></pre>\n    <p>{`As a result of the Document Generation API, template tags are replaced\nwith the input JSON data.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/pdfservices-api-documentation/6adba199630ad0021dc74536d6a0e329/generate_document.gif\",\n        \"alt\": \"image\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"api-limitations\"\n    }}>{`API Limitations`}</h2>\n    <p>{`The Document Generation API has the following limitations:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Document template size limit`}</strong>{`: Maximum supported document\ntemplate file size is 100MB.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Input JSON size limit`}</strong>{`: Maximum supported input JSON size is\n10MB.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}