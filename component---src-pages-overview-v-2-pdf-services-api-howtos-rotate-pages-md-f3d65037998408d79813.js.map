{"version":3,"file":"component---src-pages-overview-v-2-pdf-services-api-howtos-rotate-pages-md-f3d65037998408d79813.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIU,YAJF,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,gBAAc,iBAEtBA,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,6IAEAA,EAAAA,EAAAA,KAACL,EAAS,CAACgB,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCH,QAAQ,eAC9FV,EAAAA,EAAAA,KAAA,MACE,GAAM,QAAM,SAEdA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMc,WAAW,MAClB,UAAa,uBAAqB,qxFAmEtCd,EAAAA,EAAAA,KAAA,MACE,GAAM,OAAK,SAEbA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMc,WAAW,MAClB,UAAa,uBAAqB,k1GAqFtCd,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMc,WAAW,MAClB,UAAa,uBAAqB,orFAoEtCd,EAAAA,EAAAA,KAAA,MACE,GAAM,YAAU,aAElBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMc,WAAW,MAClB,UAAa,uBAAqB,2mDA6C1C,CAEAV,EAAWW,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/v2/pdf-services-api/howtos/rotate-pages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rotate-pages\"\n    }}>{`Rotate Pages`}</h1>\n    <h2 {...{\n      \"id\": \"rotate-pages-in-pdf\"\n    }}>{`Rotate Pages in PDF`}</h2>\n    <p>{`The rotate pages operation selectively rotates pages in PDF file. For\nexample, you can change portrait view to landscape view.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.rotatepages.RotatePDFPages\n \n  public class RotatePDFPages {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(RotatePDFPages.class);\n \n    public static void main(String[] args) {\n        try {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n \n            // Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n            RotatePagesOperation rotatePagesOperation = RotatePagesOperation.createNew();\n \n            // Set operation input from a source file.\n            FileRef source = FileRef.createFromLocalFile(\"src/main/resources/rotatePagesInput.pdf\");\n            rotatePagesOperation.setInput(source);\n \n            // Sets angle by 90 degrees (in clockwise direction) for rotating the specified pages of\n            // the input PDF file.\n            PageRanges firstPageRange = getFirstPageRangeForRotation();\n            rotatePagesOperation.setAngleToRotatePagesBy(Angle._90, firstPageRange);\n \n            // Sets angle by 180 degrees (in clockwise direction) for rotating the specified pages of\n            // the input PDF file.\n            PageRanges secondPageRange = getSecondPageRangeForRotation();\n            rotatePagesOperation.setAngleToRotatePagesBy(Angle._180, secondPageRange);\n \n            // Execute the operation.\n            FileRef result = rotatePagesOperation.execute(executionContext);\n \n            // Save the result to the specified location.\n            result.saveAs(\"output/rotatePagesOutput.pdf\");\n \n        } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n            LOGGER.error(\"Exception encountered while executing operation\", e);\n        }\n    }\n \n    private static PageRanges getFirstPageRangeForRotation() {\n        // Specify pages for rotation.\n        PageRanges firstPageRange = new PageRanges();\n        // Add page 1.\n        firstPageRange.addSinglePage(1);\n \n        // Add pages 3 to 4.\n        firstPageRange.addRange(3, 4);\n        return firstPageRange;\n    }\n \n    private static PageRanges getSecondPageRangeForRotation() {\n        // Specify pages for rotation.\n        PageRanges secondPageRange = new PageRanges();\n        // Add page 2.\n        secondPageRange.addSinglePage(2);\n \n        return secondPageRange;\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd RotatePDFPages/\n// dotnet run RotatePDFPages.csproj\n\n  namespace RotatePDFPages\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            // Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                RotatePagesOperation rotatePagesOperation = RotatePagesOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"rotatePagesInput.pdf\");\n                rotatePagesOperation.SetInput(sourceFileRef);\n \n                // Sets angle by 90 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges firstPageRange = GetFirstPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._90, firstPageRange);\n \n                // Sets angle by 180 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges secondPageRange = GetSecondPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._180, secondPageRange);\n \n                // Execute the operation.\n                FileRef result = rotatePagesOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + \"/output/rotatePagesOutput.pdf\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n \n        private static PageRanges GetFirstPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges firstPageRange = new PageRanges();\n            // Add page 1.\n            firstPageRange.AddSinglePage(1);\n \n            // Add pages 3 to 4.\n            firstPageRange.AddRange(3, 4);\n            return firstPageRange;\n        }\n \n        private static PageRanges GetSecondPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges secondPageRange = new PageRanges();\n            // Add page 2.\n            secondPageRange.AddSinglePage(2);\n \n            return secondPageRange;\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/rotatepages/rotate-pdf-pages.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n \n  const getFirstPageRangeForRotation = () => {\n    // Specify pages for rotation.\n    const firstPageRange = new PDFServicesSdk.PageRanges();\n    // Add page 1.\n    firstPageRange.addSinglePage(1);\n \n    // Add pages 3 to 4.\n    firstPageRange.addPageRange(3, 4);\n \n    return firstPageRange;\n  };\n \n  const getSecondPageRangeForRotation = () => {\n    // Specify pages for rotation.\n    const secondPageRange = new PDFServicesSdk.PageRanges();\n    // Add page 2.\n    secondPageRange.addSinglePage(2);\n \n    return secondPageRange;\n  };\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials = PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        rotatePagesOperation = PDFServicesSdk.RotatePages.Operation.createNew();\n \n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/rotatePagesInput.pdf');\n    rotatePagesOperation.setInput(input);\n \n    // Sets angle by 90 degrees (in clockwise direction) for rotating the specified pages of\n    // the input PDF file.\n    const firstPageRange = getFirstPageRangeForRotation();\n    rotatePagesOperation.setAngleToRotatePagesBy(PDFServicesSdk.RotatePages.Angle._90, firstPageRange);\n \n    // Sets angle by 180 degrees (in clockwise direction) for rotating the specified pages of\n    // the input PDF file.\n    const secondPageRange = getSecondPageRangeForRotation();\n    rotatePagesOperation.setAngleToRotatePagesBy(PDFServicesSdk.RotatePages.Angle._180,secondPageRange);\n \n    // Execute the operation and Save the result to the specified location.\n    rotatePagesOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/rotatePagesOutput.pdf'))\n        .catch(err => {\n            if (err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-pageManipulation\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"params\\\\\": {\n            \\\\\"cpf:inline\\\\\": {\n                \\\\\"pageActions\\\\\": [{\n                    \\\\\"pageAction\\\\\": {\n                        \\\\\"rotate\\\\\": {\n                            \\\\\"pageRanges\\\\\": [{\n                                \\\\\"start\\\\\": 1,\n                                \\\\\"end\\\\\": 1\n                            }],\n                            \\\\\"angle\\\\\": 90\n                        }\n                    }\n                }]\n            }\n        },\n        \\\\\"documentIn\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-4735fcf3cf924b25879e6fcf7aa84ad4\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOut\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"cid:multipartLabelOut\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}