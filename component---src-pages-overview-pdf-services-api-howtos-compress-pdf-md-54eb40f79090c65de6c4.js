"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2569],{75896:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return u}});var s=t(87462),r=t(45987),o=(t(15007),t(64983)),a=t(91515);const i=["components"],p={},c=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var l;const m={_frontmatter:p},d=a.Z;function u(e){let{components:n}=e,t=(0,r.Z)(e,i);return(0,o.mdx)(d,(0,s.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"compress-pdfs"},"Compress PDFs"),(0,o.mdx)("p",null,"Reduce the size of PDF files by compressing to smaller sizes for lower bandwidth viewing, downloading, and sharing."),(0,o.mdx)("p",null,"Support for multiple compression levels to retain the quality of images and graphics"),(0,o.mdx)("h2",{id:"rest-api"},"REST API"),(0,o.mdx)("p",null,"See our public API Reference for ",(0,o.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Compress-PDF"},"Compress PDF")),(0,o.mdx)("h2",{id:"compress-pdfs-1"},"Compress PDFs"),(0,o.mdx)("p",null,"Compress PDFs to reduce the file size prior to performing workflow\noperations that use bandwidth or memory."),(0,o.mdx)("p",null,"Please refer the ",(0,o.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,o.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDF\n \n   public class CompressPDF {\n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDF.class);\n  \n     public static void main(String[] args) {\n  \n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/compressPDFInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Creates a new job instance\n            CompressPDFJob compressPDFJob = new CompressPDFJob(asset);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(compressPDFJob);\n            PDFServicesResponse<CompressPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CompressPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creating an output stream and copying stream asset content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/compressPDFOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/compressPDFOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n         } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n             LOGGER.error("Exception encountered while executing operation", ex);\n         }\n     }\n   }\n')),(0,o.mdx)("h4",{id:"net"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDF.csproj\n\n namespace CompressPDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n               \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n               compressPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = compressPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,o.mdx)("h4",{id:"node-js"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CompressPDFJob,\n    CompressPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./compressPDFInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Creates a new job instance\n        const job = new CompressPDFJob({inputAsset});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CompressPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = "./compressPDFOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,o.mdx)("h4",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/compresspdf/compress_pdf.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass CompressPDF:\n    def __init__(self):\n        try:\n            file = open('./compressPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Creates a new job instance\n            compress_pdf_job = CompressPDFJob(input_asset=input_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(compress_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CompressPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CompressPDF.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    CompressPDF()\n")),(0,o.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n\n")),(0,o.mdx)("h2",{id:"compress-pdfs-with-compression-level"},"Compress PDFs with Compression Level"),(0,o.mdx)("p",null,"Compress PDFs to reduce the file size on the basis of provided\ncompression level, prior to performing workflow operations that use\nbandwidth or memory. Refer to ",(0,o.mdx)("inlineCode",{parentName:"p"},"CompressionLevel")," in the API docs for a\nlist of supported compression levels."),(0,o.mdx)("p",null,"Please refer the ",(0,o.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,o.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java-1"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDFWithOptions\n \n    public class CompressPDFWithOptions {\n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDFWithOptions.class);\n   \n      public static void main(String[] args) {\n   \n          try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/compressPDFInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Create parameters for the job\n            CompressPDFParams compressPDFParams = CompressPDFParams.compressPDFParamsBuilder()\n                    .withCompressionLevel(CompressionLevel.LOW)\n                    .build();\n\n            // Creates a new job instance\n            CompressPDFJob compressPDFJob = new CompressPDFJob(asset)\n                    .setParams(compressPDFParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(compressPDFJob);\n            PDFServicesResponse<CompressPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CompressPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creating an output stream and copying stream asset content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/compressPDFWithOptionsOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/compressPDFWithOptionsOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n          } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n              LOGGER.error("Exception encountered while executing operation", ex);\n          }\n      }\n    }\n')),(0,o.mdx)("h4",{id:"net-1"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDFWithOptions.csproj\n\n  namespace CompressPDFWithOptions\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n \n                // Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n                compressPDFOperation.SetInput(sourceFileRef);\n \n                // Build CompressPDF options from supported compression levels and set them into the operation\n                CompressPDFOptions compressPDFOptions = CompressPDFOptions.CompressPDFOptionsBuilder()\n                        .WithCompressionLevel(CompressionLevel.LOW)\n                        .Build();\n                compressPDFOperation.SetOptions(compressPDFOptions);\n \n                // Execute the operation.\n                FileRef result = compressPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFWithOptionsOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n  }\n')),(0,o.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf-with-options.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CompressPDFJob,\n    CompressPDFParams,\n    CompressionLevel,\n    CompressPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./compressPDFInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Set the compression level\n        const params = new CompressPDFParams({\n            compressionLevel: CompressionLevel.LOW,\n        });\n\n        // Creates a new job instance\n        const job = new CompressPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CompressPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = createOutputFilePath();\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = "./compressPDFWithOptionsOutput.pdf";\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,o.mdx)("h4",{id:"python-1"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python python src/compresspdf/compress_pdf_with_options.py\n\nclass CompressPDFWithOptions:\n    def __init__(self):\n        try:\n            file = open('./compressPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            compress_pdf_params = CompressPDFParams(compression_level=CompressionLevel.LOW)\n\n            # Creates a new job instance\n            compress_pdf_job = CompressPDFJob(input_asset=input_asset,\n                                              compress_pdf_params=compress_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(compress_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CompressPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CompressPDFWithOptions.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    CompressPDFWithOptions()\n")),(0,o.mdx)("h4",{id:"rest-api-2"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"compressionLevel\": \"MEDIUM\"\n}'\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-compress-pdf-md-54eb40f79090c65de6c4.js.map