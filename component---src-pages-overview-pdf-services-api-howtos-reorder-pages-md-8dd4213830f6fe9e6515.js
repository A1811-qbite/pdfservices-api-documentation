"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3446],{6832:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return u}});var r=t(87462),a=t(45987),s=(t(15007),t(64983)),o=t(91515);const i=["components"],p={},d=(g="CodeBlock",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)});var g;const c={_frontmatter:p},l=o.Z;function u(e){let{components:n}=e,t=(0,a.Z)(e,i);return(0,s.mdx)(l,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"reorder-pages"},"Reorder Pages"),(0,s.mdx)("p",null,"Reorder the pages of a PDF file to reorganize."),(0,s.mdx)("h2",{id:"rest-api"},"REST API"),(0,s.mdx)("p",null,"See our public API Reference for ",(0,s.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Combine-PDF"},"Reorder Pages")),(0,s.mdx)("h2",{id:"reorder-pages-in-pdf"},"Reorder Pages in PDF"),(0,s.mdx)("p",null,"The reorder pages operation moves pages from one location to another in\na PDF file."),(0,s.mdx)("p",null,"Please refer the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(d,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.reorderpages.ReorderPDFPages\n \n public class ReorderPDFPages {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ReorderPDFPages.class);\n\n   public static void main(String[] args) {\n       try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/reorderPagesInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            PageRanges pagesToReorder = getPageRangeForReorder();\n\n            // Create parameters for the job\n            ReorderPagesParams reorderPagesParams = ReorderPagesParams\n                    .reorderPagesParamsBuilder(asset, pagesToReorder) // Add the asset as input to the params, along with its page order\n                    .build();\n\n            // Creates a new job instance\n            ReorderPagesPDFJob reorderPagesPDFJob = new ReorderPagesPDFJob(reorderPagesParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(reorderPagesPDFJob);\n            PDFServicesResponse<ReorderPagesResult> pdfServicesResponse = pdfServices.getJobResult(location, ReorderPagesResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/reorderPagesOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/reorderPagesOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n       } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n           LOGGER.error("Exception encountered while executing operation", e);\n       }\n   }\n\n   private static PageRanges getPageRangeForReorder() {\n       // Specify order of the pages for an output document\n        PageRanges pageRanges = new PageRanges();\n        // Add pages 3 to 4\n        pageRanges.addRange(3, 4);\n\n        // Add page 1\n        pageRanges.addSinglePage(1);\n\n        return pageRanges;\n   }\n }\n')),(0,s.mdx)("h4",{id:"net"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ReorderPages/\n// dotnet run ReorderPDFPages.csproj\n\n namespace ReorderPDFPages\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           // Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n               // Create an ExecutionContext using credentials.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n               // Create a new operation instance\n               ReorderPagesOperation reorderPagesOperation = ReorderPagesOperation.CreateNew();\n\n               // Set operation input from a source file, along with specifying the order of the pages for\n               // rearranging the pages in a PDF file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"reorderPagesInput.pdf");\n               reorderPagesOperation.SetInput(sourceFileRef);\n               PageRanges pageRanges = GetPageRangeForReorder();\n               reorderPagesOperation.SetPagesOrder(pageRanges);\n\n               // Execute the operation.\n               FileRef result = reorderPagesOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/reorderPagesOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       private static PageRanges GetPageRangeForReorder()\n       {\n           // Specify order of the pages for an output document.\n           PageRanges pageRanges = new PageRanges();\n           // Add pages 3 to 4.\n           pageRanges.AddRange(3, 4);\n\n           // Add page 1.\n           pageRanges.AddSinglePage(1);\n\n           return pageRanges;\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,s.mdx)("h4",{id:"node-js"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/reorderpages/reorder-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PageRanges,\n    ReorderPagesParams,\n    ReorderPagesJob,\n    ReorderPagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./reorderPagesInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        // Add the asset as input to the params, along with its page order\n        const params = new ReorderPagesParams({\n            asset: inputAsset,\n            pageRanges: getPageRangeForReorder()\n        });\n\n        // Creates a new job instance\n        const job = new ReorderPagesJob({params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ReorderPagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy result asset\'s content to it\n        const outputFilePath = "./reorderPagesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n\nfunction getPageRangeForReorder() {\n    // Specify order of the pages for an output document\n    const pageRanges = new PageRanges();\n    // Add pages 3 to 4\n    pageRanges.addRange(3, 4);\n    // Add page 1\n    pageRanges.addSinglePage(1);\n    return pageRanges;\n}\n')),(0,s.mdx)("h4",{id:"python"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/reorderpages/reorder_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ReorderPDFPages:\n    def __init__(self):\n        try:\n            file = open('reorderPagesInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            pages_to_reorder = self.get_page_range_for_reorder()\n\n            # Create parameters for the job\n            reorder_pages_params = ReorderPagesParams(asset=input_asset, page_ranges=pages_to_reorder)\n\n            # Creates a new job instance\n            reorder_pages_job = ReorderPagesJob(reorder_pages_params=reorder_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(reorder_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, ReorderPagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = \"reorderPagesOutput.pdf\"\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_page_range_for_reorder() -> PageRanges:\n        # Specify order of the pages for an output document\n        page_ranges = PageRanges()\n        # Add pages 3 to 4\n        page_ranges.add_range(3, 4)\n        # Add page 1\n        page_ranges.add_single_page(1)\n        return page_ranges\n\n\nif __name__ == \"__main__\":\n    ReorderPDFPages()\n\n")),(0,s.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Combine-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/combinepdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assets": [\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 3,\n                    "end": 3\n                },\n                {\n                    "start": 1,\n                    "end": 1\n                },\n                {\n                    "start": 4,\n                    "end": 4\n                }\n            ]\n        }\n    ]\n}\'\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-reorder-pages-md-8dd4213830f6fe9e6515.js.map