(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7908],{77066:function(e,n,t){"use strict";t.r(n),t.d(n,{_frontmatter:function(){return c},default:function(){return u}});var o,r=t(22122),s=t(19756),i=(t(15007),t(64983)),a=t(99536),p=["components"],c={},l=(o="CodeBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),m={_frontmatter:c},d=a.Z;function u(e){var n=e.components,t=(0,s.Z)(e,p);return(0,i.mdx)(d,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"compress-pdfs"},"Compress PDFs"),(0,i.mdx)("h2",{id:"compress-pdfs-1"},"Compress PDFs"),(0,i.mdx)("p",null,"Compress PDFs to reduce the file size prior to performing workflow\noperations that use bandwidth or memory."),(0,i.mdx)(l,{slots:"heading, code",repeat:"3",languages:"Java, .NET, NodeJS",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDF\n \n   public class CompressPDF {\n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDF.class);\n  \n     public static void main(String[] args) {\n  \n         try {\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile("pdfservices-api-credentials.json")\n                     .build();\n  \n             // Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n             CompressPDFOperation compressPDFOperation = CompressPDFOperation.createNew();\n  \n             // Set operation input from a source file.\n             FileRef source = FileRef.createFromLocalFile("src/main/resources/compressPDFInput.pdf");\n             compressPDFOperation.setInput(source);\n  \n             // Execute the operation\n             FileRef result = compressPDFOperation.execute(executionContext);\n  \n             // Save the result at the specified location\n             result.saveAs("output/compressPDFOutput.pdf");\n  \n         } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n             LOGGER.error("Exception encountered while executing operation", ex);\n         }\n     }\n   }\n')),(0,i.mdx)("h4",{id:"sample-1"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDF.csproj\n\n namespace CompressPDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                               .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                               .Build();\n\n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n               compressPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = compressPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,i.mdx)("h4",{id:"sample-2"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf.js\n\n   const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n  \n   try {\n     // Initial setup, create credentials instance.\n     const credentials =  PDFServicesSdk.Credentials\n         .serviceAccountCredentialsBuilder()\n         .fromFile(\"pdfservices-api-credentials.json\")\n         .build();\n  \n     // Create an ExecutionContext using credentials and create a new operation instance.\n     const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n         compressPDF = PDFServicesSdk.CompressPDF,\n         compressPDFOperation = compressPDF.Operation.createNew();\n  \n     // Set operation input from a source file.\n     const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/compressPDFInput.pdf');\n     compressPDFOperation.setInput(input);\n  \n     // Execute the operation and Save the result to the specified location.\n     compressPDFOperation.execute(executionContext)\n         .then(result => result.saveAsFile('output/compressPDFOutput.pdf'))\n         .catch(err => {\n             if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                 || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                 console.log('Exception encountered while executing operation', err);\n             } else {\n                 console.log('Exception encountered while executing operation', err);\n             }\n         });\n   } catch (err) {\n     console.log('Exception encountered while executing operation', err);\n   }\n")),(0,i.mdx)("p",null,"The REST API example can be found ",(0,i.mdx)("a",{parentName:"p",href:"https://documentcloud.adobe.com/document-services/index.html#post-compressPDF"},"here")),(0,i.mdx)("h2",{id:"compress-pdfs-with-compression-level"},"Compress PDFs with Compression Level"),(0,i.mdx)("p",null,"Compress PDFs to reduce the file size on the basis of provided\ncompression level, prior to performing workflow operations that use\nbandwidth or memory. Refer to ",(0,i.mdx)("inlineCode",{parentName:"p"},"CompressionLevel")," in the API docs for a\nlist of supported compression levels."),(0,i.mdx)(l,{slots:"heading, code",repeat:"3",languages:"Java, .NET, NodeJS",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-3"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDF\n \n    public class CompressPDFWithOptions {\n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDFWithOptions.class);\n   \n      public static void main(String[] args) {\n   \n          try {\n              // Initial setup, create credentials instance.\n              Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                      .fromFile("pdfservices-api-credentials.json")\n                      .build();\n   \n              // Create an ExecutionContext using credentials and create a new operation instance.\n              ExecutionContext executionContext = ExecutionContext.create(credentials);\n              CompressPDFOperation compressPDFOperation = CompressPDFOperation.createNew();\n   \n              // Set operation input from a source file.\n              FileRef source = FileRef.createFromLocalFile("src/main/resources/compressPDFInput.pdf");\n              compressPDFOperation.setInput(source);\n   \n              // Build CompressPDF options from supported compression levels and set them into the operation\n              CompressPDFOptions compressPDFOptions = CompressPDFOptions.compressPDFOptionsBuilder()\n                      .withCompressionLevel(CompressionLevel.LOW)\n                      .build();\n              compressPDFOperation.setOptions(compressPDFOptions);\n   \n              // Execute the operation\n              FileRef result = compressPDFOperation.execute(executionContext);\n   \n              // Save the result at the specified location\n              result.saveAs("output/compressPDFWithOptionsOutput.pdf");\n   \n          } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n              LOGGER.error("Exception encountered while executing operation", ex);\n          }\n      }\n    }\n')),(0,i.mdx)("h4",{id:"sample-4"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDF.csproj\n\n  namespace CompressPDFWithOptions\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                                .Build();\n \n                // Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"compressPDFInput.pdf");\n                compressPDFOperation.SetInput(sourceFileRef);\n \n                // Build CompressPDF options from supported compression levels and set them into the operation\n                CompressPDFOptions compressPDFOptions = CompressPDFOptions.CompressPDFOptionsBuilder()\n                        .WithCompressionLevel(CompressionLevel.LOW)\n                        .Build();\n                compressPDFOperation.SetOptions(compressPDFOptions);\n \n                // Execute the operation.\n                FileRef result = compressPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/compressPDFWithOptionsOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n  }\n')),(0,i.mdx)("h4",{id:"sample-5"},"Sample"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf-with-options.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       compressPDF = PDFServicesSdk.CompressPDF,\n       compressPDFOperation = compressPDF.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/compressPDFInput.pdf');\n   compressPDFOperation.setInput(input);\n\n   // Provide any custom configuration options for the operation.\n   const options = new compressPDF.options.CompressPDFOptions.Builder()\n       .withCompressionLevel(PDFServicesSdk.CompressPDF.options.CompressionLevel.MEDIUM)\n       .build();\n   compressPDFOperation.setOptions(options);\n\n   // Execute the operation and Save the result to the specified location.\n   compressPDFOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/compressPDFWithOptionsOutput.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,i.mdx)("p",null,"The REST API example can be found ",(0,i.mdx)("a",{parentName:"p",href:"https://documentcloud.adobe.com/document-services/index.html#post-compressPDF"},"here")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-pdf-services-api-howtos-compress-pdf-md-e8fdb559c6fd7ae39acd.js.map