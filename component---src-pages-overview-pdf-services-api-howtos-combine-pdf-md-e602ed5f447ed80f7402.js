"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9079],{24776:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return c},default:function(){return m}});var s=t(87462),a=t(45987),i=(t(15007),t(64983)),r=t(91515);const o=["components"],c={},p=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)});var l;const d={_frontmatter:c},g=r.Z;function m(e){let{components:n}=e,t=(0,a.Z)(e,o);return(0,i.mdx)(g,(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"combine-pdf-files"},"Combine PDF Files"),(0,i.mdx)("p",null,"Combine two or more documents into a single PDF file"),(0,i.mdx)("h2",{id:"rest-api"},"REST API"),(0,i.mdx)("p",null,"See our public API Reference for ",(0,i.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Combine-PDF"},"Combine PDF")),(0,i.mdx)("h2",{id:"combine-files"},"Combine Files"),(0,i.mdx)("p",null,"This sample combines up to 20 PDF files into a single PDF file."),(0,i.mdx)("p",null,"Please refer the ",(0,i.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,i.mdx)(p,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"java"},"Java"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.combinepdf.CombinePDF\n \n public class CombinePDF {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(CombinePDF.class);\n\n   public static void main(String[] args) {\n     try (InputStream inputStream1 = Files.newInputStream(new File("src/main/resources/combineFilesInput1.pdf").toPath());\n          InputStream inputStream2 = Files.newInputStream(new File("src/main/resources/combineFilesInput2.pdf").toPath())) {\n        // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n            System.getenv("PDF_SERVICES_CLIENT_ID"),\n            System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n    \n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n    \n        // Creates an asset(s) from source file(s) and upload\n        List<StreamAsset> streamAssets = new ArrayList<>();\n        streamAssets.add(new StreamAsset(inputStream1, PDFServicesMediaType.PDF.getMediaType()));\n        streamAssets.add(new StreamAsset(inputStream2, PDFServicesMediaType.PDF.getMediaType()));\n        List<Asset> assets = pdfServices.uploadAssets(streamAssets);\n    \n        // Create parameters for the job\n        CombinePDFParams combinePDFParams = CombinePDFParams.combinePDFParamsBuilder()\n            .addAsset(assets.get(0))\n            .addAsset(assets.get(1))\n            .build();\n    \n        // Creates a new job instance\n        CombinePDFJob combinePDFJob = new CombinePDFJob(combinePDFParams);\n    \n        // Submit the job and gets the job result\n        String location = pdfServices.submit(combinePDFJob);\n        PDFServicesResponse<CombinePDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CombinePDFResult.class);\n    \n        // Get content from the resulting asset(s)\n        Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n        StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n    \n        // Creates an output stream and copy stream asset\'s content to it\n        Files.createDirectories(Paths.get("output/"));\n        OutputStream outputStream = Files.newOutputStream(new File("output/combineFilesOutput.pdf").toPath());\n        LOGGER.info("Saving asset at output/combineFilesOutput.pdf");\n        IOUtils.copy(streamAsset.getInputStream(), outputStream);\n        outputStream.close();\n     } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n       LOGGER.error("Exception encountered while executing operation", e);\n     }\n   }\n }\n  \n')),(0,i.mdx)("h4",{id:"net"},".NET"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CombinePDF/\n// dotnet run CombinePDF.csproj\n\n namespace CombinePDF\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n           // Initial setup, create credentials instance.\n           Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                .WithClientId("PDF_SERVICES_CLIENT_ID")\n                .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CombineFilesOperation combineFilesOperation = CombineFilesOperation.CreateNew();\n\n         // Add operation input from source files.\n         FileRef combineSource1 = FileRef.CreateFromLocalFile(@"combineFilesInput1.pdf");\n         FileRef combineSource2 = FileRef.CreateFromLocalFile(@"combineFilesInput2.pdf");\n         combineFilesOperation.AddInput(combineSource1);\n         combineFilesOperation.AddInput(combineSource2);\n\n         // Execute the operation.\n         FileRef result = combineFilesOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + "/output/combineFilesOutput.pdf");\n\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error("Exception encountered while executing operation", ex);\n       }\n       // Catch more errors here. . .\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n     }\n   }\n }\n')),(0,i.mdx)("h4",{id:"node-js"},"Node JS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/combinepdf/combine-pdf.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CombinePDFJob,\n    CombinePDFParams,\n    CombinePDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream1;\n    let readStream2;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream1 = fs.createReadStream("./combineFilesInput1.pdf");\n        readStream2 = fs.createReadStream("./combineFilesInput2.pdf");\n        const [inputAsset1, inputAsset2] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: readStream1,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: readStream2,\n                mimeType: MimeType.PDF\n            }]\n        });\n\n        // Create parameters for the job\n        const params = new CombinePDFParams()\n            .addAsset(inputAsset1)\n            .addAsset(inputAsset2);\n\n        // Create a new job instance\n        const job = new CombinePDFJob({params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CombinePDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy result asset\'s content to it\n        const outputFilePath = "./combineFilesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream1?.destroy();\n        readStream2?.destroy();\n    }\n})();\n')),(0,i.mdx)("h4",{id:"python"},"Python"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/combinepdf/combine_pdf.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass CombinePDF:\n    def __init__(self):\n        try:\n            file = open('./combineFilesInput1.pdf', 'rb')\n            input_stream_1 = file.read()\n            file.close()\n\n            file = open('./combineFilesInput2.pdf', 'rb')\n            input_stream_2 = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            stream_assets = [StreamAsset(input_stream_1, PDFServicesMediaType.PDF),\n                             StreamAsset(input_stream_2, PDFServicesMediaType.PDF)]\n\n            assets = pdf_services.upload_assets(stream_assets)\n\n            # Create parameters for the job\n            combine_pdf_params = ((CombinePDFParams()\n                                  .add_asset(assets[0]))\n                                  .add_asset(assets[1]))\n\n            # Creates a new job instance\n            combine_pdf_job = CombinePDFJob(combine_pdf_params=combine_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(combine_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CombinePDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CombinePDFResult = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CombinePDF.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    CombinePDF()\n")),(0,i.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Combine-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/combinepdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assets\": [\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2c4d-46d6-87f2-087832fca718\"\n        },\n        {\n            \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n        }\n    ]\n}'\n")),(0,i.mdx)("h2",{id:"combine-pages-from-multiple-files"},"Combine pages from multiple files"),(0,i.mdx)("p",null,"This combine sample combines specific pages from up to 20 different PDF\nfiles into a single PDF file. Optional arguments allow specifying page\nranges for each file to combine in the output file."),(0,i.mdx)("p",null,"Please refer the ",(0,i.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,i.mdx)(p,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"java-1"},"Java"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.combinepdf.CombinePDFWithPageRanges\n \n public class CombinePDFWithPageRanges {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(CombinePDFWithPageRanges.class);\n \n    public static void main(String[] args) {\n \n      try (InputStream inputStream1 = Files.newInputStream(new File("src/main/resources/combineFileWithPageRangeInput1.pdf").toPath());\n           InputStream inputStream2 = Files.newInputStream(new File("src/main/resources/combineFileWithPageRangeInput2.pdf").toPath())) { \n         // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv("PDF_SERVICES_CLIENT_ID"),\n                System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n\n        // Creates an asset(s) from source file(s) and upload\n        List<StreamAsset> streamAssets = new ArrayList<>();\n        streamAssets.add(new StreamAsset(inputStream1, PDFServicesMediaType.PDF.getMediaType()));\n        streamAssets.add(new StreamAsset(inputStream2, PDFServicesMediaType.PDF.getMediaType()));\n        List<Asset> assets = pdfServices.uploadAssets(streamAssets);\n\n        PageRanges pageRangesForFirstFile = getPageRangeForFirstFile();\n        PageRanges pageRangesForSecondFile = getPageRangeForSecondFile();\n\n        // Create parameters for the job\n        CombinePDFParams combinePDFParams = CombinePDFParams.combinePDFParamsBuilder()\n                .addAsset(assets.get(0), pageRangesForFirstFile) // Add the first asset as input to the params, along with its page ranges\n                .addAsset(assets.get(1), pageRangesForSecondFile) // Add the second asset as input to the params, along with its page ranges\n                .build();\n\n        // Creates a new job instance\n        CombinePDFJob combinePDFJob = new CombinePDFJob(combinePDFParams);\n\n        // Submit the job and gets the job result\n        String location = pdfServices.submit(combinePDFJob);\n        PDFServicesResponse<CombinePDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CombinePDFResult.class);\n\n        // Get content from the resulting asset(s)\n        Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n        StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n        // Creates an output stream and copy stream asset\'s content to it\n        Files.createDirectories(Paths.get("output/"));\n        OutputStream outputStream = Files.newOutputStream(new File("output/combineFilesWithPageOptionsOutput.pdf").toPath());\n        LOGGER.info("Saving asset at output/combineFilesWithPageOptionsOutput.pdf");\n        IOUtils.copy(streamAsset.getInputStream(), outputStream);\n        outputStream.close();\n      } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n        LOGGER.error("Exception encountered while executing operation", ex);\n      }\n    }\n \n     private static PageRanges getPageRangeForSecondFile() {\n        // Specify which pages of the second file are to be included in the combined file\n        PageRanges pageRangesForSecondFile = new PageRanges();\n        // Add all pages including and after page 3\n        pageRangesForSecondFile.addAllFrom(3);\n        return pageRangesForSecondFile;\n    }\n    \n    private static PageRanges getPageRangeForFirstFile() {\n        // Specify which pages of the first file are to be included in the combined file\n        PageRanges pageRangesForFirstFile = new PageRanges();\n        // Add page 1\n        pageRangesForFirstFile.addSinglePage(1);\n        // Add page 2\n        pageRangesForFirstFile.addSinglePage(2);\n        // Add pages 3 to 4\n        pageRangesForFirstFile.addRange(3, 4);\n        return pageRangesForFirstFile;\n    }\n  }\n')),(0,i.mdx)("h4",{id:"net-1"},".NET"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CombinePDFWithPageRanges/\n// dotnet run CombinePDFWithPageRanges.csproj\n\n  namespace CombinePDFWithPageRanges\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          CombineFilesOperation combineFilesOperation = CombineFilesOperation.CreateNew();\n \n          // Create a FileRef instance from a local file.\n          FileRef firstFileToCombine = FileRef.CreateFromLocalFile(@"combineFileWithPageRangeInput1.pdf");\n          PageRanges pageRangesForFirstFile = GetPageRangeForFirstFile();\n          // Add the first file as input to the operation, along with its page range.\n          combineFilesOperation.AddInput(firstFileToCombine, pageRangesForFirstFile);\n \n          // Create a second FileRef instance using a local file.\n          FileRef secondFileToCombine = FileRef.CreateFromLocalFile(@"combineFileWithPageRangeInput2.pdf");\n          PageRanges pageRangesForSecondFile = GetPageRangeForSecondFile();\n          // Add the second file as input to the operation, along with its page range.\n          combineFilesOperation.AddInput(secondFileToCombine, pageRangesForSecondFile);\n \n          // Execute the operation.\n          FileRef result = combineFilesOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + "/output/combineFilesOutput.pdf");\n \n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      private static PageRanges GetPageRangeForSecondFile()\n      {\n        // Specify which pages of the second file are to be included in the combined file.\n        PageRanges pageRangesForSecondFile = new PageRanges();\n        // Add all pages including and after page 5.\n        pageRangesForSecondFile.AddAllFrom(5);\n        return pageRangesForSecondFile;\n      }\n \n      private static PageRanges GetPageRangeForFirstFile()\n      {\n        // Specify which pages of the first file are to be included in the combined file.\n        PageRanges pageRangesForFirstFile = new PageRanges();\n        // Add page 2.\n        pageRangesForFirstFile.AddSinglePage(2);\n        // Add page 3.\n        pageRangesForFirstFile.AddSinglePage(3);\n        // Add pages 5 to 7.\n        pageRangesForFirstFile.AddRange(5, 7);\n        return pageRangesForFirstFile;\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n      }\n    }\n  }\n')),(0,i.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/combinepdf/combine-pdf-with-page-ranges.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CombinePDFParams,\n    CombinePDFJob,\n    CombinePDFResult,\n    PageRanges,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream1;\n    let readStream2;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream1 = fs.createReadStream("./combineFilesInput1.pdf");\n        readStream2 = fs.createReadStream("./combineFilesInput2.pdf");\n        const [inputAsset1, inputAsset2] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: readStream1,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: readStream2,\n                mimeType: MimeType.PDF\n            }]\n        });\n\n        // Create a CombinePDFParams instance\n        const params = new CombinePDFParams()\n            .addAsset(inputAsset1, getPageRangesForFirstFile())\n            .addAsset(inputAsset2, getPageRangesForSecondFile());\n\n        // Create a new job instance\n        const job = new CombinePDFJob({params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CombinePDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy result asset\'s content to it\n        const outputFilePath = "./combineFilesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream1?.destroy();\n        readStream2?.destroy();\n    }\n})();\n\nconst getPageRangesForFirstFile = () => {\n    // Specify which pages of the first file are to be included in the combined file.\n    const pageRangesForFirstFile = new PageRanges();\n    // Add page 1.\n    pageRangesForFirstFile.addSinglePage(1);\n    // Add page 2.\n    pageRangesForFirstFile.addSinglePage(2);\n    // Add pages 3 to 4.\n    pageRangesForFirstFile.addRange(3, 4);\n    return pageRangesForFirstFile;\n};\n\nconst getPageRangesForSecondFile = () => {\n    // Specify which pages of the second file are to be included in the combined file.\n    const pageRangesForSecondFile = new PageRanges();\n    // Add all pages including and after page 3.\n    pageRangesForSecondFile.addAllFrom(3);\n    return pageRangesForSecondFile;\n};\n')),(0,i.mdx)("h4",{id:"python-1"},"Python"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/combinepdf/combine_pdf_with_page_ranges.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass CombinePDFWithPageRanges:\n    def __init__(self):\n        try:\n            file = open('./combineFilesInput1.pdf', 'rb')\n            input_stream_1 = file.read()\n            file.close()\n\n            file = open('./combineFilesInput2.pdf', 'rb')\n            input_stream_2 = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            stream_assets = [StreamAsset(input_stream_1, PDFServicesMediaType.PDF),\n                             StreamAsset(input_stream_2, PDFServicesMediaType.PDF)]\n\n            assets = pdf_services.upload_assets(stream_assets)\n\n            page_ranges_for_first_file = self.get_page_range_for_first_file()\n            page_ranges_for_second_file = self.get_page_range_for_second_file()\n\n            # Create parameters for the job\n            combine_pdf_params = ((CombinePDFParams()\n                                  .add_asset(assets[0],page_ranges=page_ranges_for_first_file))\n                                  .add_asset(assets[1],page_ranges=page_ranges_for_second_file))\n\n            # Creates a new job instance\n            combine_pdf_job = CombinePDFJob(combine_pdf_params=combine_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(combine_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CombinePDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CombinePDFResult = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CombinePDFWithPageRanges.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_page_range_for_first_file() -> PageRanges:\n        # Specify which pages of the first file are to be included in the combined file\n        page_ranges_for_first_file = PageRanges()\n        # Add page 1\n        page_ranges_for_first_file.add_single_page(1)\n        # Add page 2\n        page_ranges_for_first_file.add_single_page(2)\n        # Add pages 3 to 4\n        page_ranges_for_first_file.add_range(3, 4)\n        return page_ranges_for_first_file\n\n    @staticmethod\n    def get_page_range_for_second_file() -> PageRanges:\n        # Specify which pages of the first file are to be included in the combined file\n        page_ranges_for_second_file = PageRanges()\n        # Add all pages including and after page 3\n        page_ranges_for_second_file.add_all_from(3)\n        return page_ranges_for_second_file\n\nif __name__ == \"__main__\":\n    CombinePDFWithPageRanges()\n")),(0,i.mdx)("h4",{id:"rest-api-2"},"REST API"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Combine-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/combinepdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assets": [\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2c4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 1,\n                    "end": 3\n                }\n            ]\n        },\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 2,\n                    "end": 4\n                }\n            ]\n        }\n    ]\n}\'\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-combine-pdf-md-e602ed5f447ed80f7402.js.map