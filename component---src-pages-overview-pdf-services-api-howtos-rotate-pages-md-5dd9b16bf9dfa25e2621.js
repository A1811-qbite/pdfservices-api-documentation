"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1016],{96802:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return g},default:function(){return u}});var a=t(87462),s=t(45987),o=(t(15007),t(64983)),r=t(91515);const i=["components"],g={},p=(c="CodeBlock",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var c;const d={_frontmatter:g},l=r.Z;function u(e){let{components:n}=e,t=(0,s.Z)(e,i);return(0,o.mdx)(l,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"rotate-pages"},"Rotate Pages"),(0,o.mdx)("p",null,"Rotate a page in an existing document."),(0,o.mdx)("h2",{id:"rest-api"},"REST API"),(0,o.mdx)("p",null,"See our public API Reference for ",(0,o.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Page-Manipulation"},"Rotate Pages.")),(0,o.mdx)("h2",{id:"rotate-pages-in-pdf"},"Rotate Pages in PDF"),(0,o.mdx)("p",null,"The rotate pages operation selectively rotates pages in PDF file. For\nexample, you can change portrait view to landscape view."),(0,o.mdx)("p",null,"Please refer the ",(0,o.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,o.mdx)(p,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.rotatepages.RotatePDFPages\n \n  public class RotatePDFPages {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(RotatePDFPages.class);\n \n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/rotatePagesInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // First set of page ranges for rotating the specified pages of the input PDF file.\n            PageRanges firstPageRange = getFirstPageRangeForRotation();\n\n            // Second set of page ranges for rotating the specified pages of the input PDF file.\n            PageRanges secondPageRange = getSecondPageRangeForRotation();\n\n            // Create parameters for the job\n            RotatePagesParams rotatePagesParams = RotatePagesParams.rotatePagesParamsBuilder()\n                    .withAngleToRotatePagesBy(Angle._90, firstPageRange)\n                    .withAngleToRotatePagesBy(Angle._180, secondPageRange)\n                    .build();\n\n            // Creates a new job instance\n            RotatePagesJob rotatePagesJob = new RotatePagesJob(asset, rotatePagesParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(rotatePagesJob);\n            PDFServicesResponse<RotatePagesResult> pdfServicesResponse = pdfServices.getJobResult(location, RotatePagesResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/rotatePagesOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/rotatePagesOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n            LOGGER.error("Exception encountered while executing operation", e);\n        }\n    }\n \n    private static PageRanges getFirstPageRangeForRotation() {\n        // Specify pages for rotation\n        PageRanges firstPageRange = new PageRanges();\n        // Add page 1\n        firstPageRange.addSinglePage(1);\n\n        // Add pages 3 to 4\n        firstPageRange.addRange(3, 4);\n        return firstPageRange;\n    }\n \n    private static PageRanges getSecondPageRangeForRotation() {\n        // Specify pages for rotation\n        PageRanges secondPageRange = new PageRanges();\n        // Add page 2\n        secondPageRange.addSinglePage(2);\n\n        return secondPageRange;\n    }\n  }\n')),(0,o.mdx)("h4",{id:"net"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd RotatePDFPages/\n// dotnet run RotatePDFPages.csproj\n\n  namespace RotatePDFPages\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            // Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                RotatePagesOperation rotatePagesOperation = RotatePagesOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"rotatePagesInput.pdf");\n                rotatePagesOperation.SetInput(sourceFileRef);\n \n                // Sets angle by 90 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges firstPageRange = GetFirstPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._90, firstPageRange);\n \n                // Sets angle by 180 degrees (in clockwise direction) for rotating the specified pages of\n                // the input PDF file.\n                PageRanges secondPageRange = GetSecondPageRangeForRotation();\n                rotatePagesOperation.SetAngleToRotatePagesBy(Angle._180, secondPageRange);\n \n                // Execute the operation.\n                FileRef result = rotatePagesOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/rotatePagesOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n \n        private static PageRanges GetFirstPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges firstPageRange = new PageRanges();\n            // Add page 1.\n            firstPageRange.AddSinglePage(1);\n \n            // Add pages 3 to 4.\n            firstPageRange.AddRange(3, 4);\n            return firstPageRange;\n        }\n \n        private static PageRanges GetSecondPageRangeForRotation()\n        {\n            // Specify pages for rotation.\n            PageRanges secondPageRange = new PageRanges();\n            // Add page 2.\n            secondPageRange.AddSinglePage(2);\n \n            return secondPageRange;\n        }\n    }\n  }\n')),(0,o.mdx)("h4",{id:"node-js"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/rotatepages/rotate-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PageRanges,\n    RotatePagesParams,\n    Angle,\n    RotatePagesJob,\n    RotatePagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./rotatePagesInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // First set of page ranges for rotating the specified pages of the input PDF file\n        const firstPageRange = getFirstPageRangeForRotation();\n\n        // Second set of page ranges for rotating the specified pages of the input PDF file\n        const secondPageRange = getSecondPageRangeForRotation();\n\n        // Create parameters for the job\n        const params = new RotatePagesParams()\n            .setAngleToRotatePagesBy(Angle._90, firstPageRange)\n            .setAngleToRotatePagesBy(Angle._180, secondPageRange);\n\n        // Creates a new job instance\n        const job = new RotatePagesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: RotatePagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset\'s content to it\n        const outputFilePath = "./rotatePagesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n\nfunction getFirstPageRangeForRotation() {\n    // Specify pages for rotation.\n    const firstPageRange = new PageRanges();\n    // Add page 1.\n    firstPageRange.addSinglePage(1);\n    // Add pages 3 to 4.\n    firstPageRange.addRange(3, 4);\n    return firstPageRange;\n}\n\nfunction getSecondPageRangeForRotation() {\n    // Specify pages for rotation.\n    const secondPageRange = new PageRanges();\n    // Add page 2.\n    secondPageRange.addSinglePage(2);\n    return secondPageRange;\n}\n')),(0,o.mdx)("h4",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/rotatepages/rotate_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass RotatePDFPages:\n    def __init__(self):\n        try:\n            file = open('rotatePagesInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # First set of page ranges for rotating the specified pages of the input PDF file.\n            first_page_range: PageRanges = self.get_first_page_range_for_rotation()\n\n            # Second set of page ranges for rotating the specified pages of the input PDF file.\n            second_page_range: PageRanges = self.get_second_page_range_for_rotation()\n\n            # Create parameters for the job\n            rotate_pages_params = RotatePagesParams()\n            rotate_pages_params.add_angle_to_rotate_for_page_ranges(angle=Angle.ANGLE_90, page_ranges=first_page_range)\n            rotate_pages_params.add_angle_to_rotate_for_page_ranges(angle=Angle.ANGLE_180, page_ranges=second_page_range)\n\n            # Creates a new job instance\n            reorder_pages_job = RotatePagesJob(input_asset=input_asset, rotate_pages_params=rotate_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(reorder_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, RotatePagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'rotatePagesOutput.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_first_page_range_for_rotation() -> PageRanges:\n        # Specify pages for rotation\n        first_page_range = PageRanges()\n        # Add page 1\n        first_page_range.add_single_page(1)\n        # Add pages 3 to 4\n        first_page_range.add_range(3, 4)\n        return first_page_range\n\n    @staticmethod\n    def get_second_page_range_for_rotation() -> PageRanges:\n        # Specify pages for rotation\n        second_page_range = PageRanges()\n        # Add page 2\n        second_page_range.add_single_page(2)\n        return second_page_range\n\n\nif __name__ == \"__main__\":\n    RotatePDFPages()\n\n")),(0,o.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Page-Manipulation\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/pagemanipulation\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718f",\n    "pageActions": [\n        {\n            "rotate": {\n                "angle": 90,\n                "pageRanges": [\n                    {\n                        "start": 1\n                    }\n                ]\n            }\n        },\n        {\n            "rotate": {\n                "angle": 180,\n                "pageRanges": [\n                    {\n                        "start": 2,\n                        "end": 2\n                    }\n                ]\n            }\n        }\n    ]\n}\'\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-rotate-pages-md-5dd9b16bf9dfa25e2621.js.map