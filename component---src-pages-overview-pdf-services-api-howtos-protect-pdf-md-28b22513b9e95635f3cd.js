"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2093],{11244:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return m}});var s=n(87462),r=n(45987),o=(n(15007),n(64983)),i=n(91515);const a=["components"],p={},c=(d="CodeBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var d;const l={_frontmatter:p},u=i.Z;function m(e){let{components:t}=e,n=(0,r.Z)(e,a);return(0,o.mdx)(u,(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"protect-pdf"},"Protect PDF"),(0,o.mdx)("p",null,"Secure a PDF file with a password encrypt the document. Set an owner password and restrictions on certain features like printing, editing and copying in the PDF document to prevent end users from modifying it."),(0,o.mdx)("p",null,"Support for AES-128 and AES-256 encryption on PDF files, with granular permissions for high and low quality printing and fill and sign form field restrictions."),(0,o.mdx)("h2",{id:"rest-api"},"REST API"),(0,o.mdx)("p",null,"See our public API Reference for ",(0,o.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Protect-PDF"},"Protect PDF")),(0,o.mdx)("h2",{id:"protect-pdfs-with-user-password"},"Protect PDFs with user password"),(0,o.mdx)("p",null,"You can password protect PDFs so that only users with a document open\npassword can open the file."),(0,o.mdx)("p",null,"Please refer the ",(0,o.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,o.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.protectpdf.ProtectPDF\n \n      public class ProtectPDF {\n        // Initialize the logger.\n        private static final Logger LOGGER = LoggerFactory.getLogger(ProtectPDF.class);\n     \n        public static void main(String[] args) {\n     \n            try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/protectPDFInput.pdf").toPath())) {\n                // Initial setup, create credentials instance\n                Credentials credentials = new ServicePrincipalCredentials(\n                        System.getenv("PDF_SERVICES_CLIENT_ID"),\n                        System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n    \n                // Creates a PDF Services instance\n                PDFServices pdfServices = new PDFServices(credentials);\n    \n                // Creates an asset(s) from source file(s) and upload\n                Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n    \n                // Create parameters for the job\n                ProtectPDFParams protectPDFParams = ProtectPDFParams.passwordProtectOptionsBuilder()\n                        .setUserPassword("password")\n                        .setEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                        .build();\n    \n                // Creates a new job instance\n                ProtectPDFJob protectPDFJob = new ProtectPDFJob(asset, protectPDFParams);\n    \n                // Submit the job and gets the job result\n                String location = pdfServices.submit(protectPDFJob);\n                PDFServicesResponse<ProtectPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, ProtectPDFResult.class);\n    \n                // Get content from the resulting asset(s)\n                Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n                StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n    \n                // Creates an output stream and copy stream asset\'s content to it\n                Files.createDirectories(Paths.get("output/"));\n                OutputStream outputStream = Files.newOutputStream(new File("output/protectPDFOutput.pdf").toPath());\n                LOGGER.info("Saving asset at output/protectPDFOutput.pdf");\n                IOUtils.copy(streamAsset.getInputStream(), outputStream);\n                outputStream.close();\n            } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n                LOGGER.error("Exception encountered while executing operation", ex);\n            }\n        }\n      }\n')),(0,o.mdx)("h4",{id:"net"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ProtectPDF/\n// dotnet run ProtectPDF.csproj\n\n  namespace ProtectPDF\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Build ProtectPDF options by setting a User Password and Encryption\n                // Algorithm (used for encrypting the PDF file).\n                ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.PasswordProtectOptionsBuilder()\n                        .SetUserPassword("encryptPassword")\n                        .SetEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                        .Build();\n \n                // Create a new operation instance\n                ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.CreateNew(protectPDFOptions);\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"protectPDFInput.pdf");\n                protectPDFOperation.SetInput(sourceFileRef);\n \n                // Execute the operation.\n                FileRef result = protectPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + "/output/protectPDFOutput.pdf");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n  }\n')),(0,o.mdx)("h4",{id:"node-js"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/protectpdf/protect-pdf.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ProtectPDFParams,\n    EncryptionAlgorithm,\n    ProtectPDFJob,\n    ProtectPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./protectPDFInput.pdf")\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new ProtectPDFParams({\n            userPassword: "password",\n            encryptionAlgorithm: EncryptionAlgorithm.AES_256\n        });\n\n        // Create a new job instance\n        const job = new ProtectPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ProtectPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = "./protectPDFOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,o.mdx)("h4",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/protectpdf/protect_pdf.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ProtectPDF:\n    def __init__(self):\n        try:\n            file = open('./protectPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            protect_pdf_params = PasswordProtectParams(\n                user_password='password',\n                encryption_algorithm=EncryptionAlgorithm.AES_256,\n                content_encryption=ContentEncryption.ALL_CONTENT,\n            )\n\n            # Creates a new job instance\n            protect_pdf_job = ProtectPDFJob(input_asset=input_asset, protect_pdf_params=protect_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(protect_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, ProtectPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/ProtectPDF.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ProtectPDF()\n")),(0,o.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Protect-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/protectpdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "passwordProtection": {\n        "userPassword": "user_password"\n    },\n    "encryptionAlgorithm": "AES_128",\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718"\n}\'\n')),(0,o.mdx)("h2",{id:"protect-pdfs-with-owner-password"},"Protect PDFs with owner password"),(0,o.mdx)("p",null,"You can secure a PDF file with owner/permissions password and set the\nrestriction on certain features like printing, editing and copying in\nthe PDF document. Refer to ",(0,o.mdx)("inlineCode",{parentName:"p"},"ContentEncryption")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"Permission")," in the\nAPI docs for a list of supported types of content to encrypt and types\nof document permissions."),(0,o.mdx)("p",null,"Please refer the ",(0,o.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,o.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java-1"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.protectpdf.ProtectPDFWithOwnerPassword\n \n public class ProtectPDFWithOwnerPassword {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ProtectPDFWithOwnerPassword.class);\n\n   public static void main(String[] args) {\n\n       try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/protectPDFInput.pdf").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv("PDF_SERVICES_CLIENT_ID"),\n                    System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n\n            // Create new permissions instance and add the required permissions\n            Permissions permissions = Permissions.createNew();\n            permissions.addPermission(Permission.PRINT_LOW_QUALITY);\n            permissions.addPermission(Permission.EDIT_DOCUMENT_ASSEMBLY);\n            permissions.addPermission(Permission.COPY_CONTENT);\n\n            // Create parameters for the job\n            ProtectPDFParams protectPDFParams = ProtectPDFParams.passwordProtectOptionsBuilder()\n                    .setOwnerPassword("password")\n                    .setPermissions(permissions)\n                    .setEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                    .setContentEncryption(ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)\n                    .build();\n\n            // Creates a new job instance\n            ProtectPDFJob protectPDFJob = new ProtectPDFJob(asset, protectPDFParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(protectPDFJob);\n            PDFServicesResponse<ProtectPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, ProtectPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/protectPDFWithOwnerPasswordOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/protectPDFWithOwnerPasswordOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n       } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n           LOGGER.error("Exception encountered while executing operation", ex);\n       }\n   }\n }\n     \n')),(0,o.mdx)("h4",{id:"net-1"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ProtectPDFWithOwnerPassword/\n// dotnet run ProtectPDFWithOwnerPassword.csproj\n\n namespace ProtectPDFWithOwnerPassword\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n               // Create an ExecutionContext using credentials.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n               // Create new permissions instance and add the required permissions\n               Permissions permissions = Permissions.CreateNew();\n               permissions.AddPermission(Permission.PRINT_LOW_QUALITY);\n               permissions.AddPermission(Permission.EDIT_DOCUMENT_ASSEMBLY);\n               permissions.AddPermission(Permission.COPY_CONTENT);\n\n               // Build ProtectPDF options by setting an Owner/Permissions Password, Permissions,\n               // Encryption Algorithm (used for encrypting the PDF file) and specifying the type of content to encrypt.\n               ProtectPDFOptions protectPDFOptions = ProtectPDFOptions.PasswordProtectOptionsBuilder()\n                   .SetOwnerPassword("password")\n                   .SetPermissions(permissions)\n                   .SetEncryptionAlgorithm(EncryptionAlgorithm.AES_256)\n                   .SetContentEncryption(ContentEncryption.ALL_CONTENT_EXCEPT_METADATA)\n                   .Build();\n\n               // Create a new operation instance\n               ProtectPDFOperation protectPDFOperation = ProtectPDFOperation.CreateNew(protectPDFOptions);\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"protectPDFInput.pdf");\n               protectPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = protectPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/protectPDFWithOwnerPasswordOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n   \n')),(0,o.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/protectpdf/protect-pdf-with-owner-password.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ProtectPDFParams,\n    EncryptionAlgorithm,\n    ProtectPDFJob,\n    ProtectPDFResult,\n    ContentEncryption,\n    Permissions,\n    Permission,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./protectPDFInput.pdf")\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create new permissions instance and add the required permissions\n        const permissions = new Permissions({\n            permissions: [\n                Permission.PRINT_LOW_QUALITY,\n                Permission.EDIT_DOCUMENT_ASSEMBLY,\n                Permission.COPY_CONTENT\n            ]\n        });\n\n        // Create parameters for the job\n        const params = new ProtectPDFParams({\n            ownerPassword: "password",\n            permissions: permissions,\n            encryptionAlgorithm: EncryptionAlgorithm.AES_256,\n            contentEncryption: ContentEncryption.ALL_CONTENT_EXCEPT_METADATA,\n        });\n\n        // Create a new job instance\n        const job = new ProtectPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ProtectPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = "./protectPDFWithOwnerPasswordOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,o.mdx)("h4",{id:"python-1"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/protectpdf/protect_pdf_with_owner_password.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ProtectPDFWithOwnerPassword:\n    def __init__(self):\n        try:\n            file = open('./protectPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create new permissions instance and add the required permissions\n            permissions = Permissions()\n            permissions.add_permission(Permission.PRINT_LOW_QUALITY)\n            permissions.add_permission(Permission.EDIT_DOCUMENT_ASSEMBLY)\n            permissions.add_permission(Permission.COPY_CONTENT)\n\n            # Create parameters for the job\n            protect_pdf_params = PasswordProtectParams(\n                owner_password='password',\n                encryption_algorithm=EncryptionAlgorithm.AES_256,\n                permissions=permissions,\n                content_encryption=ContentEncryption.ALL_CONTENT_EXCEPT_METADATA,\n            )\n\n            # Creates a new job instance\n            protect_pdf_job = ProtectPDFJob(input_asset=input_asset, protect_pdf_params=protect_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(protect_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, ProtectPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/ProtectPDFWithOwnerPassword.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ProtectPDFWithOwnerPassword()\n")),(0,o.mdx)("h4",{id:"rest-api-2"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Protect-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/protectpdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n  "passwordProtection": {\n    "ownerPassword": "owner_password"\n  },\n  "encryptionAlgorithm": "AES_256",\n  "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718"\n}\'\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-protect-pdf-md-28b22513b9e95635f3cd.js.map