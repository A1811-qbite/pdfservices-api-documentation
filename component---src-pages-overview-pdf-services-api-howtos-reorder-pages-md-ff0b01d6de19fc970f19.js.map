{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/reorder-pages.md"],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"mappings":"2OAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iBADR,kBAGA,eACE,GAAM,wBADR,yBAGA,2GAEA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCH,QAAQ,eAC9F,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,0mEAqDL,eACE,GAAM,OADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,0lFAsEL,eACE,GAAM,WADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,qhEAqDL,eACE,GAAM,YADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,gyEAqETN,EAAWO,gBAAiB","file":"component---src-pages-overview-pdf-services-api-howtos-reorder-pages-md-ff0b01d6de19fc970f19.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"reorder-pages\"\n    }}>{`Reorder Pages`}</h1>\n    <h2 {...{\n      \"id\": \"reorder-pages-in-pdf\"\n    }}>{`Reorder Pages in PDF`}</h2>\n    <p>{`The reorder pages operation moves pages from one location to another in\na PDF file.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.reorderpages.ReorderPDFPages\n \n public class ReorderPDFPages {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ReorderPDFPages.class);\n\n   public static void main(String[] args) {\n       try {\n           // Initial setup, create credentials instance.\n           Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                   .fromFile(\"pdfservices-api-credentials.json\")\n                   .build();\n\n           // Create an ExecutionContext using credentials and create a new operation instance.\n           ExecutionContext executionContext = ExecutionContext.create(credentials);\n           ReorderPagesOperation reorderPagesOperation = ReorderPagesOperation.createNew();\n\n           // Set operation input from a source file, along with specifying the order of the pages for\n           // rearranging the pages in a PDF file.\n           FileRef source = FileRef.createFromLocalFile(\"src/main/resources/reorderPagesInput.pdf\");\n           PageRanges pageRanges = getPageRangeForReorder();\n           reorderPagesOperation.setInput(source);\n           reorderPagesOperation.setPagesOrder(pageRanges);\n\n           // Execute the operation.\n           FileRef result = reorderPagesOperation.execute(executionContext);\n\n           // Save the result to the specified location.\n           result.saveAs(\"output/reorderPagesOutput.pdf\");\n\n       } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n           LOGGER.error(\"Exception encountered while executing operation\", e);\n       }\n   }\n\n   private static PageRanges getPageRangeForReorder() {\n       // Specify order of the pages for an output document.\n       PageRanges pageRanges = new PageRanges();\n       // Add pages 3 to 4.\n       pageRanges.addRange(3, 4);\n\n       // Add page 1.\n       pageRanges.addSinglePage(1);\n\n       return pageRanges;\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ReorderPages/\n// dotnet run ReorderPDFPages.csproj\n\n namespace ReorderPDFPages\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           // Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                               .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                               .Build();\n\n               // Create an ExecutionContext using credentials.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n               // Create a new operation instance\n               ReorderPagesOperation reorderPagesOperation = ReorderPagesOperation.CreateNew();\n\n               // Set operation input from a source file, along with specifying the order of the pages for\n               // rearranging the pages in a PDF file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"reorderPagesInput.pdf\");\n               reorderPagesOperation.SetInput(sourceFileRef);\n               PageRanges pageRanges = GetPageRangeForReorder();\n               reorderPagesOperation.SetPagesOrder(pageRanges);\n\n               // Execute the operation.\n               FileRef result = reorderPagesOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + \"/output/reorderPagesOutput.pdf\");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error(\"Exception encountered while executing operation\", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       private static PageRanges GetPageRangeForReorder()\n       {\n           // Specify order of the pages for an output document.\n           PageRanges pageRanges = new PageRanges();\n           // Add pages 3 to 4.\n           pageRanges.AddRange(3, 4);\n\n           // Add page 1.\n           pageRanges.AddSinglePage(1);\n\n           return pageRanges;\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n       }\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/reorderpages/reorder-pdf-pages.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n const getPageRangeForReorder = () => {\n   // Specify order of the pages for an output document.\n   const pageRanges = new PDFServicesSdk.PageRanges();\n\n   // Add pages 3 to 4.\n   pageRanges.addPageRange(3, 4);\n\n   // Add page 1.\n   pageRanges.addSinglePage(1);\n\n   return pageRanges;\n };\n try {\n   // Initial setup, create credentials instance.\n   const credentials = PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       reorderPagesOperation = PDFServicesSdk.ReorderPages.Operation.createNew();\n\n   // Set operation input from a source file, along with specifying the order of the pages for\n   // rearranging the pages in a PDF file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/reorderPagesInput.pdf');\n   const pageRanges = getPageRangeForReorder();\n   reorderPagesOperation.setInput(input);\n   reorderPagesOperation.setPagesOrder(pageRanges);\n\n   // Execute the operation and Save the result to the specified location.\n   reorderPagesOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/reorderPagesOutput.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-combinePDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"documentsIn\\\\\": [{\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 4\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile1\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1\n                }, {\n                    \\\\\"end\\\\\": 25\n                }, {\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile2\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }]\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-916ee91c156b42349a7847a7d564fb13\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOut\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"OutputFile\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile1=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile2=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}