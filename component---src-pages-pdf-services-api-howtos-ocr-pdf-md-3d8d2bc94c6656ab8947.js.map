{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/pdf-services-api/howtos/ocr-pdf.md"],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"mappings":"2OAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,WADR,YAGA,eACE,GAAM,wBADR,2BAGA,mPAGC,uBAAYC,WAAW,KAAvB,mBAHD,MAIA,yFAA0E,cAAGA,WAAW,IACpF,KAAQ,+BAD8D,iCAG1E,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,q2CAwCL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,gvDAoDL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,69CAsCL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,yEAD6B,UAGzC,eACE,GAAM,8BADR,+BAGA,wIAC4C,uBAAYA,WAAW,KAAvB,sBAD5C,UAEF,uBAAYA,WAAW,KAAvB,oBAFE,yEAIA,kNAGA,oBACE,eAAIA,WAAW,MAAf,ySAKA,eAAIA,WAAW,MAAf,8MAKF,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,q7DA+CL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,ymEA0DL,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,q3DA6CL,wDAAyC,cAAGA,WAAW,IACnD,KAAQ,yEAD6B,UAO7CH,EAAWO,gBAAiB","file":"component---src-pages-pdf-services-api-howtos-ocr-pdf-md-3d8d2bc94c6656ab8947.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"ocr-pdf\"\n    }}>{`OCR PDF`}</h1>\n    <h2 {...{\n      \"id\": \"text-recognition-ocr\"\n    }}>{`Text recognition (OCR)`}</h2>\n    <p>{`Optical character recognition (OCR) converts images to text so that you\nand your users can fully interact with the PDF file. After performing\nOCR, the PDF may be fully editable and searchable. The input format must\nbe `}<inlineCode parentName=\"p\">{`application/pdf`}</inlineCode>{`.`}</p>\n    <p>{`This sample defaults to the en-us locale. For other languages, see `}<a parentName=\"p\" {...{\n        \"href\": \"#ocr-with-explicit-language\"\n      }}>{`OCR with explicit language.`}</a></p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.ocrpdf.OcrPDF\n \n public class OcrPDF {\n \n  // Initialize the logger.\n  private static final Logger LOGGER = LoggerFactory.getLogger(OcrPDF.class);\n \n  public static void main(String[] args) {\n \n   try {\n \n    // Initial setup, create credentials instance.\n    Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n      .fromFile(\"pdfservices-api-credentials.json\")\n      .build();\n \n    //Create an ExecutionContext using credentials and create a new operation instance.\n    ExecutionContext executionContext = ExecutionContext.create(credentials);\n    OCROperation ocrOperation = OCROperation.createNew();\n \n    // Set operation input from a source file.\n    FileRef source = FileRef.createFromLocalFile(\"src/main/resources/ocrInput.pdf\");\n    ocrOperation.setInput(source);\n \n    // Execute the operation\n    FileRef result = ocrOperation.execute(executionContext);\n \n    // Save the result at the specified location\n    result.saveAs(\"output/ocrOutput.pdf\");\n \n   } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n    LOGGER.error(\"Exception encountered while executing operation\", ex);\n   }\n  }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-1\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd OcrPDF/\n// dotnet run OcrPDF.csproj\n\n namespace OcrPDF\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n         Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                 .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                 .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         OCROperation ocrOperation = OCROperation.CreateNew();\n\n         // Set operation input from a source file.\n         FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"ocrInput.pdf\");\n         ocrOperation.SetInput(sourceFileRef);\n\n         // Execute the operation.\n         FileRef result = ocrOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + \"/output/ocrOperationOutput.pdf\");\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error(\"Exception encountered while executing operation\", ex);\n       }\n       // Catch more errors here. . .\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n     }\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-2\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/ocr/ocr-pdf.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       ocrOperation = PDFServicesSdk.OCR.Operation.createNew();\n\n   // Set operation input from a source file.\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/ocrInput.pdf');\n   ocrOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   ocrOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/ocrOutput.pdf'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n`}</code></pre>\n    <p>{`The REST API example can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://documentcloud.adobe.com/document-services/index.html#post-ocr\"\n      }}>{`here`}</a></p>\n    <h2 {...{\n      \"id\": \"ocr-with-explicit-language\"\n    }}>{`OCR with explicit language`}</h2>\n    <p>{`You can perform OCR on files in other languages, including German,\nFrench, Danish, and other languages. Refer to `}<inlineCode parentName=\"p\">{`OCRSupportedLocale`}</inlineCode>{` and\n`}<inlineCode parentName=\"p\">{`OCRSupportedType`}</inlineCode>{` in the API docs for a list of supported OCR locales\nand OCR types.`}</p>\n    <p>{`As shown in the OcrPDFWithOptions sample, when you make a PDF file\nsearchable, you specify both the locale (language) and the type. There\nare two types which produce a different result:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`One type ensures that text is searchable and selectable, but\nmodifies the original image during the cleanup process (for example,\ndeskews it) before placing an invisible text layer over it. This\ntype removes unwanted artifacts and may result in a more readable\ndocument in some scenarios.`}</li>\n      <li parentName=\"ul\">{`The second (EXACT) type, also overlays a searchable text layer over\nthe original image, but in this case, the original image is\nunchanged. This type produces maximum fidelity to the original\nimage.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"Java, .NET, NodeJS\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"sample-3\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java Dexec.mainClass=com.adobe.pdfservices.operation.samples.ocrpdf.OcrPDFWithOptions\n \n  public class OcrPDFWithOptions {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(OcrPDFWithOptions.class);\n \n    public static void main(String[] args) {\n \n        try {\n \n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n \n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n            OCROperation ocrOperation = OCROperation.createNew();\n \n            // Set operation input from a source file.\n            FileRef source = FileRef.createFromLocalFile(\"src/main/resources/ocrInput.pdf\");\n            ocrOperation.setInput(source);\n \n            // Build OCR options from supported locales and OCR-types and set them into the operation\n            OCROptions ocrOptions = OCROptions.ocrOptionsBuilder()\n                    .withOCRLocale(OCRSupportedLocale.EN_US)\n                    .withOCRType(OCRSupportedType.SEARCHABLE_IMAGE_EXACT)\n                    .build();\n            ocrOperation.setOptions(ocrOptions);\n \n            // Execute the operation\n            FileRef result = ocrOperation.execute(executionContext);\n \n            // Save the result at the specified location\n            result.saveAs(\"output/ocrWithOptionsOutput.pdf\");\n \n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error(\"Exception encountered while executing operation\", ex);\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-4\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd OcrPDFWithOptions\n// dotnet run OcrPDFWithOptions.csproj\n\n namespace OcrPDFWithOptions\n {\n  class Program\n  {\n    private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n    static void Main()\n    {\n      //Configure the logging\n      ConfigureLogging();\n      try\n      {\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                .Build();\n \n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.Create(credentials);\n        OCROperation ocrOperation = OCROperation.CreateNew();\n \n        // Set operation input from a source file.\n        FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"ocrWithOptionsInput.pdf\");\n        ocrOperation.SetInput(sourceFileRef);\n        // Build OCR options from supported locales and OCR-types and set them into the operation\n        OCROptions ocrOptions = OCROptions.OCROptionsBuilder()\n            .WithOcrLocale(OCRSupportedLocale.EN_US)\n            .WithOcrType(OCRSupportedType.SEARCHABLE_IMAGE_EXACT)\n            .Build();\n        ocrOperation.SetOptions(ocrOptions);\n \n        // Execute the operation.\n        FileRef result = ocrOperation.Execute(executionContext);\n \n        // Save the result to the specified location.\n        result.SaveAs(Directory.GetCurrentDirectory() + \"/output/ocrOperationWithOptionsOutput.pdf\");\n      }\n      catch (ServiceUsageException ex)\n      {\n        log.Error(\"Exception encountered while executing operation\", ex);\n      }\n      // Catch more errors here . . .\n    }\n \n    static void ConfigureLogging()\n    {\n      ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n      XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n    }\n  }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-5\"\n    }}>{`Sample`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/ocr/ocr-pdf.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    //Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        ocrOperation = PDFServicesSdk.OCR.Operation.createNew();\n \n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/ocrInput.pdf');\n    ocrOperation.setInput(input);\n \n    // Provide any custom configuration options for the operation.\n    const options = new PDFServicesSdk.OCR.options.OCROptions.Builder()\n        .withOcrType(PDFServicesSdk.OCR.options.OCRSupportedType.SEARCHABLE_IMAGE_EXACT)\n        .withOcrLang(PDFServicesSdk.OCR.options.OCRSupportedLocale.EN_US)\n        .build();\n    ocrOperation.setOptions(options);\n \n    // Execute the operation and Save the result to the specified location.\n    ocrOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/ocrWithOptionsOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <p>{`The REST API example can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://documentcloud.adobe.com/document-services/index.html#post-ocr\"\n      }}>{`here`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}