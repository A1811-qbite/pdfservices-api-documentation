{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-export-pdf-md-3f878851581b9d9acab9.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/export-pdf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"export-pdf\"\n    }}>{`Export PDF`}</h1>\n    <p>{`Export a source PDF file into doc, docx, jpeg, png, pptx, rtf, xlsx.`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`REST API`}</h2>\n    <p>{`See our public API Reference for : `}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../apis/#tag/Export-PDF\"\n        }}>{`Export PDF to Office format or text files`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../apis/#tag/PDF-To-Images\"\n        }}>{`Export PDF to Images`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"export-a-pdf\"\n    }}>{`Export a PDF`}</h2>\n    <p>{`The sample below converts a PDF file into a number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\"\n      }}>{`supported\nformats`}</a>{`\nsuch as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Microsoft Office file formats`}</li>\n      <li parentName=\"ul\">{`Text files`}</li>\n    </ul>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCX\n\npublic class ExportPDFToDOCX {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCX.class);\n\n   public static void main(String[] args) {\n\n     try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/exportPDFInput.pdf\").toPath())) {\n        // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n\n        // Creates an asset(s) from source file(s) and upload\n        Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n        // Create parameters for the job\n        ExportPDFParams exportPDFParams = ExportPDFParams.exportPDFParamsBuilder(ExportPDFTargetFormat.DOCX)\n                .build();\n\n        // Creates a new job instance\n        ExportPDFJob exportPDFJob = new ExportPDFJob(asset, exportPDFParams);\n\n        // Submit the job and gets the job result\n        String location = pdfServices.submit(exportPDFJob);\n        PDFServicesResponse<ExportPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, ExportPDFResult.class);\n\n        // Get content from the resulting asset(s)\n        Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n        StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n        // Creates an output stream and copy stream asset's content to it\n        Files.createDirectories(Paths.get(\"output/\"));\n        OutputStream outputStream = Files.newOutputStream(new File(\"output/exportPdfOutput.docx\").toPath());\n        LOGGER.info(\"Saving asset at output/exportPdfOutput.docx\");\n        IOUtils.copy(streamAsset.getInputStream(), outputStream);\n     } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n       LOGGER.error(\"Exception encountered while executing operation\", ex);\n     }\n   }\n }\n  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocx.csproj\n\n namespace ExportPDFToDocx\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPdfOutput.docx\");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-pdf-to-docx.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ExportPDFJob,\n    ExportPDFParams,\n    ExportPDFTargetFormat,\n    ExportPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./exportPDFInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new ExportPDFParams({\n            targetFormat: ExportPDFTargetFormat.DOCX\n        });\n\n        // Creates a new job instance\n        const job = new ExportPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ExportPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset's content to it\n        const outputFilePath = \"./exportPDFToDOCXOutput.docx\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/exportpdf/export_pdf_to_docx.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ExportPDFToDOCX:\n    def __init__(self):\n        try:\n            file = open('./exportPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            export_pdf_params = ExportPDFParams(target_format=ExportPDFTargetFormat.DOCX)\n\n            # Creates a new job instance\n            export_pdf_job = ExportPDFJob(input_asset=input_asset, export_pdf_params=export_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(export_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, ExportPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/ExportPDFToDOCX.docx'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ExportPDFToDOCX()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/exportpdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"docx\"\n}'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-file-to-a-docx-file-apply-ocr-on-the-pdf-file\"\n    }}>{`Export a PDF file to a DOCX file (apply OCR on the PDF file)`}</h2>\n    <p>{`The sample below converts a PDF file into a number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\"\n      }}>{`supported\nformats`}</a>{`\nsuch as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Microsoft Office file formats`}</li>\n      <li parentName=\"ul\">{`Text files`}</li>\n    </ul>\n    <p>{`OCR processing is also performed on the input PDF file to extract text from images in the document.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCXWithOCROption\n\npublic class ExportPDFToDOCXWithOCROption {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCXWithOCROption.class);\n\n    public static void main(String[] args) {\n\n        try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/exportPDFInput.pdf\").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                    System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Create parameters for the job\n            ExportPDFParams exportPDFParams = ExportPDFParams.exportPDFParamsBuilder(ExportPDFTargetFormat.DOCX)\n                    .withExportOCRLocale(ExportOCRLocale.EN_US)\n                    .build();\n\n            // Creates a new job instance\n            ExportPDFJob exportPDFJob = new ExportPDFJob(asset, exportPDFParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(exportPDFJob);\n            PDFServicesResponse<ExportPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, ExportPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset's content to it\n            Files.createDirectories(Paths.get(\"output/\"));\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/exportPDFWithOCROptionsOutput.docx\").toPath());\n            LOGGER.info(\"Saving asset at output/exportPDFWithOCROptionsOutput.docx\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n        } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n            LOGGER.error(\"Exception encountered while executing operation\", ex);\n        }\n    }\n}  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocxWithOCROption.csproj\n\n namespace ExportPDFToDocxWithOCROption\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n\n          // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n          ExportPDFOptions exportPdfOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n          exportPdfOperation.SetOptions(exportPdfOptions);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + \"/output/ExportPDFToDOCXWithOCROption.docx\");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-docx-to-pdf-with-ocr-options.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ExportPDFParams,\n    ExportPDFTargetFormat,\n    ExportOCRLocale,\n    ExportPDFJob,\n    ExportPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./exportPDFInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new ExportPDFParams({\n            targetFormat: ExportPDFTargetFormat.DOCX,\n            ocrLocale: ExportOCRLocale.EN_US\n        });\n\n        // Creates a new job instance\n        const job = new ExportPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ExportPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset's content to it\n        const outputFilePath = \"./ExportPDFToDOCXWithOCROption.docx\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-1\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/exportpdf/export_pdf_to_docx_with_ocr_option.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ExportPDFToDOCXWithOCROption:\n    def __init__(self):\n        try:\n            file = open('./exportPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            export_pdf_params = ExportPDFParams(target_format=ExportPDFTargetFormat.DOCX, ocr_lang=ExportOCRLocale.EN_US)\n\n            # Creates a new job instance\n            export_pdf_job = ExportPDFJob(input_asset=input_asset, export_pdf_params=export_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(export_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, ExportPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/ExportPDFToDOCXWithOCROption.docx'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ExportPDFToDOCXWithOCROption()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-2\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/exportpdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"docx\",\n    \"ocrLang\": \"en-US\"\n}'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-to-images\"\n    }}>{`Export a PDF to images`}</h2>\n    <p>{`The sample below converts a PDF file's pages to a list of JPEG images.\nEach image file name ends with \"`}{`_`}{`\\\\<unpadded`}{`_`}{`page`}{`_`}{`index`}{`_`}{`number`}{`>`}{`\". For example, a PDF file with 15\npages will generate 15 image files. The first file's name ends with\n\"`}{`_`}{`1\" and the last file's name ends with \"`}{`_`}{`15\".`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEG\n\n public class ExportPDFToJPEG {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEG.class);\n\n   public static void main(String[] args) {\n     try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/exportPDFToImageInput.pdf\").toPath())) {\n        // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n\n        // Creates an asset(s) from source file(s) and upload\n        Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n        // Create parameters for the job\n        ExportPDFToImagesParams exportPDFToImagesParams = ExportPDFToImagesParams.exportPDFToImagesParamsBuilder(\n                        ExportPDFToImagesTargetFormat.JPEG, ExportPDFToImagesOutputType.LIST_OF_PAGE_IMAGES).build();\n\n        // Creates a new job instance\n        ExportPDFToImagesJob exportPDFToImagesJob = new ExportPDFToImagesJob(asset, exportPDFToImagesParams);\n\n        // Submit the job and gets the job result\n        String location = pdfServices.submit(exportPDFToImagesJob);\n        PDFServicesResponse<ExportPDFToImagesResult> pdfServicesResponse = pdfServices.getJobResult(location, ExportPDFToImagesResult.class);\n\n        // Get content from the resulting asset(s)\n        List<Asset> resultAssets = pdfServicesResponse.getResult().getAssets();\n        \n        Files.createDirectories(Paths.get(\"output/\"));\n        int index = 0;\n        for(Asset resultAsset : resultAssets) {\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creates an output stream and copy stream asset's content to it\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/exportPDFToImagesOutput_\" + index + \".jpeg\").toPath());\n            LOGGER.info(\"Saving asset at output/exportPDFToImagesOutput_\" + index + \".jpeg\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            index++;\n        }\n     } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n       LOGGER.error(\"Exception encountered while executing operation\", ex);\n     }\n   }\n }\n  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-2\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEG/\n// dotnet run ExportPDFToJPEG.csproj\n\n namespace ExportPDFToJPEG\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.JPEG);\n \n          // Set operation input from a source file.\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfToImageInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);  \n \n          // Save the result to the specified location.\n          int index = 0;\n          foreach (FileRef fileRef in result)\n            {\n                fileRef.SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPDFToImagesOutput_\" + index + \".jpeg\");\n                index++;\n            }\n        }    \n        \n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-2\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ExportPDFToImagesJob,\n    ExportPDFToImagesTargetFormat,\n    ExportPDFToImagesOutputType,\n    ExportPDFToImagesParams,\n    ExportPDFToImagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./exportPDFToImageInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new ExportPDFToImagesParams({\n            targetFormat: ExportPDFToImagesTargetFormat.JPEG,\n            outputType: ExportPDFToImagesOutputType.LIST_OF_PAGE_IMAGES\n        });\n\n        // Creates a new job instance\n        const job = new ExportPDFToImagesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ExportPDFToImagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAssets = pdfServicesResponse.result.assets;\n\n        for (let i = 0; i < resultAssets.length; i++) {\n            const _outputFilePath = \"./exportPDFToImageOutput_\\${i}.jpeg\";\n            console.log(\\`Saving asset at \\${_outputFilePath}\\`);\n\n            const streamAsset = await pdfServices.getContent({asset: resultAssets[i]});\n\n            // Creates an output stream and copy stream asset's content to it\n            const outputStream = fs.createWriteStream(_outputFilePath);\n            streamAsset.readStream.pipe(outputStream);\n        }\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-2\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python python src/exportpdftoimages/export_pdf_to_jpeg.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ExportPDFtoJPEG:\n    def __init__(self):\n        try:\n            file = open('./exportPDFToImageInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            export_pdf_to_images_params = ExportPDFtoImagesParams(\n                export_pdf_to_images_target_format=ExportPDFToImagesTargetFormat.JPEG,\n                export_pdf_to_images_output_type=ExportPDFToImagesOutputType.LIST_OF_PAGE_IMAGES\n            )\n\n            # Creates a new job instance\n            export_pdf_to_images_job = ExportPDFtoImagesJob(\n                input_asset=input_asset,\n                export_pdf_to_images_params=export_pdf_to_images_params\n            )\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(export_pdf_to_images_job)\n            pdf_services_response = pdf_services.get_job_result(location, ExportPDFtoImagesResult)\n\n            # Get content from the resulting asset(s)\n            result_assets = pdf_services_response.get_result().get_assets()\n\n            output_file_path = 'output/ExportPDFToImages'\n\n            for(asset_index, asset) in enumerate(result_assets):\n                save_output_file_path = f\"{output_file_path}_{asset_index}.jpeg\"\n                stream_asset: StreamAsset = pdf_services.get_content(asset)\n                # Creates an output stream and copy stream asset's content to it\n                with open(save_output_file_path, \"wb\") as file:\n                    file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ExportPDFtoJPEG()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-3\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdftoimages' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"jpeg\",\n    \"outputType\": \"listOfPageImages\"\n}'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-to-zip-of-page-images\"\n    }}>{`Export a PDF to zip of page images`}</h2>\n    <p>{`The sample below converts a PDF file to one or more jpeg or png images. The resulting file is a ZIP archive containing one image per page of the source PDF file.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEGZip\n\n  public class ExportPDFToJPEGZip {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEGZip.class);\n\n    public static void main(String[] args) {\n      try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/exportPDFToImagesInput.pdf\").toPath())) {\n        // Initial setup, create credentials instance\n        Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n        // Creates a PDF Services instance\n        PDFServices pdfServices = new PDFServices(credentials);\n\n        // Creates an asset(s) from source file(s) and upload\n        Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n        // Create parameters for the job\n        ExportPDFToImagesParams exportPDFToImagesParams = ExportPDFToImagesParams.exportPDFToImagesParamsBuilder(\n                        ExportPDFToImagesTargetFormat.JPEG, ExportPDFToImagesOutputType.ZIP_OF_PAGE_IMAGES).build();\n\n        // Creates a new job instance\n        ExportPDFToImagesJob exportPDFToImagesJob = new ExportPDFToImagesJob(asset, exportPDFToImagesParams);\n\n        // Submit the job and gets the job result\n        String location = pdfServices.submit(exportPDFToImagesJob);\n        PDFServicesResponse<ExportPDFToImagesResult> pdfServicesResponse = pdfServices.getJobResult(location, ExportPDFToImagesResult.class);\n\n        // Get content from the resulting asset(s)\n        List<Asset> resultAssets = pdfServicesResponse.getResult().getAssets();\n        StreamAsset streamAsset = pdfServices.getContent(resultAssets.get(0));\n\n        LOGGER.info(\"Media type of the received asset is \"+ streamAsset.getMimeType());\n\n        // Creates an output stream and copy stream asset's content to it\n        Files.createDirectories(Paths.get(\"output/\"));\n        OutputStream outputStream = Files.newOutputStream(new File(\"output/exportPDFToJPEGOutput.zip\").toPath());\n        LOGGER.info(\"Saving asset at output/exportPDFToJPEGOutput.zip\");\n        IOUtils.copy(streamAsset.getInputStream(), outputStream);\n      } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n        LOGGER.error(\"Exception encountered while executing operation\", ex);\n      }\n    }\n  }  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-3\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEGZip/\n// dotnet run ExportPDFToJPEGZip.csproj\n\nnamespace\n{\n    class Program ExportPDFToJPEGZip\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                        .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                        .Build();\n\n                //Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                ExportPDFToImagesOperation exportPDFToImagesOperation = ExportPDFToImagesOperation.CreateNew(ExportPDFToImagesTargetFormat.JPEG);\n\n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPDFToImagesInput.pdf\");\n                exportPDFToImagesOperation.SetInput(sourceFileRef);\n\n                // Set the output type to create zip of images.\n                exportPDFToImagesOperation.SetOutputType(ExportPDFToImagesOutputType.ZIP_OF_IMAGES);\n\n                // Execute the operation.\n                List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);\n\n                // Save the result to the specified location.\n                results[0].SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPDFToJPEGOutput.zip\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here. . .\n        }\n\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-3\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg-zip.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    ExportPDFToImagesParams,\n    ExportPDFToImagesTargetFormat,\n    ExportPDFToImagesOutputType,\n    ExportPDFToImagesJob,\n    ExportPDFToImagesResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./exportPDFToImageInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Create parameters for the job\n        const params = new ExportPDFToImagesParams({\n            targetFormat: ExportPDFToImagesTargetFormat.JPEG,\n            outputType: ExportPDFToImagesOutputType.ZIP_OF_PAGE_IMAGES\n        });\n\n        // Creates a new job instance\n        const job = new ExportPDFToImagesJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: ExportPDFToImagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.assets;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset[0]});\n\n        // Creates an output stream and copy stream asset's content to it\n        const outputFilePath = \"./exportPDFToJPEGOutput.zip\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-3\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/exportpdftoimages/export_pdf_to_jpeg_zip.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ExportPDFToJPEGZip:\n    def __init__(self):\n        try:\n            file = open('./exportPDFToImageInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream, mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            export_pdf_to_images_params = ExportPDFtoImagesParams(\n                export_pdf_to_images_target_format=ExportPDFToImagesTargetFormat.JPEG,\n                export_pdf_to_images_output_type=ExportPDFToImagesOutputType.ZIP_OF_PAGE_IMAGES\n            )\n\n            # Creates a new job instance\n            export_pdf_to_images_job = ExportPDFtoImagesJob(\n                input_asset=input_asset,\n                export_pdf_to_images_params=export_pdf_to_images_params\n            )\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(export_pdf_to_images_job)\n            pdf_services_response = pdf_services.get_job_result(location, ExportPDFtoImagesResult)\n\n            # Get content from the resulting asset(s)\n            result_assets = pdf_services_response.get_result().get_assets()\n            stream_asset: StreamAsset = pdf_services.get_content(result_assets[0])\n\n            output_file_path = 'output/ExportPDFToJPEGZip.zip'\n\n            # Creates an output stream and copy stream asset's content to it\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ExportPDFToJPEGZip()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-4\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdftoimages' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"jpeg\",\n    \"outputType\": \"zipOfPageImages\"\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}