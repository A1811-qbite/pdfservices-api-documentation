"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8417],{77661:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return g}});var a=t(87462),i=t(45987),s=(t(15007),t(64983)),r=t(91515);const o=["components"],l={},c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",n)},p=c("InlineAlert"),d=c("CodeBlock"),m={_frontmatter:l},u=r.Z;function g(e){let{components:n}=e,t=(0,i.Z)(e,o);return(0,s.mdx)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"pdf-electronic-seal-api"},"PDF Electronic Seal API"),(0,s.mdx)("h2",{id:"api-parameters"},"API Parameters"),(0,s.mdx)("h3",{id:"signature-format-signatureformat"},"Signature Format (",(0,s.mdx)("em",{parentName:"h3"},"signatureFormat"),")"),(0,s.mdx)("p",null,"Specifies a supported digital signature format:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"PADES : This is the latest and improved signature format which is more strict, concrete, and secure. For details, see ",(0,s.mdx)("a",{href:"/pdfservices-api-documentation/assets/5b15559b96303194340b99820d3a70fa/PDF_ISO_32000-2.pdf",target:"_blank"},"ISO 32000-2")," and ",(0,s.mdx)("a",{href:"/pdfservices-api-documentation/assets/70fef5ab21077e8ef86384a148080a0d/ETSI_EN_319_142-1.pdf",target:"_blank"},"ETSI EN 319 142-1"),"."),(0,s.mdx)("li",{parentName:"ul"},"PKCS7 : This signature format is less stringent than PADES since it permits more PDF changes without invalidating the digital signature. This is the default signature format. For details, see ",(0,s.mdx)("a",{href:"/pdfservices-api-documentation/assets/35e4369068f86065372c18787171a17e/PDF_ISO_32000-1.pdf",target:"_blank"},"ISO 32000-1"),".")),(0,s.mdx)("h3",{id:"document-level-permission-documentlevelpermission"},"Document Level Permission (",(0,s.mdx)("em",{parentName:"h3"},"documentLevelPermission"),")"),(0,s.mdx)("p",null,"Specifies the DocMDP (i.e. Document Modification Detection and Prevention) permissions. These permissions are applied to the output electronically sealed document."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"NO_CHANGES_ALLOWED : No changes to the document are permitted. Any change to the document will invalidate the signature."),(0,s.mdx)("li",{parentName:"ul"},"FORM_FILLING : Allowed changes are filling in forms, instantiating page templates, and performing approval signatures. This is also the default document level permission, if not specified by the user."),(0,s.mdx)("li",{parentName:"ul"},"FORM_FILLING_AND_ANNOTATIONS : In addition to above, annotation creation, deletion, and modification are also allowed.")),(0,s.mdx)(p,{slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"Long Term Validation (LTV) information of Timestamp Certificates (if using Trusted Timestamping) is embedded in the PDF document only if Document Level Permission is set as FORM_FILLING or FORM_FILLING_AND_ANNOTATIONS."),(0,s.mdx)("h3",{id:"tsp-credential-information-csccredentialoptions--required"},"TSP Credential Information (",(0,s.mdx)("em",{parentName:"h3"},"cscCredentialOptions"),") : ",(0,s.mdx)("strong",{parentName:"h3"},"Required")),(0,s.mdx)("p",null,"TSP parameters encapsulate the sealer's ",(0,s.mdx)("a",{parentName:"p",href:"../../pdf-electronic-seal-api/gettingstarted/#step-1-procure-digital-certificate-credentials"},"certificate credential")," as well as the associated authentication and authorization data."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSP Name"),"  (",(0,s.mdx)("em",{parentName:"p"},"providerName"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the name of the Trust Service Provider used to generate the certificate. Presently, only TSPs supporting the OAuth 2.0 client credential authorization flow are supported. The table below provides the provider name mapping for each supported Trust Service Provider.\n",(0,s.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"39.6875%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/5530d/provider_mapping_ss.webp 320w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0c8fb/provider_mapping_ss.webp 640w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/94b1e/provider_mapping_ss.webp 1280w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0b34d/provider_mapping_ss.webp 1920w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/5b50e/provider_mapping_ss.webp 2160w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/dd4a7/provider_mapping_ss.png 320w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0f09e/provider_mapping_ss.png 640w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/bbbf7/provider_mapping_ss.png 1280w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/ac7a9/provider_mapping_ss.png 1920w","/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/36aa2/provider_mapping_ss.png 2160w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/bbbf7/provider_mapping_ss.png",alt:"TSP Name Mapping",title:"TSP Name Mapping",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    "))),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSP Credential Id"),"  (",(0,s.mdx)("em",{parentName:"p"},"credentialId"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the Digital ID stored with the TSP that should be used for sealing.")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSP Authorization Context"),"  (",(0,s.mdx)("em",{parentName:"p"},"authorizationContext"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Encapsulates the authorization data required to communicate with the TSPs."),(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Access Token"),"  (",(0,s.mdx)("em",{parentName:"li"},"accessToken"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : Specifies the access token used to authorize access to the CSC provider hosted APIs."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Token Type")," (",(0,s.mdx)("em",{parentName:"li"},"tokenType"),'): Specifies the type of access token. Default value is "Bearer".'))),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSP Credential Authorization Parameter"),"  (",(0,s.mdx)("em",{parentName:"p"},"credentialAuthParameters"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Encapsulates the credential authorization information required to authorize access to their digital certificate."),(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"PIN"),"  (",(0,s.mdx)("em",{parentName:"li"},"pin"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : Specifies the PIN associated with TSP provided credential ID.")))),(0,s.mdx)("h3",{id:"tsa-information-tsaoptions-"},"TSA Information (",(0,s.mdx)("em",{parentName:"h3"},"tsaOptions"),") :"),(0,s.mdx)("p",null,"TSA parameters encapsulate the ",(0,s.mdx)("a",{parentName:"p",href:"../../pdf-electronic-seal-api/gettingstarted/#step-2-optional-procure-timestamping-url-and-credentials"},"timestamping URL and credentials"),"."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSA URL"),"  (",(0,s.mdx)("em",{parentName:"p"},"url"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the TSA URL to be used for getting timestamp token.")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"TSA Credential Authorization Parameter"),"  (",(0,s.mdx)("em",{parentName:"p"},"credentialAuthParameters"),") : Encapsulates the credential information required to authenticate the TSA URL."),(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"TSA Username"),"  (",(0,s.mdx)("em",{parentName:"li"},"username"),") : Specify the username for authenticating TSA URL."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"TSA Password"),"  (",(0,s.mdx)("em",{parentName:"li"},"password"),") : Specify the password for authenticating TSA URL.")))),(0,s.mdx)("h3",{id:"seal-field-parameters---sealfieldoptions--required"},"Seal Field Parameters   (",(0,s.mdx)("em",{parentName:"h3"},"sealFieldOptions"),") : ",(0,s.mdx)("strong",{parentName:"h3"},"Required")),(0,s.mdx)("p",null,"The seal field parameters are required to create a new signature field or use an existing signature field."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"Field Name"),"  (",(0,s.mdx)("em",{parentName:"p"},"fieldName"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the signature field's name. This must be a non-empty string. If signature field with this field name already exists, that field is used. else a signature field with this name will be created.")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"Visible")," (",(0,s.mdx)("em",{parentName:"p"},"visible"),"): Specifies whether the signature field should be visible or hidden. The default value of ",(0,s.mdx)("inlineCode",{parentName:"p"},"true")," creates a visible seal.")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"Page Number")," (",(0,s.mdx)("em",{parentName:"p"},"pageNumber"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the page number to which the signature field should be attached. Page numbers are 1-based. It is only ",(0,s.mdx)("b",null,"required")," if the signature field needs to be visible and, it does not exist in the pdf document. If this is provided along with the signature field then the page number should be same on which signature field is present in the document, else an error is thrown. This parameter will be ignored in case of invisible signature field.")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"Location")," (",(0,s.mdx)("em",{parentName:"p"},"location"),") : ",(0,s.mdx)("strong",{parentName:"p"},"Required")," : Specifies the coordinates of the seal appearance's bounding box in default PDF user space units. The location is only ",(0,s.mdx)("b",null,"required")," if the signature field does not exist in the pdf document. If this is provided along with the existing signature field, then it is ignored. This parameter will also be ignored for invisible signature field."),(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Left")," (",(0,s.mdx)("em",{parentName:"li"},"left"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : The left x-coordinate"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Bottom")," (",(0,s.mdx)("em",{parentName:"li"},"bottom"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : The bottom y-coordinate"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Right")," (",(0,s.mdx)("em",{parentName:"li"},"right"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : The right x-coordinate"),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Top")," (",(0,s.mdx)("em",{parentName:"li"},"top"),") : ",(0,s.mdx)("strong",{parentName:"li"},"Required")," : The top y-coordinate")))),(0,s.mdx)("p",null,"To add the signature field explicitly, see ",(0,s.mdx)("a",{parentName:"p",href:"https://www.adobe.com/sign/hub/how-to/add-a-signature-block-to-pdf"},"how to place a signature field in a PDF"),"."),(0,s.mdx)("h3",{id:"seal-appearance-parameters-sealappearanceoptions"},"Seal Appearance Parameters (",(0,s.mdx)("em",{parentName:"h3"},"sealAppearanceOptions"),")"),(0,s.mdx)("p",null,"Specifies seal field appearance parameters. These are an enumerated set of display items: NAME, DATE, DISTINGUISHED_NAME, LABELS and SEAL_IMAGE."),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("strong",{parentName:"p"},"Display Options"),"  (",(0,s.mdx)("em",{parentName:"p"},"displayOptions"),"): Specifies the information to display in the seal. NAME and LABELS are the default values."),(0,s.mdx)("ul",{parentName:"li"},(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"NAME"),": Specifies that the certificate owner's name should be displayed.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1180px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"23.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/5530d/name_ss.webp 320w","/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/0c8fb/name_ss.webp 640w","/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/f490a/name_ss.webp 1180w"],sizes:"(max-width: 1180px) 100vw, 1180px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/dd4a7/name_ss.png 320w","/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/0f09e/name_ss.png 640w","/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/2561a/name_ss.png 1180w"],sizes:"(max-width: 1180px) 100vw, 1180px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/2561a/name_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"DATE"),": Specifies that the sealing date/time should be displayed. This value should not be mistaken for a signed timestamp from a timestamp authority.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1178px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"20.625%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/5530d/date_ss.webp 320w","/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/0c8fb/date_ss.webp 640w","/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/70acd/date_ss.webp 1178w"],sizes:"(max-width: 1178px) 100vw, 1178px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dd4a7/date_ss.png 320w","/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/0f09e/date_ss.png 640w","/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dc992/date_ss.png 1178w"],sizes:"(max-width: 1178px) 100vw, 1178px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dc992/date_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"DISTINGUISHED_NAME"),": Specifies that the distinguished name information from the digital certificate should be displayed.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1176px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"23.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/5530d/dn_ss.webp 320w","/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/0c8fb/dn_ss.webp 640w","/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/6fdea/dn_ss.webp 1176w"],sizes:"(max-width: 1176px) 100vw, 1176px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/dd4a7/dn_ss.png 320w","/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/0f09e/dn_ss.png 640w","/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/08188/dn_ss.png 1176w"],sizes:"(max-width: 1176px) 100vw, 1176px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/08188/dn_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"LABELS"),": Specifies that text labels should be displayed.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1178px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"23.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/5530d/labels_ss.webp 320w","/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/0c8fb/labels_ss.webp 640w","/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/70acd/labels_ss.webp 1178w"],sizes:"(max-width: 1178px) 100vw, 1178px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dd4a7/labels_ss.png 320w","/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/0f09e/labels_ss.png 640w","/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dc992/labels_ss.png 1178w"],sizes:"(max-width: 1178px) 100vw, 1178px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dc992/labels_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"SEAL_IMAGE"),": Specifies the seal image should be displayed.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1174px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"23.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/5530d/seal2_ss.webp 320w","/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/0c8fb/seal2_ss.webp 640w","/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/6ba46/seal2_ss.webp 1174w"],sizes:"(max-width: 1174px) 100vw, 1174px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/dd4a7/seal2_ss.png 320w","/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/0f09e/seal2_ss.png 640w","/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/683d4/seal2_ss.png 1174w"],sizes:"(max-width: 1174px) 100vw, 1174px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/683d4/seal2_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    "),"\nIf SEAL_IMAGE is given in appearance parameters and seal image is not passed in the request, the default Acrobat trefoil image is used.\n",(0,s.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1174px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"23.75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/5530d/trefoil_ss.webp 320w","/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/0c8fb/trefoil_ss.webp 640w","/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/6ba46/trefoil_ss.webp 1174w"],sizes:"(max-width: 1174px) 100vw, 1174px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/dd4a7/trefoil_ss.png 320w","/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/0f09e/trefoil_ss.png 640w","/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/683d4/trefoil_ss.png 1174w"],sizes:"(max-width: 1174px) 100vw, 1174px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/683d4/trefoil_ss.png",alt:"Display Options",title:"Display Options",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    "))))),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example JSON")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "signatureFormat": "PADES",\n  "documentLevelPermission": "FORM_FILLING",\n  "cscCredentialOptions": {\n    "authorizationContext": {\n      "accessToken": "<ACCESS_TOKEN>",\n      "tokenType": "Bearer"\n    },\n    "credentialAuthParameters": {\n      "pin": "<PIN>"\n    },\n    "providerName": "<PROVIDER_NAME>",\n    "credentialId": "<CREDENTIAL_ID>"\n  },\n  "tsaOptions": {\n    "url": "<TIMESTAMP_URL>",\n    "credentialAuthParameters": {\n      "username": "<USERNAME>",\n      "password": "<PASSWORD>"\n    }\n  },\n  "sealFieldOptions": {\n    "pageNumber": 1,\n    "fieldName": "Signature1",\n    "visible": true,\n    "location": {\n      "left" : 150,\n      "top": 250,\n      "bottom": 350,\n      "right": 200\n    }\n  },\n  "sealAppearanceOptions": {\n    "displayOptions": [\n      "NAME",\n      "DATE",\n      "LABELS",\n      "DISTINGUISHED_NAME",\n      "SEAL_IMAGE"\n    ]\n  }\n}\n')),(0,s.mdx)(p,{slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"Support of Trusted Timestamping and Document Level Permissions is only available through REST APIs and Java SDK.\nOther SDKs will support these features in future versions."),(0,s.mdx)("h2",{id:"api-limitations"},"API limitations"),(0,s.mdx)("br",null),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Input PDF size:")," Input PDF files up to a maximum of 100 MB are supported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Seal Image size:")," Seal Image files up to a maximum of 5 MB are supported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Seal Image formats:")," Supported Seal Image formats are JPEG(image/jpeg), PNG(image/png) and PDF(application/pdf)."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Password-protected Files:")," Encrypted or Password-protected PDFs are not supported for applying electronic seal."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Signed/Sealed Files:")," Any PDF which is already signed, certified or sealed cannot be used for applying electronic seal."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Input PDF version:")," Input PDF with version less than 1.3 are not supported."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("strong",{parentName:"li"},"Usage Rights File:")," Input PDF having usage rights are not supported.")),(0,s.mdx)("h2",{id:"rest-api"},"REST API"),(0,s.mdx)("p",null,"See our public API Reference for ",(0,s.mdx)("a",{parentName:"p",href:"../../../apis/#tag/PDF-Electronic-Seal"},"PDF Electronic Seal API"),"."),(0,s.mdx)("h2",{id:"apply-electronic-seal-with-default-appearance-on-pdf"},"Apply Electronic Seal with default appearance on PDF"),(0,s.mdx)("p",null,"The sample below performs electronic seal operation with default appearance on a given PDF."),(0,s.mdx)("p",null,"Please refer to the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(d,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.electronicseal.ElectronicSeal\n\npackage com.adobe.pdfservices.operation.samples.electronicseal;\n\npublic class ElectronicSeal {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElectronicSeal.class);\n\n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/sampleInvoice.pdf").toPath());\n             InputStream inputStreamSealImage = Files.newInputStream(new File("src/main/resources/sampleSealImage.png").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv("PDF_SERVICES_CLIENT_ID"),\n                System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n        \n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n            \n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n            Asset sealImageAsset = pdfServices.upload(inputStreamSealImage, PDFServicesMediaType.PNG.getMediaType());\n        \n            // Set the document level permission to be applied for output document\n            DocumentLevelPermission documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n        \n            // Sets the Seal Field Name to be created in input PDF document.\n            String sealFieldName = "Signature1";\n        \n            // Sets the page number in input document for applying seal.\n            Integer sealPageNumber = 1;\n        \n            // Sets if seal should be visible or invisible.\n            Boolean sealVisible = true;\n        \n            // Creates FieldLocation instance and set the coordinates for applying signature\n            FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n        \n            // Create FieldOptions instance with required details.\n            FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                .setFieldLocation(fieldLocation)\n                .setPageNumber(sealPageNumber)\n                .setVisible(sealVisible)\n                .build();\n        \n            // Sets the name of TSP Provider being used.\n            String providerName = "<PROVIDER_NAME>";\n        \n            // Sets the access token to be used to access TSP provider hosted APIs.\n            String accessToken = "<ACCESS_TOKEN>";\n        \n            // Sets the credential ID.\n            String credentialID = "<CREDENTIAL_ID>";\n        \n            // Sets the PIN generated while creating credentials.\n            String pin = "<PIN>";\n        \n            // Creates CSCAuthContext instance using access token and token type.\n            CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, "Bearer");\n        \n            // Create CertificateCredentials instance with required certificate details.\n            CertificateCredentials certificateCredentials = CertificateCredentials.cscCredentialBuilder()\n                .withProviderName(providerName)\n                .withCredentialID(credentialID)\n                .withPin(pin)\n                .withCSCAuthContext(cscAuthContext)\n                .build();\n            \n            // Create parameters for the job\n            PDFElectronicSealParams pdfElectronicSealParams = PDFElectronicSealParams\n                .pdfElectronicSealParamsBuilder(certificateCredentials, fieldOptions)\n                .withDocumentLevelPermission(documentLevelPermission)\n                .build();\n        \n            // Creates a new job instance\n            PDFElectronicSealJob pdfElectronicSealJob = new PDFElectronicSealJob(asset, pdfElectronicSealParams);\n        \n            // Sets the optional input seal image for PDFElectronicSealOperation instance\n            pdfElectronicSealJob.setSealImageAsset(sealImageAsset);\n        \n            // Submit the job and gets the job result\n            String location = pdfServices.submit(pdfElectronicSealJob);\n            PDFServicesResponse<PDFElectronicSealResult> pdfServicesResponse = pdfServices.getJobResult(location, PDFElectronicSealResult.class);\n        \n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n        \n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/sealedOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/sealedOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n            LOGGER.error("Exception encountered while executing operation", ex);\n        }\n    }\n}\n\n')),(0,s.mdx)("h4",{id:"net"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ElectronicSeal/\n// dotnet run ElectronicSeal.csproj\n\nnamespace ElectronicSeal\n{\n    class Program\n    {\n        // Initialize the logger.\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n                //Set the input document to perform the sealing operation\n                FileRef sourceFile = FileRef.CreateFromLocalFile(@"SampleInvoice.pdf");\n\n                //Set the background seal image for signature , if required.\n                FileRef sealImageFile = FileRef.CreateFromLocalFile(@"sampleSealImage.png");\n\n                //Set the Seal Field Name to be created in input PDF document.\n                string sealFieldName = "Signature1";\n\n                //Set the page number in input document for applying seal.\n                int sealPageNumber = 1;\n\n                //Set if seal should be visible or invisible.\n                bool sealVisible = true;\n\n                //Create FieldLocation instance and set the coordinates for applying signature\n                FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n\n                //Create FieldOptions instance with required details.\n                FieldOptions sealFieldOptions = new FieldOptions.Builder(sealFieldName)\n                .SetVisible(sealVisible)\n                .SetFieldLocation(fieldLocation)\n                .SetPageNumber(sealPageNumber)\n                .Build();\n\n                //Set the name of TSP Provider being used.\n                string providerName = "<PROVIDER_NAME>";\n\n                //Set the access token to be used to access TSP provider hosted APIs.\n                string accessToken = "<ACCESS_TOKEN>";\n\n                //Set the credential ID.\n                string credentialID = "<CREDENTIAL_ID>";\n\n                //Set the PIN generated while creating credentials.\n                string pin = "<PIN>";\n\n                CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, "Bearer");\n\n                //Create CertificateCredentials instance with required certificate details.\n                CertificateCredentials certificateCredentials = CertificateCredentials.CSCCredentialBuilder()\n                .WithProviderName(providerName)\n                .WithCredentialID(credentialID)\n                .WithPin(pin)\n                .WithCSCAuthContext(cscAuthContext)\n                .Build();\n\n                //Create SealingOptions instance with all the sealing parameters.\n                SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, fieldOptions).build();\n\n                //Create the PDFElectronicSealOperation instance using the PDFElectronicSealOptions instance\n                PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.CreateNew(sealOptions);\n\n                //Set the input source file for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetInput(sourceFile);\n\n                //Set the optional input seal image for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetSealImage(sealImageFile);\n\n                //Execute the operation\n                FileRef result = pdfElectronicSealOperation.Execute(executionContext);\n\n                // Save the output at specified location.\n                result.SaveAs(output/sealedOutput.pdf);\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (ServiceApiException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (SDKException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (IOException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (Exception ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n\n        }\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n}\n')),(0,s.mdx)("h4",{id:"node-js"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/electronicseal/electronic-seal.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    DocumentLevelPermission,\n    FieldLocation,\n    FieldOptions,\n    CSCAuthContext,\n    CSCCredential,\n    PDFElectronicSealParams,\n    PDFElectronicSealJob,\n    PDFElectronicSealResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let sourceFileReadStream;\n    let sealImageReadStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        sourceFileReadStream = fs.createReadStream("./sampleInvoice.pdf")\n        sealImageReadStream = fs.createReadStream("./sampleSealImage.png");\n        const [sourceFileAsset, sealImageAsset] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: sourceFileReadStream,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: sealImageReadStream,\n                mimeType: MimeType.PNG\n            }]\n        });\n\n        // Set the document level permission to be applied for output document\n        const documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n\n        // Set the Seal Field Name to be created in input PDF document\n        const sealFieldName = "Signature1";\n\n        // Set the page number in input document for applying seal\n        const sealPageNumber = 1;\n\n        // Set if seal should be visible or invisible\n        const sealVisible = true;\n\n        // Create FieldLocation instance and set the coordinates for applying signature\n        const fieldLocation = new FieldLocation({\n            left: 150,\n            top: 250,\n            right: 350,\n            bottom: 200\n        });\n\n        // Create FieldOptions instance with required details\n        const sealFieldOptions = new FieldOptions({\n            visible: sealVisible,\n            location: fieldLocation,\n            fieldName: sealFieldName,\n            pageNumber: sealPageNumber,\n        });\n\n        // Set the name of TSP Provider being used\n        const providerName = "<PROVIDER_NAME>";\n\n        // Set the access token to be used to access TSP provider hosted APIs\n        const accessToken = "<ACCESS_TOKEN>";\n\n        // Set the credential ID\n        const credentialId = "<CREDENTIAL_ID>";\n\n        // Set the PIN generated while creating credentials\n        const pin = "<PIN>";\n\n        // Create CSCAuthContext instance using access token and token type\n        const authorizationContext = new CSCAuthContext({\n            accessToken,\n            tokenType: "Bearer"\n        });\n\n        // Create CertificateCredentials instance with required certificate details\n        const certificateCredentials = new CSCCredential({\n            providerName,\n            credentialId,\n            pin,\n            authorizationContext,\n        });\n\n        // Create parameters for the job\n        const params = new PDFElectronicSealParams({\n            certificateCredentials,\n            sealFieldOptions,\n            documentLevelPermission,\n        });\n\n        // Creates a new job instance\n        const job = new PDFElectronicSealJob({\n            inputAsset: sourceFileAsset,\n            sealImageAsset,\n            params,\n        });\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: PDFElectronicSealResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset\'s content to it\n        const outputFilePath = "./sealedOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        sourceFileReadStream?.destroy();\n        sealImageReadStream?.destroy();\n    }\n})();\n')),(0,s.mdx)("h4",{id:"python"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ElectronicSeal:\n    def __init__(self):\n        try:\n            pdf_file = open('./sampleInvoice.pdf', 'rb')\n            file_input_stream = pdf_file.read()\n            pdf_file.close()\n\n            seal_image_file = open('./sampleSealImage.png', 'rb')\n            seal_image_input_stream = seal_image_file.read()\n            seal_image_file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            asset = pdf_services.upload(input_stream=file_input_stream, mime_type=PDFServicesMediaType.PDF)\n            seal_image_asset = pdf_services.upload(input_stream=seal_image_input_stream, mime_type=PDFServicesMediaType.PNG)\n\n            # Set the document level permission to be applied for output document\n            document_level_permission = DocumentLevelPermission.FORM_FILLING\n\n            # Sets the Seal Field Name to be created in input PDF document.\n            seal_field_name = \"Signature1\"\n\n            # Sets the page number in input document for applying seal.\n            seal_page_number = 1\n\n            # Sets if seal should be visible or invisible.\n            seal_visible = True\n\n            # Creates FieldLocation instance and set the coordinates for applying signature\n            field_location = FieldLocation(150, 250, 350, 200)\n\n            # Create FieldOptions instance with required details.\n            field_options = FieldOptions(\n                field_name=seal_field_name,\n                field_location=field_location,\n                page_number=seal_page_number,\n                visible=seal_visible\n            )\n\n            # Sets the name of TSP Provider being used.\n            provider_name = \"<PROVIDER_NAME>\"\n\n            # Sets the access token to be used to access TSP provider hosted APIs.\n            access_token = \"<ACCESS_TOKEN>\"\n\n            # Sets the credential ID.\n            credential_id = \"<CREDENTIAL_ID>\"\n\n            # Sets the PIN generated while creating credentials.\n            pin = \"<PIN>\"\n\n            # Creates CSCAuthContext instance using access token and token type.\n            csc_auth_context = CSCAuthContext(\n                access_token=access_token,\n                token_type=\"Bearer\",\n            )\n\n            # Create CertificateCredentials instance with required certificate details.\n            certificate_credentials = CSCCredentials(\n                provider_name=provider_name,\n                credential_id=credential_id,\n                pin=pin,\n                csc_auth_context=csc_auth_context,\n            )\n\n            # Create parameters for the job\n            electronic_seal_params = PDFElectronicSealParams(\n                seal_certificate_credentials=certificate_credentials,\n                seal_field_options=field_options,\n            )\n\n            # Creates a new job instance\n            electronic_seal_job = PDFElectronicSealJob(input_asset=asset,\n                                                       electronic_seal_params=electronic_seal_params,\n                                                       seal_image_asset=seal_image_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(electronic_seal_job)\n            pdf_services_response = pdf_services.get_job_result(location, ESealPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n\n            output_file_path = 'output/ElectronicSeal.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ElectronicSeal()\n")),(0,s.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'curl --location --request POST \'https://pdf-services.adobe.io/operation/electronicseal\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "inputDocumentAssetID": "urn:aaid:AS:UE1:23c30ee0-2c4d-xxxx-xxxx-087832fca718",\n    "sealImageAssetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-xxxx-xxxx-087832fca718",\n    "sealOptions": {\n        "signatureFormat": "PKCS7",\n        "documentLevelPermission": "FORM_FILLING",\n        "cscCredentialOptions": {\n            "credentialId": "<CREDENTIAL_ID>",\n            "providerName": "<PROVIDER_NAME>",\n            "authorizationContext": {\n                "tokenType": "Bearer",\n                "accessToken": "<ACCESS_TOKEN>"\n            },\n            "credentialAuthParameters": {\n                "pin": "<PIN>"\n            }\n        },\n        "sealFieldOptions": {\n            "location": {\n                "left": 150,\n                "top": 250,\n                "right": 350,\n                "bottom": 200\n            },\n            "fieldName": "Signature1",\n            "pageNumber": 1\n        }\n    }\n}\'\n')),(0,s.mdx)("h2",{id:"apply-electronic-seal-with-customized-appearance-on-pdf"},"Apply Electronic Seal with customized appearance on PDF"),(0,s.mdx)("p",null,"The sample below performs electronic seal operation with customized appearance on a given PDF."),(0,s.mdx)("p",null,"Please refer to the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(d,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java-1"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://github.com/adobe/pdfservices-java-sdk-samples/tree/beta\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.electronicseal.ElectronicSealWithAppearanceOptions\n\npackage com.adobe.pdfservices.operation.samples.electronicseal;\n\npublic class ElectronicSealWithAppearanceOptions {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElectronicSealWithAppearanceOptions.class);\n\n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/sampleInvoice.pdf").toPath());\n             InputStream inputStreamSealImage = Files.newInputStream(new File("src/main/resources/sampleSealImage.png").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv("PDF_SERVICES_CLIENT_ID"),\n                System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n        \n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n       \n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n            Asset sealImageAsset = pdfServices.upload(inputStreamSealImage, PDFServicesMediaType.PNG.getMediaType());\n\n            // Set the document level permission to be applied for output document\n            DocumentLevelPermission documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n\n            // Create AppearanceOptions and add the required signature display items to it\n            AppearanceOptions appearanceOptions = new AppearanceOptions();\n            appearanceOptions.addItem(AppearanceItem.NAME);\n            appearanceOptions.addItem(AppearanceItem.LABELS);\n            appearanceOptions.addItem(AppearanceItem.DATE);\n            appearanceOptions.addItem(AppearanceItem.SEAL_IMAGE);\n            appearanceOptions.addItem(AppearanceItem.DISTINGUISHED_NAME);\n        \n        \n            // Sets the Seal Field Name to be created in input PDF document.\n            String sealFieldName = "Signature1";\n        \n            // Sets the page number in input document for applying seal.\n            Integer sealPageNumber = 1;\n        \n            // Sets if seal should be visible or invisible.\n            Boolean sealVisible = true;\n        \n            // CreatesFieldLocation instance and set the coordinates for applying signature\n            FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n        \n            // Create FieldOptions instance with required details.\n            FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                .setFieldLocation(fieldLocation)\n                .setPageNumber(sealPageNumber)\n                .setVisible(sealVisible)\n                .build();\n        \n            // Sets the name of TSP Provider being used.\n            String providerName = "<PROVIDER_NAME>";\n        \n            // Sets the access token to be used to access TSP provider hosted APIs.\n            String accessToken = "<ACCESS_TOKEN>";\n        \n            // Sets the credential ID.\n            String credentialID = "<CREDENTIAL_ID>";\n        \n            // Sets the PIN generated while creating credentials.\n            String pin = "<PIN>";\n        \n            // Creates CSCAuthContext instance using access token and token type.\n            CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, "Bearer");\n        \n            // Create CertificateCredentials instance with required certificate details.\n            CertificateCredentials certificateCredentials = CertificateCredentials.cscCredentialBuilder()\n                .withProviderName(providerName)\n                .withCredentialID(credentialID)\n                .withPin(pin)\n                .withCSCAuthContext(cscAuthContext)\n                .build();\n            \n            // Create parameters for the job\n            PDFElectronicSealParams pdfElectronicSealParams = PDFElectronicSealParams\n                .pdfElectronicSealParamsBuilder(certificateCredentials, fieldOptions)\n                .withDocumentLevelPermission(documentLevelPermission)\n                .withAppearanceOptions(appearanceOptions)\n                .build();\n        \n            // Creates a new job instance\n            PDFElectronicSealJob pdfElectronicSealJob = new PDFElectronicSealJob(asset, pdfElectronicSealParams);\n            pdfElectronicSealJob.setSealImageAsset(sealImageAsset);\n        \n            // Submit the job and gets the job result\n            String location = pdfServices.submit(pdfElectronicSealJob);\n            PDFServicesResponse<PDFElectronicSealResult> pdfServicesResponse = pdfServices.getJobResult(location, PDFElectronicSealResult.class);\n        \n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n        \n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/sealedOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/sealedOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n            LOGGER.error("Exception encountered while executing operation", ex);\n        }\n    }\n}\n\n')),(0,s.mdx)("h4",{id:"net-1"},".NET"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ElectronicSealWithAppearanceOptions/\n// dotnet run ElectronicSealWithAppearanceOptions.csproj\n\nnamespace ElectronicSealWithAppearanceOptions\n{\n    class Program\n    {\n        // Initialize the logger.\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n\n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n                //Set the input document to perform the sealing operation\n                FileRef sourceFile = FileRef.CreateFromLocalFile(@"SampleInvoice.pdf");\n\n                //Set the background seal image for signature , if required.\n                FileRef sealImageFile = FileRef.CreateFromLocalFile(@"sampleSealImage.png");\n\n                //Create AppearanceOptions and add the required signature appearance items\n                AppearanceOptions appearanceOptions = new AppearanceOptions();\n                appearanceOptions.AddItem(AppearanceItem.NAME);\n                appearanceOptions.AddItem(AppearanceItem.LABELS);\n                appearanceOptions.AddItem(AppearanceItem.DATE);\n                appearanceOptions.AddItem(AppearanceItem.SEAL_IMAGE);\n                appearanceOptions.AddItem(AppearanceItem.DISTINGUISHED_NAME);\n\n                //Set the Seal Field Name to be created in input PDF document.\n                string sealFieldName = "Signature1";\n\n                //Set the page number in input document for applying seal.\n                int sealPageNumber = 1;\n\n                //Set if seal should be visible or invisible.\n                bool sealVisible = true;\n\n                //Create FieldLocation instance and set the coordinates for applying signature\n                FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n                \n                //Create FieldOptions instance with required details.\n                FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                    .SetVisible(sealVisible)\n                    .SetFieldLocation(fieldLocation)\n                    .SetPageNumber(sealPageNumber)\n                    .Build();\n\n                //Set the name of TSP Provider being used.\n                string providerName = "<PROVIDER_NAME>";\n\n                //Set the access token to be used to access TSP provider hosted APIs.\n                string accessToken = "<ACCESS_TOKEN>";\n\n                //Set the credential ID.\n                string credentialID = "<CREDENTIAL_ID>";\n\n                //Set the PIN generated while creating credentials.\n                string pin = "<PIN>";\n\n                CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, "Bearer");\n\n                //Create CertificateCredentials instance with required certificate details.\n                CertificateCredentials certificateCredentials = CertificateCredentials.CSCCredentialBuilder()\n                    .WithProviderName(providerName)\n                    .WithCredentialID(credentialID)\n                    .WithPin(pin)\n                    .WithCSCAuthContext(cscAuthContext)\n                    .Build();\n                \n                \n                //Create SealingOptions instance with all the sealing parameters.\n                SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, fieldOptions)\n                    .WithAppearanceOptions(appearanceOptions).Build();\n\n                //Create the PDFElectronicSealOperation instance using the SealOptions instance\n                PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.CreateNew(sealOptions);\n\n                //Set the input source file for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetInput(sourceFile);\n\n                //Set the optional input seal image for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetSealImage(sealImageFile);\n\n                //Execute the operation\n                FileRef result = pdfElectronicSealOperation.Execute(executionContext);\n\n                // Save the output at specified location.\n                result.SaveAs(output/sealedOutput.pdf);\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (ServiceApiException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (SDKException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (IOException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            catch (Exception ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n\n        }\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n}\n')),(0,s.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/electronicseal/electronic-seal-with-appearance-options.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    FieldLocation,\n    FieldOptions,\n    CSCAuthContext,\n    CSCCredential,\n    PDFElectronicSealParams,\n    PDFElectronicSealJob,\n    PDFElectronicSealResult,\n    AppearanceOptions,\n    AppearanceItem,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError, DocumentLevelPermission\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n\n    let sourceFileReadStream;\n    let sealImageReadStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        sourceFileReadStream = fs.createReadStream("./sampleInvoice.pdf")\n        sealImageReadStream = fs.createReadStream("./sampleSealImage.png");\n        const [sourceFileAsset, sealImageAsset] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: sourceFileReadStream,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: sealImageReadStream,\n                mimeType: MimeType.PNG\n            }]\n        });\n\n        // Set the document level permission to be applied for output document\n        const documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n\n        // Create AppearanceOptions and add the required signature appearance items\n        const sealAppearanceOptions = new AppearanceOptions({\n            items: [\n                AppearanceItem.DATE,\n                AppearanceItem.SEAL_IMAGE,\n                AppearanceItem.NAME,\n                AppearanceItem.LABELS,\n                AppearanceItem.DISTINGUISHED_NAME\n            ]\n        });\n\n        // Set the Seal Field Name to be created in input PDF document\n        const sealFieldName = "Signature1";\n\n        // Set the page number in input document for applying seal\n        const sealPageNumber = 1;\n\n        // Set if seal should be visible or invisible\n        const sealVisible = true;\n\n        // Create FieldLocation instance and set the coordinates for applying signature\n        const fieldLocation = new FieldLocation({\n            left: 150,\n            top: 250,\n            right: 350,\n            bottom: 200\n        });\n\n        // Create FieldOptions instance with required details\n        const sealFieldOptions = new FieldOptions({\n            visible: sealVisible,\n            location: fieldLocation,\n            fieldName: sealFieldName,\n            pageNumber: sealPageNumber,\n        });\n\n        // Set the name of TSP Provider being used\n        const providerName = "<PROVIDER_NAME>";\n\n        // Set the access token to be used to access TSP provider hosted APIs\n        const accessToken = "<ACCESS_TOKEN>";\n\n        // Set the credential ID\n        const credentialId = "<CREDENTIAL_ID>";\n\n        // Set the PIN generated while creating credentials\n        const pin = "<PIN>";\n\n        // Create CSCAuthContext instance using access token and token type\n        const authorizationContext = new CSCAuthContext({\n            accessToken,\n            tokenType: "Bearer"\n        });\n\n        // Create CertificateCredentials instance with required certificate details\n        const certificateCredentials = new CSCCredential({\n            providerName,\n            credentialId,\n            pin,\n            authorizationContext,\n        });\n\n        // Create parameters for the job\n        const params = new PDFElectronicSealParams({\n            documentLevelPermission\n            certificateCredentials,\n            sealFieldOptions,\n            sealAppearanceOptions\n        });\n\n        // Creates a new job instance\n        const job = new PDFElectronicSealJob({\n            inputAsset: sourceFileAsset,\n            sealImageAsset,\n            params,\n        });\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: PDFElectronicSealResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset\'s content to it\n        const outputFilePath = "./sealedOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        sourceFileReadStream?.destroy();\n        sealImageReadStream?.destroy();\n    }\n})();\n')),(0,s.mdx)("h4",{id:"python-1"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ElectronicSealWithAppearanceOptions:\n    def __init__(self):\n        try:\n            pdf_file = open('./sampleInvoice.pdf', 'rb')\n            file_input_stream = pdf_file.read()\n            pdf_file.close()\n\n            seal_image_file = open('./sampleSealImage.png', 'rb')\n            seal_image_input_stream = seal_image_file.read()\n            seal_image_file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            asset = pdf_services.upload(input_stream=file_input_stream, mime_type=PDFServicesMediaType.PDF)\n            seal_image_asset = pdf_services.upload(input_stream=seal_image_input_stream, mime_type=PDFServicesMediaType.PNG)\n\n            # Create AppearanceOptions and add the required signature display items to it\n            appearance_options: AppearanceOptions = AppearanceOptions()\n            appearance_options.add_item(AppearanceItem.NAME)\n            appearance_options.add_item(AppearanceItem.LABELS)\n            appearance_options.add_item(AppearanceItem.DATE)\n            appearance_options.add_item(AppearanceItem.SEAL_IMAGE)\n            appearance_options.add_item(AppearanceItem.DISTINGUISHED_NAME)\n\n            # Set the document level permission to be applied for output document\n            document_level_permission = DocumentLevelPermission.FORM_FILLING\n\n            # Sets the Seal Field Name to be created in input PDF document.\n            seal_field_name = \"Signature1\"\n\n            # Sets the page number in input document for applying seal.\n            seal_page_number = 1\n\n            # Sets if seal should be visible or invisible.\n            seal_visible = True\n\n            # Creates FieldLocation instance and set the coordinates for applying signature\n            field_location = FieldLocation(150, 250, 350, 200)\n\n            # Create FieldOptions instance with required details.\n            field_options = FieldOptions(\n                field_name=seal_field_name,\n                field_location=field_location,\n                page_number=seal_page_number,\n                visible=seal_visible\n            )\n\n            # Sets the name of TSP Provider being used.\n            provider_name = \"<PROVIDER_NAME>\"\n\n            # Sets the access token to be used to access TSP provider hosted APIs.\n            access_token = \"<ACCESS_TOKEN>\"\n\n            # Sets the credential ID.\n            credential_id = \"<CREDENTIAL_ID>\"\n\n            # Sets the PIN generated while creating credentials.\n            pin = \"<PIN>\"\n\n            # Creates CSCAuthContext instance using access token and token type.\n            csc_auth_context = CSCAuthContext(\n                access_token=access_token,\n                token_type=\"Bearer\",\n            )\n\n            # Create CertificateCredentials instance with required certificate details.\n            certificate_credentials = CSCCredentials(\n                provider_name=provider_name,\n                credential_id=credential_id,\n                pin=pin,\n                csc_auth_context=csc_auth_context,\n            )\n\n            # Create parameters for the job\n            electronic_seal_params = PDFElectronicSealParams(\n                seal_certificate_credentials=certificate_credentials,\n                seal_appearance_options=appearance_options,\n                seal_field_options=field_options,\n                document_level_permissions=document_level_permission,\n            )\n\n            # Creates a new job instance\n            electronic_seal_job = PDFElectronicSealJob(input_asset=asset,\n                                                       electronic_seal_params=electronic_seal_params,\n                                                       seal_image_asset=seal_image_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(electronic_seal_job)\n            pdf_services_response = pdf_services.get_job_result(location, ESealPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/ElectronicSeal.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    ElectronicSealWithAppearanceOptions()\n")),(0,s.mdx)("h4",{id:"rest-api-2"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'curl --location --request POST \'https://pdf-services.adobe.io/operation/electronicseal\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "inputDocumentAssetID": "urn:aaid:AS:UE1:23c30ee0-2c4d-xxxx-xxxx-087832fca718",\n    "sealImageAssetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-xxxx-xxxx-087832fca718",\n    "sealOptions": {\n        "signatureFormat": "PKCS7",\n        "documentLevelPermission": "FORM_FILLING",\n        "cscCredentialOptions": {\n            "credentialId": "<CREDENTIAL_ID>",\n            "providerName": "<PROVIDER_NAME>",\n            "authorizationContext": {\n                "tokenType": "Bearer",\n                "accessToken": "<ACCESS_TOKEN>"\n            },\n            "credentialAuthParameters": {\n                "pin": "<PIN>"\n            }\n        },\n        "sealFieldOptions": {\n            "location": {\n                "left": 150,\n                "top": 250,\n                "right": 350,\n                "bottom": 200\n            },\n            "fieldName": "Signature1",\n            "pageNumber": 1\n        },\n        "sealAppearanceOptions": {\n            "displayOptions": [\n                "NAME",\n                "DATE",\n                "DISTINGUISHED_NAME",\n                "LABELS",\n                "SEAL_IMAGE"\n            ]\n        }\n    }\n}\'\n')),(0,s.mdx)("h2",{id:"apply-electronic-seal-with-trusted-timestamp-on-pdf"},"Apply Electronic Seal with trusted timestamp on PDF"),(0,s.mdx)("p",null,"The sample below performs electronic seal operation with a trusted timestamp on given PDF."),(0,s.mdx)("p",null,"Please refer to the ",(0,s.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,s.mdx)(d,{slots:"heading, code",repeat:"4",languages:"Java, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,s.mdx)("h4",{id:"java-2"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://github.com/adobe/pdfservices-java-sdk-samples/tree/beta\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.electronicseal.ElectronicSealWithAppearanceOptions\n\npackage com.adobe.pdfservices.operation.samples.electronicseal;\n\npublic class ElectronicSealWithTimeStampAuthority {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElectronicSealWithTimeStampAuthority.class);\n\n    public static void main(String[] args) {\n        try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/sampleInvoice.pdf").toPath());\n             InputStream inputStreamSealImage = Files.newInputStream(new File("src/main/resources/sampleSealImage.png").toPath())) {\n        \n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                System.getenv("PDF_SERVICES_CLIENT_ID"),\n                System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n        \n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n            Asset sealImageAsset = pdfServices.upload(inputStreamSealImage, PDFServicesMediaType.PNG.getMediaType());\n        \n            // Set the document level permission to be applied for output document\n            DocumentLevelPermission documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n        \n            // Sets the Seal Field Name to be created in input PDF document.\n            String sealFieldName = "Signature1";\n        \n            // Sets the page number in input document for applying seal.\n            Integer sealPageNumber = 1;\n        \n            // Sets if seal should be visible or invisible.\n            Boolean sealVisible = true;\n        \n            //Creates FieldLocation instance and set the coordinates for applying signature\n            FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n        \n            //Create FieldOptions instance with required details.\n            FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                .setFieldLocation(fieldLocation)\n                .setPageNumber(sealPageNumber)\n                .setVisible(sealVisible)\n                .build();\n        \n            // Sets the name of TSP Provider being used.\n            String providerName = "<PROVIDER_NAME>";\n        \n            // Sets the access token to be used to access TSP provider hosted APIs.\n            String accessToken = "<ACCESS_TOKEN>";\n        \n            // Sets the credential ID.\n            String credentialID = "<CREDENTIAL_ID>";\n        \n            // Sets the PIN generated while creating credentials.\n            String pin = "<PIN>";\n        \n            //Creates CSCAuthContext instance using access token and token type.\n            CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, "Bearer");\n        \n            //Create CertificateCredentials instance with required certificate details.\n            CertificateCredentials certificateCredentials = CertificateCredentials.cscCredentialBuilder()\n                .withProviderName(providerName)\n                .withCredentialID(credentialID)\n                .withPin(pin)\n                .withCSCAuthContext(cscAuthContext)\n                .build();\n        \n            //Create TSABasicAuthCredentials using username and password\n            TSABasicAuthCredentials tsaBasicAuthCredentials = new TSABasicAuthCredentials("<USERNAME>", "<PASSWORD>");\n        \n            // Set the Time Stamp Authority Options using url and TSA Auth credentials\n            TSAOptions tsaOptions = new RFC3161TSAOptions("<TIMESTAMP_URL>", tsaBasicAuthCredentials);\n        \n            // Create parameters for the job\n            PDFElectronicSealParams pdfElectronicSealParams = PDFElectronicSealParams.pdfElectronicSealParamsBuilder(certificateCredentials, fieldOptions)\n                .withDocumentLevelPermission(documentLevelPermission)\n                .withTSAOptions(tsaOptions)\n                .build();\n        \n            // Creates a new job instance\n            PDFElectronicSealJob pdfElectronicSealJob = new PDFElectronicSealJob(asset, pdfElectronicSealParams);\n        \n            // Sets the optional input seal image for PDFElectronicSealOperation instance\n            pdfElectronicSealJob.setSealImageAsset(sealImageAsset);\n        \n            // Submit the job and gets the job result\n            String location = pdfServices.submit(pdfElectronicSealJob);\n            PDFServicesResponse<PDFElectronicSealResult> pdfServicesResponse = pdfServices.getJobResult(location, PDFElectronicSealResult.class);\n        \n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n        \n            // Creates an output stream and copy stream asset\'s content to it\n            Files.createDirectories(Paths.get("output/"));\n            OutputStream outputStream = Files.newOutputStream(new File("output/sealedOutput.pdf").toPath());\n            LOGGER.info("Saving asset at output/sealedOutput.pdf");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n        } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n            LOGGER.error("Exception encountered while executing operation", ex);\n        }\n    }\n}\n\n')),(0,s.mdx)("h4",{id:"node-js-2"},"Node JS"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/electronicseal/electronic-seal-with-stamp-authority.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    FieldLocation,\n    FieldOptions,\n    CSCAuthContext,\n    CSCCredential,\n    PDFElectronicSealParams,\n    PDFElectronicSealJob,\n    PDFElectronicSealResult,\n    DocumentLevelPermission,\n    TSABasicAuthCredentials,\n    RFC3161TSAOptions,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError,\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n\n    let sourceFileReadStream;\n    let sealImageReadStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        sourceFileReadStream = fs.createReadStream("./sampleInvoice.pdf")\n        sealImageReadStream = fs.createReadStream("./sampleSealImage.png");\n        const [sourceFileAsset, sealImageAsset] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: sourceFileReadStream,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: sealImageReadStream,\n                mimeType: MimeType.PNG\n            }]\n        });\n\n        // Set the document level permission to be applied for output document\n        const documentLevelPermission = DocumentLevelPermission.FORM_FILLING;\n\n        // Set the Seal Field Name to be created in input PDF document\n        const sealFieldName = "Signature1";\n\n        // Set the page number in input document for applying seal\n        const sealPageNumber = 1;\n\n        // Set if seal should be visible or invisible\n        const sealVisible = true;\n\n        // Create FieldLocation instance and set the coordinates for applying signature\n        const fieldLocation = new FieldLocation({\n            left: 150,\n            top: 250,\n            right: 350,\n            bottom: 200\n        });\n\n        // Create FieldOptions instance with required details\n        const sealFieldOptions = new FieldOptions({\n            visible: sealVisible,\n            location: fieldLocation,\n            fieldName: sealFieldName,\n            pageNumber: sealPageNumber,\n        });\n\n        // Set the name of TSP Provider being used\n        const providerName = "<PROVIDER_NAME>";\n\n        // Set the access token to be used to access TSP provider hosted APIs\n        const accessToken = "<ACCESS_TOKEN>";\n\n        // Set the credential ID\n        const credentialId = "<CREDENTIAL_ID>";\n\n        // Set the PIN generated while creating credentials\n        const pin = "<PIN>";\n\n        // Create CSCAuthContext instance using access token and token type\n        const authorizationContext = new CSCAuthContext({\n            accessToken,\n            tokenType: "Bearer"\n        });\n\n        // Create CertificateCredentials instance with required certificate details\n        const certificateCredentials = new CSCCredential({\n            providerName,\n            credentialId,\n            pin,\n            authorizationContext,\n        });\n\n        // Create TSABasicAuthCredentials using username and password\n        const tsaBasicAuthCredentials = new TSABasicAuthCredentials({\n            username: "<USERNAME>",\n            password: "<PASSWORD>"\n        });\n\n        // Set the Time Stamp Authority Options using url and TSA Auth credentials\n        const tsaOptions = new RFC3161TSAOptions({\n            url: "<TIMESTAMP_URL>",\n            credentialAuthParameters: tsaBasicAuthCredentials\n        });\n\n        // Create parameters for the job\n        const params = new PDFElectronicSealParams({\n            documentLevelPermission,\n            certificateCredentials,\n            sealFieldOptions,\n            tsaOptions\n        });\n\n        // Creates a new job instance\n        const job = new PDFElectronicSealJob({\n            inputAsset: sourceFileAsset,\n            sealImageAsset,\n            params,\n        });\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: PDFElectronicSealResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates a write stream and copy stream asset\'s content to it\n        const outputFilePath = "./sealedOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const writeStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(writeStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        sourceFileReadStream?.destroy();\n        sealImageReadStream?.destroy();\n    }\n})();\n')),(0,s.mdx)("h4",{id:"python-2"},"Python"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ElectronicSealWithTimestampAuthority:\n    def __init__(self):\n        try:\n            pdf_file = open(\'./sampleInvoice.pdf\', \'rb\')\n            file_input_stream = pdf_file.read()\n            pdf_file.close()\n\n            seal_image_file = open(\'./sampleSealImage.png\', \'rb\')\n            seal_image_input_stream = seal_image_file.read()\n            seal_image_file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv(\'PDF_SERVICES_CLIENT_ID\'),\n                client_secret=os.getenv(\'PDF_SERVICES_CLIENT_SECRET\')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            asset = pdf_services.upload(input_stream=file_input_stream, mime_type=PDFServicesMediaType.PDF)\n            seal_image_asset = pdf_services.upload(input_stream=seal_image_input_stream, mime_type=PDFServicesMediaType.PNG)\n\n            # Set the document level permission to be applied for output document\n            document_level_permission = DocumentLevelPermission.FORM_FILLING\n\n            # Sets the Seal Field Name to be created in input PDF document.\n            seal_field_name = "Signature1"\n\n            # Sets the page number in input document for applying seal.\n            seal_page_number = 1\n\n            # Sets if seal should be visible or invisible.\n            seal_visible = True\n\n            # Creates FieldLocation instance and set the coordinates for applying signature\n            field_location = FieldLocation(150, 250, 350, 200)\n\n            # Create FieldOptions instance with required details.\n            field_options = FieldOptions(\n                field_name=seal_field_name,\n                field_location=field_location,\n                page_number=seal_page_number,\n                visible=seal_visible\n            )\n\n            # Sets the name of TSP Provider being used.\n            provider_name = "<PROVIDER_NAME>"\n\n            # Sets the access token to be used to access TSP provider hosted APIs.\n            access_token = "<ACCESS_TOKEN>"\n\n            # Sets the credential ID.\n            credential_id = "<CREDENTIAL_ID>"\n\n            # Sets the PIN generated while creating credentials.\n            pin = "<PIN>"\n\n            # Creates CSCAuthContext instance using access token and token type.\n            csc_auth_context = CSCAuthContext(\n                access_token=access_token,\n                token_type="Bearer",\n            )\n\n            # Create CertificateCredentials instance with required certificate details.\n            certificate_credentials = CSCCredentials(\n                provider_name=provider_name,\n                credential_id=credential_id,\n                pin=pin,\n                csc_auth_context=csc_auth_context,\n            )\n\n            # Create TSABasicAuthCredentials using username and password\n            tsa_basic_auth_credentials: TSABasicAuthCredentials = TSABasicAuthCredentials(\n                username="<USERNAME>",\n                password="<PASSWORD>",\n            )\n\n            # Set the Time Stamp Authority Options using url and TSA Auth credentials\n            tsa_options: RFC3161TSAOptions = RFC3161TSAOptions(\n                url="<TIMESTAMP_URL>",\n                tsa_basic_auth_credentials=tsa_basic_auth_credentials,\n            )\n\n            # Create parameters for the job\n            electronic_seal_params = PDFElectronicSealParams(\n                seal_certificate_credentials=certificate_credentials,\n                seal_field_options=field_options,\n                tsa_options=tsa_options,\n                document_level_permissions=document_level_permission,\n            )\n\n            # Creates a new job instance\n            electronic_seal_job = PDFElectronicSealJob(input_asset=asset,\n                                                       electronic_seal_params=electronic_seal_params,\n                                                       seal_image_asset=seal_image_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(electronic_seal_job)\n            pdf_services_response = pdf_services.get_job_result(location, ESealPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset\'s content to it\n            output_file_path = \'output/ElectronicSeal.pdf\'\n            with open(output_file_path, "wb") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f\'Exception encountered while executing operation: {e}\')\n\nif __name__ == "__main__":\n    ElectronicSealWithTimestampAuthority()\n')),(0,s.mdx)("h4",{id:"rest-api-3"},"REST API"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'curl --location --request POST \'https://pdf-services.adobe.io/operation/electronicseal\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "inputDocumentAssetID": "urn:aaid:AS:UE1:23c30ee0-2c4d-xxxx-xxxx-087832fca718",\n    "sealImageAssetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-xxxx-xxxx-087832fca718",\n    "sealOptions": {\n        "signatureFormat": "PKCS7",\n        "documentLevelPermission": "FORM_FILLING",\n        "cscCredentialOptions": {\n            "credentialId": "<CREDENTIAL_ID>",\n            "providerName": "<PROVIDER_NAME>",\n            "authorizationContext": {\n                "tokenType": "Bearer",\n                "accessToken": "<ACCESS_TOKEN>"\n            },\n            "credentialAuthParameters": {\n                "pin": "<PIN>"\n            }\n        },\n        "tsaOptions": {\n            "url" : "<TIMESTAMP_URL>",\n            "credentialAuthParameters": {\n                "username" : "<USERNAME>",\n                "password" : "<PASSWORD>"\n        },\n        "sealFieldOptions": {\n            "location": {\n                "left": 150,\n                "top": 250,\n                "right": 350,\n                "bottom": 200\n            },\n            "fieldName": "Signature1",\n            "pageNumber": 1\n        },\n        "sealAppearanceOptions": {\n            "displayOptions": [\n                "NAME",\n                "DATE",\n                "DISTINGUISHED_NAME",\n                "LABELS",\n                "SEAL_IMAGE"\n            ]\n        }\n    }\n}\'\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-electronic-seal-api-md-2b701f9e35e7e4dc5827.js.map