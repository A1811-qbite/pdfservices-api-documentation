{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-compress-pdf-md-54eb40f79090c65de6c4.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/compress-pdf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"compress-pdfs\"\n    }}>{`Compress PDFs`}</h1>\n    <p>{`Reduce the size of PDF files by compressing to smaller sizes for lower bandwidth viewing, downloading, and sharing.`}</p>\n    <p>{`Support for multiple compression levels to retain the quality of images and graphics`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`REST API`}</h2>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../apis/#tag/Compress-PDF\"\n      }}>{`Compress PDF`}</a></p>\n    <h2 {...{\n      \"id\": \"compress-pdfs-1\"\n    }}>{`Compress PDFs`}</h2>\n    <p>{`Compress PDFs to reduce the file size prior to performing workflow\noperations that use bandwidth or memory.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDF\n \n   public class CompressPDF {\n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDF.class);\n  \n     public static void main(String[] args) {\n  \n        try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/compressPDFInput.pdf\").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                    System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Creates a new job instance\n            CompressPDFJob compressPDFJob = new CompressPDFJob(asset);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(compressPDFJob);\n            PDFServicesResponse<CompressPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CompressPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creating an output stream and copying stream asset content to it\n            Files.createDirectories(Paths.get(\"output/\"));\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/compressPDFOutput.pdf\").toPath());\n            LOGGER.info(\"Saving asset at output/compressPDFOutput.pdf\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n         } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n             LOGGER.error(\"Exception encountered while executing operation\", ex);\n         }\n     }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDF.csproj\n\n namespace CompressPDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n               \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"compressPDFInput.pdf\");\n               compressPDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = compressPDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + \"/output/compressPDFOutput.pdf\");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error(\"Exception encountered while executing operation\", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n       }\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CompressPDFJob,\n    CompressPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./compressPDFInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Creates a new job instance\n        const job = new CompressPDFJob({inputAsset});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CompressPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset's content to it\n        const outputFilePath = \"./compressPDFOutput.pdf\";\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/compresspdf/compress_pdf.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass CompressPDF:\n    def __init__(self):\n        try:\n            file = open('./compressPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Creates a new job instance\n            compress_pdf_job = CompressPDFJob(input_asset=input_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(compress_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CompressPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CompressPDF.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    CompressPDF()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"compress-pdfs-with-compression-level\"\n    }}>{`Compress PDFs with Compression Level`}</h2>\n    <p>{`Compress PDFs to reduce the file size on the basis of provided\ncompression level, prior to performing workflow operations that use\nbandwidth or memory. Refer to `}<inlineCode parentName=\"p\">{`CompressionLevel`}</inlineCode>{` in the API docs for a\nlist of supported compression levels.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"5\" languages=\"Java, .NET, Node JS, Python, REST API\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.compresspdf.CompressPDFWithOptions\n \n    public class CompressPDFWithOptions {\n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(CompressPDFWithOptions.class);\n   \n      public static void main(String[] args) {\n   \n          try (InputStream inputStream = Files.newInputStream(new File(\"src/main/resources/compressPDFInput.pdf\").toPath())) {\n            // Initial setup, create credentials instance\n            Credentials credentials = new ServicePrincipalCredentials(\n                    System.getenv(\"PDF_SERVICES_CLIENT_ID\"),\n                    System.getenv(\"PDF_SERVICES_CLIENT_SECRET\"));\n\n            // Creates a PDF Services instance\n            PDFServices pdfServices = new PDFServices(credentials);\n\n            // Creates an asset(s) from source file(s) and upload\n            Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n\n            // Create parameters for the job\n            CompressPDFParams compressPDFParams = CompressPDFParams.compressPDFParamsBuilder()\n                    .withCompressionLevel(CompressionLevel.LOW)\n                    .build();\n\n            // Creates a new job instance\n            CompressPDFJob compressPDFJob = new CompressPDFJob(asset)\n                    .setParams(compressPDFParams);\n\n            // Submit the job and gets the job result\n            String location = pdfServices.submit(compressPDFJob);\n            PDFServicesResponse<CompressPDFResult> pdfServicesResponse = pdfServices.getJobResult(location, CompressPDFResult.class);\n\n            // Get content from the resulting asset(s)\n            Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n            StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n\n            // Creating an output stream and copying stream asset content to it\n            Files.createDirectories(Paths.get(\"output/\"));\n            OutputStream outputStream = Files.newOutputStream(new File(\"output/compressPDFWithOptionsOutput.pdf\").toPath());\n            LOGGER.info(\"Saving asset at output/compressPDFWithOptionsOutput.pdf\");\n            IOUtils.copy(streamAsset.getInputStream(), outputStream);\n            outputStream.close();\n          } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n              LOGGER.error(\"Exception encountered while executing operation\", ex);\n          }\n      }\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CompressPDF/\n// dotnet run CompressPDFWithOptions.csproj\n\n  namespace CompressPDFWithOptions\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                        .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                        .Build();\n \n                // Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                CompressPDFOperation compressPDFOperation = CompressPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"compressPDFInput.pdf\");\n                compressPDFOperation.SetInput(sourceFileRef);\n \n                // Build CompressPDF options from supported compression levels and set them into the operation\n                CompressPDFOptions compressPDFOptions = CompressPDFOptions.CompressPDFOptionsBuilder()\n                        .WithCompressionLevel(CompressionLevel.LOW)\n                        .Build();\n                compressPDFOperation.SetOptions(compressPDFOptions);\n \n                // Execute the operation.\n                FileRef result = compressPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                result.SaveAs(Directory.GetCurrentDirectory() + \"/output/compressPDFWithOptionsOutput.pdf\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/compresspdf/compress-pdf-with-options.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    CompressPDFJob,\n    CompressPDFParams,\n    CompressionLevel,\n    CompressPDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require(\"@adobe/pdfservices-node-sdk\");\nconst fs = require(\"fs\");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream(\"./compressPDFInput.pdf\");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Set the compression level\n        const params = new CompressPDFParams({\n            compressionLevel: CompressionLevel.LOW,\n        });\n\n        // Creates a new job instance\n        const job = new CompressPDFJob({inputAsset, params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: CompressPDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset's content to it\n        const outputFilePath = createOutputFilePath();\n        console.log(\\`Saving asset at \\${outputFilePath}\\`);\n\n        const outputStream = \"./compressPDFWithOptionsOutput.pdf\";\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log(\"Exception encountered while executing operation\", err);\n        } else {\n            console.log(\"Exception encountered while executing operation\", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python-1\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python python src/compresspdf/compress_pdf_with_options.py\n\nclass CompressPDFWithOptions:\n    def __init__(self):\n        try:\n            file = open('./compressPDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Create parameters for the job\n            compress_pdf_params = CompressPDFParams(compression_level=CompressionLevel.LOW)\n\n            # Creates a new job instance\n            compress_pdf_job = CompressPDFJob(input_asset=input_asset,\n                                              compress_pdf_params=compress_pdf_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(compress_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, CompressPDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/CompressPDFWithOptions.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    CompressPDFWithOptions()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-2\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Compress-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/compresspdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"compressionLevel\": \"MEDIUM\"\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}