{"version":3,"file":"component---src-pages-overview-2-2-0-pdf-services-api-howtos-combine-pdf-md-c3fd6c771ad56785398d.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,qBAAmB,sBAE3B,eACE,GAAM,iBAAe,kBAEvB,sFACA,SAACT,EAAS,CAACU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCH,QAAQ,eAC9F,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBAAqB,ypDAwCtC,eACE,GAAM,OAAK,SAEb,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,28DAsDtC,eACE,GAAM,WAAS,YAEjB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,8uDAuCtC,eACE,GAAM,YAAU,aAElB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,qpDA0CtC,eACE,GAAM,qCAAmC,sCAE3C,2NAGA,SAACb,EAAS,CAACU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCH,QAAQ,eAC9F,eACE,GAAM,UAAQ,SAEhB,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBAAqB,0hGAmEtC,eACE,GAAM,SAAO,SAEf,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,u4GAmFtC,eACE,GAAM,aAAW,YAEnB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,q8FAiEtC,eACE,GAAM,cAAY,aAEpB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,+xEAkE1C,CAEAN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/2.2.0/pdf-services-api/howtos/combine-pdf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"combine-pdf-files\"\n    }}>{`Combine PDF Files`}</h1>\n    <h2 {...{\n      \"id\": \"combine-files\"\n    }}>{`Combine Files`}</h2>\n    <p>{`This sample combines up to 20 PDF files into a single PDF file.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.combinepdf.CombinePDF\n \n public class CombinePDF {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(CombinePDF.class);\n\n   public static void main(String[] args) {\n     try {\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile(\"pdfservices-api-credentials.json\")\n           .build();\n\n       //Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       CombineFilesOperation combineFilesOperation = CombineFilesOperation.createNew();\n\n       // Add operation input from source files.\n       FileRef combineSource1 = FileRef.createFromLocalFile(\"src/main/resources/combineFilesInput1.pdf\");\n       FileRef combineSource2 = FileRef.createFromLocalFile(\"src/main/resources/combineFilesInput2.pdf\");\n       combineFilesOperation.addInput(combineSource1);\n       combineFilesOperation.addInput(combineSource2);\n\n       // Execute the operation.\n       FileRef result = combineFilesOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       result.saveAs(\"output/combineFilesOutput.pdf\");\n\n     } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n       LOGGER.error(\"Exception encountered while executing operation\", e);\n     }\n   }\n }\n  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CombinePDF/\n// dotnet run CombinePDF.csproj\n\n namespace CombinePDF\n {\n   class Program\n   {\n     private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n     static void Main()\n     {\n       //Configure the logging\n       ConfigureLogging();\n       try\n       {\n         // Initial setup, create credentials instance.\n         Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                 .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                 .Build();\n\n         //Create an ExecutionContext using credentials and create a new operation instance.\n         ExecutionContext executionContext = ExecutionContext.Create(credentials);\n         CombineFilesOperation combineFilesOperation = CombineFilesOperation.CreateNew();\n\n         // Add operation input from source files.\n         FileRef combineSource1 = FileRef.CreateFromLocalFile(@\"combineFilesInput1.pdf\");\n         FileRef combineSource2 = FileRef.CreateFromLocalFile(@\"combineFilesInput2.pdf\");\n         combineFilesOperation.AddInput(combineSource1);\n         combineFilesOperation.AddInput(combineSource2);\n\n         // Execute the operation.\n         FileRef result = combineFilesOperation.Execute(executionContext);\n\n         // Save the result to the specified location.\n         result.SaveAs(Directory.GetCurrentDirectory() + \"/output/combineFilesOutput.pdf\");\n\n       }\n       catch (ServiceUsageException ex)\n       {\n         log.Error(\"Exception encountered while executing operation\", ex);\n       }\n       // Catch more errors here. . .\n     }\n\n     static void ConfigureLogging()\n     {\n       ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n       XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n     }\n   }\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/combinepdf/combine-pdf.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials = PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        combineFilesOperation = PDFServicesSdk.CombineFiles.Operation.createNew();\n \n    // Set operation input from a source file.\n    const combineSource1 = PDFServicesSdk.FileRef.createFromLocalFile('resources/combineFilesInput1.pdf'),\n        combineSource2 = PDFServicesSdk.FileRef.createFromLocalFile('resources/combineFilesInput2.pdf');\n    combineFilesOperation.addInput(combineSource1);\n    combineFilesOperation.addInput(combineSource2);\n \n    // Execute the operation and Save the result to the specified location.\n    combineFilesOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/combineFilesOutput.pdf'))\n        .catch(err => {\n            if (err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-combinePDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"documentsIn\\\\\": [{\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile1\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile2\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }]\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-916ee91c156b42349a7847a7d564fb13\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOut\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"OutputFile\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile1=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile2=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"combine-pages-from-multiple-files\"\n    }}>{`Combine pages from multiple files`}</h2>\n    <p>{`This combine sample combines specific pages from up to 20 different PDF\nfiles into a single PDF file. Optional arguments allow specifying page\nranges for each file to combine in the output file.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.combinepdf.CombinePDFWithPageRanges\n \n public class CombinePDFWithPageRanges {\n \n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(CombinePDFWithPageRanges.class);\n \n    public static void main(String[] args) {\n \n      try {\n \n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile(\"pdfservices-api-credentials.json\")\n            .build();\n \n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        CombineFilesOperation combineFilesOperation = CombineFilesOperation.createNew();\n \n        // Create a FileRef instance from a local file.\n        FileRef firstFileToCombine = FileRef.createFromLocalFile(\"src/main/resources/combineFileWithPageRangeInput1.pdf\");\n        PageRanges pageRangesForFirstFile = getPageRangeForFirstFile();\n        // Add the first file as input to the operation, along with its page range.\n        combineFilesOperation.addInput(firstFileToCombine, pageRangesForFirstFile);\n \n        // Create a second FileRef instance using a local file.\n        FileRef secondFileToCombine = FileRef.createFromLocalFile(\"src/main/resources/combineFileWithPageRangeInput2.pdf\");\n        PageRanges pageRangesForSecondFile = getPageRangeForSecondFile();\n        // Add the second file as input to the operation, along with its page range.\n        combineFilesOperation.addInput(secondFileToCombine, pageRangesForSecondFile);\n \n        // Execute the operation.\n        FileRef result = combineFilesOperation.execute(executionContext);\n \n        // Save the result to the specified location.\n        result.saveAs(\"output/combineFilesWithPageOptionsOutput.pdf\");\n \n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error(\"Exception encountered while executing operation\", ex);\n      }\n    }\n \n    private static PageRanges getPageRangeForSecondFile() {\n      // Specify which pages of the second file are to be included in the combined file.\n      PageRanges pageRangesForSecondFile = new PageRanges();\n      // Add all pages including and after page 3.\n      pageRangesForSecondFile.addAllFrom(3);\n      return pageRangesForSecondFile;\n    }\n \n    private static PageRanges getPageRangeForFirstFile() {\n      // Specify which pages of the first file are to be included in the combined file.\n      PageRanges pageRangesForFirstFile = new PageRanges();\n      // Add page 1.\n      pageRangesForFirstFile.addSinglePage(1);\n      // Add page 2.\n      pageRangesForFirstFile.addSinglePage(2);\n      // Add pages 3 to 4.\n      pageRangesForFirstFile.addRange(3, 4);\n      return pageRangesForFirstFile;\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd CombinePDFWithPageRanges/\n// dotnet run CombinePDFWithPageRanges.csproj\n\n  namespace CombinePDFWithPageRanges\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n \n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          CombineFilesOperation combineFilesOperation = CombineFilesOperation.CreateNew();\n \n          // Create a FileRef instance from a local file.\n          FileRef firstFileToCombine = FileRef.CreateFromLocalFile(@\"combineFileWithPageRangeInput1.pdf\");\n          PageRanges pageRangesForFirstFile = GetPageRangeForFirstFile();\n          // Add the first file as input to the operation, along with its page range.\n          combineFilesOperation.AddInput(firstFileToCombine, pageRangesForFirstFile);\n \n          // Create a second FileRef instance using a local file.\n          FileRef secondFileToCombine = FileRef.CreateFromLocalFile(@\"combineFileWithPageRangeInput2.pdf\");\n          PageRanges pageRangesForSecondFile = GetPageRangeForSecondFile();\n          // Add the second file as input to the operation, along with its page range.\n          combineFilesOperation.AddInput(secondFileToCombine, pageRangesForSecondFile);\n \n          // Execute the operation.\n          FileRef result = combineFilesOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + \"/output/combineFilesOutput.pdf\");\n \n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      private static PageRanges GetPageRangeForSecondFile()\n      {\n        // Specify which pages of the second file are to be included in the combined file.\n        PageRanges pageRangesForSecondFile = new PageRanges();\n        // Add all pages including and after page 5.\n        pageRangesForSecondFile.AddAllFrom(5);\n        return pageRangesForSecondFile;\n      }\n \n      private static PageRanges GetPageRangeForFirstFile()\n      {\n        // Specify which pages of the first file are to be included in the combined file.\n        PageRanges pageRangesForFirstFile = new PageRanges();\n        // Add page 2.\n        pageRangesForFirstFile.AddSinglePage(2);\n        // Add page 3.\n        pageRangesForFirstFile.AddSinglePage(3);\n        // Add pages 5 to 7.\n        pageRangesForFirstFile.AddRange(5, 7);\n        return pageRangesForFirstFile;\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/combinepdf/combine-pdf-with-page-ranges.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n \n  const getPageRangesForFirstFile = () => {\n    // Specify which pages of the first file are to be included in the combined file.\n    const pageRangesForFirstFile = new PDFServicesSdk.PageRanges();\n    // Add page 1.\n    pageRangesForFirstFile.addSinglePage(1);\n    // Add page 2.\n    pageRangesForFirstFile.addSinglePage(2);\n    // Add pages 3 to 4.\n    pageRangesForFirstFile.addPageRange(3, 4);\n    return pageRangesForFirstFile;\n  };\n \n  const getPageRangesForSecondFile = () => {\n    // Specify which pages of the second file are to be included in the combined file.\n    const pageRangesForSecondFile = new PDFServicesSdk.PageRanges();\n    // Add all pages including and after page 3.\n    pageRangesForSecondFile.addAllFrom(3);\n    return pageRangesForSecondFile;\n  };\n \n  try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        combineFilesOperation = PDFServicesSdk.CombineFiles.Operation.createNew();\n \n    // Create a FileRef instance from a local file.\n    const combineSource1 = PDFServicesSdk.FileRef.createFromLocalFile('resources/combineFilesInput1.pdf'),\n        pageRangesForFirstFile = getPageRangesForFirstFile();\n    // Add the first file as input to the operation, along with its page range.\n    combineFilesOperation.addInput(combineSource1, pageRangesForFirstFile);\n \n    // Create a second FileRef instance using a local file.\n    const combineSource2 = PDFServicesSdk.FileRef.createFromLocalFile('resources/combineFilesInput2.pdf'),\n        pageRangesForSecondFile = getPageRangesForSecondFile();\n    // Add the second file as input to the operation, along with its page range.\n    combineFilesOperation.addInput(combineSource2, pageRangesForSecondFile);\n \n    // Execute the operation and Save the result to the specified location.\n    combineFilesOperation.execute(executionContext)\n        .then(result => result.saveAsFile('output/combineFilesWithPageRangesOutput.pdf'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-combinePDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"documentsIn\\\\\": [{\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 4\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile1\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }, {\n            \\\\\"pageRanges\\\\\": {\n                \\\\\"cpf:inline\\\\\": [{\n                    \\\\\"start\\\\\": 1\n                }, {\n                    \\\\\"end\\\\\": 25\n                }, {\n                    \\\\\"start\\\\\": 1,\n                    \\\\\"end\\\\\": 25\n                }]\n            },\n            \\\\\"documentIn\\\\\": {\n                \\\\\"cpf:location\\\\\": \\\\\"InputFile2\\\\\",\n                \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n            }\n        }]\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-916ee91c156b42349a7847a7d564fb13\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOut\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"OutputFile\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile1=@\"{{Placeholder for input file (absolute path)}}\"' \\\\\n--form 'InputFile2=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}