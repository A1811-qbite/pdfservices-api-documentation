"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9492],{25951:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return m}});var i=t(87462),r=t(45987),o=(t(15007),t(64983)),a=t(91515);const c=["components"],s={},l=(p="CodeBlock",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var p;const d={_frontmatter:s},u=a.Z;function m(e){let{components:n}=e,t=(0,r.Z)(e,c);return(0,o.mdx)(u,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"linearize-pdfs"},"Linearize PDFs"),(0,o.mdx)("h2",{id:"linearize-pdf"},"Linearize PDF"),(0,o.mdx)("p",null,"Linearizing a PDF creates a web-optimized PDF file which supports\nincremental access in network environments."),(0,o.mdx)(l,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, REST API",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.linearizepdf.LinearizePDF\n \n     public class LinearizePDF {\n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(LinearizePDF.class);\n    \n       public static void main(String[] args) {\n    \n           try {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                       .fromFile("pdfservices-api-credentials.json")\n                       .build();\n    \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.create(credentials);\n               LinearizePDFOperation linearizePDFOperation = LinearizePDFOperation.createNew();\n    \n               // Set operation input from a source file.\n               FileRef source = FileRef.createFromLocalFile("src/main/resources/linearizePDFInput.pdf");\n               linearizePDFOperation.setInput(source);\n    \n               // Execute the operation\n               FileRef result = linearizePDFOperation.execute(executionContext);\n    \n               // Save the result at the specified location\n               result.saveAs("output/linearizePDFOutput.pdf");\n    \n           } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n               LOGGER.error("Exception encountered while executing operation", ex);\n           }\n       }\n     }\n')),(0,o.mdx)("h4",{id:"net"},".NET"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd LinearizePDF/\n// dotnet run LinearizePDF.csproj\n\n namespace LinearizePDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                               .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                               .Build();\n\n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               LinearizePDFOperation linearizePDFOperation = LinearizePDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"linearizePDFInput.pdf");\n               linearizePDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = linearizePDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/linearizePDFOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,o.mdx)("h4",{id:"node-js"},"Node JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/linearizepdf/linearize-pdf.js\n\n   const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n  \n   try {\n     // Initial setup, create credentials instance.\n     const credentials =  PDFServicesSdk.Credentials\n         .serviceAccountCredentialsBuilder()\n         .fromFile(\"pdfservices-api-credentials.json\")\n         .build();\n  \n     // Create an ExecutionContext using credentials and create a new operation instance.\n     const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n         linearizePDF = PDFServicesSdk.LinearizePDF,\n         linearizePDFOperation = linearizePDF.Operation.createNew();\n  \n     // Set operation input from a source file.\n     const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/linearizePDFInput.pdf');\n     linearizePDFOperation.setInput(input);\n  \n     // Execute the operation and Save the result to the specified location.\n     linearizePDFOperation.execute(executionContext)\n         .then(result => result.saveAsFile('output/linearizePDFOutput.pdf'))\n         .catch(err => {\n             if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                 || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                 console.log('Exception encountered while executing operation', err);\n             } else {\n                 console.log('Exception encountered while executing operation', err);\n             }\n         });\n   } catch (err) {\n     console.log('Exception encountered while executing operation', err);\n   }\n")),(0,o.mdx)("h4",{id:"rest-api"},"REST API"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-linearizePDF\n\ncurl --location --request POST \'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--header \'Accept: application/json, text/plain, */*\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Prefer: respond-async,wait=0\' \\\n--form \'contentAnalyzerRequests="{\n    \\"cpf:inputs\\": {\n        \\"documentIn\\": {\n            \\"cpf:location\\": \\"InputFile0\\",\n            \\"dc:format\\": \\"application/pdf\\"\n        }\n    },\n    \\"cpf:engine\\": {\n        \\"repo:assetId\\": \\"urn:aaid:cpf:Service-e4d5f0b75e5d43ea9eaa187860772d27\\"\n    },\n    \\"cpf:outputs\\": {\n        \\"documentOut\\": {\n            \\"cpf:location\\": \\"multipartLabelOut\\",\n            \\"dc:format\\": \\"application/pdf\\"\n        }\n    }\n}"\' \\\n--form \'InputFile0=@"{{Placeholder for input file (absolute path)}}"\'\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-legacy-documentation-pdf-services-api-howtos-linearize-pdf-md-568f1bd290c2844c2f61.js.map