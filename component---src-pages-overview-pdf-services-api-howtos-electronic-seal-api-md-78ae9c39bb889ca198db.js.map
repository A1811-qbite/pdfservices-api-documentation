{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-electronic-seal-api-md-78ae9c39bb889ca198db.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-electronic-seal-api/howtos/electronic-seal-api.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"pdf-electronic-seal-api\"\n    }}>{`PDF Electronic Seal API`}</h1>\n    <h2 {...{\n      \"id\": \"api-parameters\"\n    }}>{`API Parameters`}</h2>\n    <h3 {...{\n      \"id\": \"signature-format-signatureformat\"\n    }}>{`Signature Format (`}<em parentName=\"h3\">{`signatureFormat`}</em>{`)`}</h3>\n    <p>{`Specifies a supported digital signature format:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`PADES : This is the latest and improved signature format which is more strict, concrete, and secure. For details, see `}<a href=\"/pdfservices-api-documentation/assets/5b15559b96303194340b99820d3a70fa/PDF_ISO_32000-2.pdf\" target=\"_blank\">{`ISO 32000-2`}</a>{` and `}<a href=\"/pdfservices-api-documentation/assets/70fef5ab21077e8ef86384a148080a0d/ETSI_EN_319_142-1.pdf\" target=\"_blank\">{`ETSI EN 319 142-1`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`PKCS7 : This signature format is less stringent than PADES since it permits more PDF changes without invalidating the digital signature. This is the default signature format. For details, see `}<a href=\"/pdfservices-api-documentation/assets/35e4369068f86065372c18787171a17e/PDF_ISO_32000-1.pdf\" target=\"_blank\">{`ISO 32000-1`}</a>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"tsp-credential-information-csccredentialoptions--required\"\n    }}>{`TSP Credential Information (`}<em parentName=\"h3\">{`cscCredentialOptions`}</em>{`) : `}<strong parentName=\"h3\">{`Required`}</strong></h3>\n    <p>{`TSP parameters encapsulate the sealer's `}<a parentName=\"p\" {...{\n        \"href\": \"../gettingstarted/#step-1-procure-digital-certificate-credentials\"\n      }}>{`certificate credential`}</a>{` as well as the associated authentication and authorization data.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`TSP Name`}</strong>{`  (`}<em parentName=\"p\">{`providerName`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Specifies the name of the Trust Service Provider used to generate the certificate. Presently, only TSPs supporting the OAuth 2.0 client credential authorization flow are supported. The table below provides the provider name mapping for each supported Trust Service Provider.\n`}<span parentName=\"p\" {...{\n            \"className\": \"gatsby-resp-image-wrapper\",\n            \"style\": {\n              \"position\": \"relative\",\n              \"display\": \"block\",\n              \"marginLeft\": \"auto\",\n              \"marginRight\": \"auto\",\n              \"maxWidth\": \"1280px\"\n            }\n          }}>{`\n      `}<span parentName=\"span\" {...{\n              \"className\": \"gatsby-resp-image-background-image\",\n              \"style\": {\n                \"paddingBottom\": \"39.6875%\",\n                \"position\": \"relative\",\n                \"bottom\": \"0\",\n                \"left\": \"0\",\n                \"display\": \"block\",\n                \"transition\": \"opacity 0.5s 0.5s\",\n                \"pointerEvents\": \"none\"\n              }\n            }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/5530d/provider_mapping_ss.webp 320w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0c8fb/provider_mapping_ss.webp 640w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/94b1e/provider_mapping_ss.webp 1280w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0b34d/provider_mapping_ss.webp 1920w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/5b50e/provider_mapping_ss.webp 2160w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/webp\"\n              }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/dd4a7/provider_mapping_ss.png 320w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/0f09e/provider_mapping_ss.png 640w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/bbbf7/provider_mapping_ss.png 1280w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/ac7a9/provider_mapping_ss.png 1920w\", \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/36aa2/provider_mapping_ss.png 2160w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/png\"\n              }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                \"className\": \"gatsby-resp-image-image\",\n                \"src\": \"/pdfservices-api-documentation/static/3e2c5fe305fa01843ea54b4643a87106/bbbf7/provider_mapping_ss.png\",\n                \"alt\": \"TSP Name Mapping\",\n                \"title\": \"TSP Name Mapping\",\n                \"loading\": \"lazy\",\n                \"style\": {\n                  \"width\": \"100%\",\n                  \"height\": \"100%\",\n                  \"margin\": \"0\",\n                  \"verticalAlign\": \"middle\",\n                  \"position\": \"absolute\",\n                  \"opacity\": \"0\",\n                  \"transition\": \"opacity 0.5s\",\n                  \"color\": \"inherit\",\n                  \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                  \"top\": \"0\",\n                  \"left\": \"0\"\n                }\n              }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`TSP Credential Id`}</strong>{`  (`}<em parentName=\"p\">{`credentialId`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Specifies the Digital ID stored with the TSP that should be used for sealing.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`TSP Authorization Context`}</strong>{`  (`}<em parentName=\"p\">{`authorizationContext`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Encapsulates the authorization data required to communicate with the TSPs.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Access Token`}</strong>{`  (`}<em parentName=\"li\">{`accessToken`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : Specifies the access token used to authorize access to the CSC provider hosted APIs.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Token Type`}</strong>{` (`}<em parentName=\"li\">{`tokenType`}</em>{`): Specifies the type of access token. Default value is \"Bearer\".`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`TSP Credential Authorization Parameter`}</strong>{`  (`}<em parentName=\"p\">{`credentialAuthParameters`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Encapsulates the credential authorization information required to authorize access to their digital certificate.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`PIN`}</strong>{`  (`}<em parentName=\"li\">{`pin`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : Specifies the PIN associated with TSP provided credential ID.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"seal-field-parameters---sealfieldoptions--required\"\n    }}>{`Seal Field Parameters   (`}<em parentName=\"h3\">{`sealFieldOptions`}</em>{`) : `}<strong parentName=\"h3\">{`Required`}</strong></h3>\n    <p>{`The seal field parameters are required to create a new signature field or use an existing signature field.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Field Name`}</strong>{`  (`}<em parentName=\"p\">{`fieldName`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Specifies the signature field's name. This must be a non-empty string. If signature field with this field name already exists, that field is used. else a signature field with this name will be created.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Visible`}</strong>{` (`}<em parentName=\"p\">{`visible`}</em>{`): Specifies whether the signature field should be visible or hidden. The default value of `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` creates a visible seal.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Page Number`}</strong>{` (`}<em parentName=\"p\">{`pageNumber`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Specifies the page number to which the signature field should be attached. Page numbers are 1-based. It is only `}<b>{`required`}</b>{` if the signature field does not exist in the pdf document. If this is provided along with the signature field then the page number should be same on which signature field is present in the document, else an error is thrown.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Location`}</strong>{` (`}<em parentName=\"p\">{`location`}</em>{`) : `}<strong parentName=\"p\">{`Required`}</strong>{` : Specifies the coordinates of the seal appearance's bounding box in default PDF user space units. The location is only `}<b>{`required`}</b>{` if the signature field does not exist in the pdf document. If this is provided along with the existing signature field, then it is ignored.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Left`}</strong>{` (`}<em parentName=\"li\">{`left`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : The left x-coordinate`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Bottom`}</strong>{` (`}<em parentName=\"li\">{`bottom`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : The bottom y-coordinate`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Right`}</strong>{` (`}<em parentName=\"li\">{`right`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : The right x-coordinate`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Top`}</strong>{` (`}<em parentName=\"li\">{`top`}</em>{`) : `}<strong parentName=\"li\">{`Required`}</strong>{` : The top y-coordinate`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`To add the signature field explicitly, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.com/sign/hub/how-to/add-a-signature-block-to-pdf\"\n      }}>{`how to place a signature field in a PDF`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"seal-appearance-parameters-sealappearanceoptions\"\n    }}>{`Seal Appearance Parameters (`}<em parentName=\"h3\">{`sealAppearanceOptions`}</em>{`)`}</h3>\n    <p>{`Specifies seal field appearance parameters. These are an enumerated set of display items: NAME, DATE, DISTINGUISHED_NAME, LABELS and SEAL_IMAGE.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Display Options`}</strong>{`  (`}<em parentName=\"p\">{`displayOptions`}</em>{`): Specifies the information to display in the seal. NAME and LABELS are the default values.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`NAME`}</strong>{`: Specifies that the certificate owner's name should be displayed.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1180px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"23.75%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/5530d/name_ss.webp 320w\", \"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/0c8fb/name_ss.webp 640w\", \"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/f490a/name_ss.webp 1180w\"],\n                  \"sizes\": \"(max-width: 1180px) 100vw, 1180px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/dd4a7/name_ss.png 320w\", \"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/0f09e/name_ss.png 640w\", \"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/2561a/name_ss.png 1180w\"],\n                  \"sizes\": \"(max-width: 1180px) 100vw, 1180px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/cb550f335a08be57c73c93859d39c6de/2561a/name_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span></li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`DATE`}</strong>{`: Specifies that the sealing date/time should be displayed. This value should not be mistaken for a signed timestamp from a timestamp authority.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1178px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"20.625%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/5530d/date_ss.webp 320w\", \"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/0c8fb/date_ss.webp 640w\", \"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/70acd/date_ss.webp 1178w\"],\n                  \"sizes\": \"(max-width: 1178px) 100vw, 1178px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dd4a7/date_ss.png 320w\", \"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/0f09e/date_ss.png 640w\", \"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dc992/date_ss.png 1178w\"],\n                  \"sizes\": \"(max-width: 1178px) 100vw, 1178px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/cb482d28eb299075d7b3a922a69eae4d/dc992/date_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span></li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`DISTINGUISHED_NAME`}</strong>{`: Specifies that the distinguished name information from the digital certificate should be displayed.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1176px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"23.75%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/5530d/dn_ss.webp 320w\", \"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/0c8fb/dn_ss.webp 640w\", \"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/6fdea/dn_ss.webp 1176w\"],\n                  \"sizes\": \"(max-width: 1176px) 100vw, 1176px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/dd4a7/dn_ss.png 320w\", \"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/0f09e/dn_ss.png 640w\", \"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/08188/dn_ss.png 1176w\"],\n                  \"sizes\": \"(max-width: 1176px) 100vw, 1176px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/dddfd7c5d43b40ebcba8df0c719c7f80/08188/dn_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span></li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`LABELS`}</strong>{`: Specifies that text labels should be displayed.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1178px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"23.75%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/5530d/labels_ss.webp 320w\", \"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/0c8fb/labels_ss.webp 640w\", \"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/70acd/labels_ss.webp 1178w\"],\n                  \"sizes\": \"(max-width: 1178px) 100vw, 1178px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dd4a7/labels_ss.png 320w\", \"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/0f09e/labels_ss.png 640w\", \"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dc992/labels_ss.png 1178w\"],\n                  \"sizes\": \"(max-width: 1178px) 100vw, 1178px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/7aed59a0b1f5822d9487007a4c83fb7d/dc992/labels_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span></li>\n          <li parentName=\"ul\"><strong parentName=\"li\">{`SEAL_IMAGE`}</strong>{`: Specifies the seal image should be displayed.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1174px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"23.75%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/5530d/seal2_ss.webp 320w\", \"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/0c8fb/seal2_ss.webp 640w\", \"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/6ba46/seal2_ss.webp 1174w\"],\n                  \"sizes\": \"(max-width: 1174px) 100vw, 1174px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/dd4a7/seal2_ss.png 320w\", \"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/0f09e/seal2_ss.png 640w\", \"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/683d4/seal2_ss.png 1174w\"],\n                  \"sizes\": \"(max-width: 1174px) 100vw, 1174px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/34f1015f155534a1d02ecf4257d0899b/683d4/seal2_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span>{`\nIf SEAL_IMAGE is given in appearance parameters and seal image is not passed in the request, the default Acrobat trefoil image is used.\n`}<span parentName=\"li\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1174px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"23.75%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/5530d/trefoil_ss.webp 320w\", \"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/0c8fb/trefoil_ss.webp 640w\", \"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/6ba46/trefoil_ss.webp 1174w\"],\n                  \"sizes\": \"(max-width: 1174px) 100vw, 1174px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/dd4a7/trefoil_ss.png 320w\", \"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/0f09e/trefoil_ss.png 640w\", \"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/683d4/trefoil_ss.png 1174w\"],\n                  \"sizes\": \"(max-width: 1174px) 100vw, 1174px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/pdfservices-api-documentation/static/d50b8ee490d3a6c6c134ebbd40f6e614/683d4/trefoil_ss.png\",\n                  \"alt\": \"Display Options\",\n                  \"title\": \"Display Options\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span></li>\n        </ul>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example JSON`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"signatureFormat\": \"PADES\",\n  \"cscCredentialOptions\": {\n    \"authorizationContext\": {\n      \"accessToken\": \"<ACCESS_TOKEN>\",\n      \"tokenType\": \"Bearer\"\n    },\n    \"credentialAuthParameters\": {\n      \"pin\": \"<PIN>\"\n    },\n    \"providerName\": \"<PROVIDER_NAME>\",\n    \"credentialId\": \"<CREDENTIAL_ID>\"\n  },\n  \"sealFieldOptions\": {\n    \"pageNumber\": 1,\n    \"fieldName\": \"Signature1\",\n    \"visible\": true,\n    \"location\": {\n      \"top\": 300,\n      \"bottom\": 250,\n      \"left\": 300,\n      \"right\": 500\n    }\n  },\n  \"sealAppearanceOptions\": {\n    \"displayOptions\": [\n      \"NAME\",\n      \"DATE\",\n      \"LABELS\",\n      \"DISTINGUISHED_NAME\",\n      \"SEAL_IMAGE\"\n    ]\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"api-limitations\"\n    }}>{`API limitations`}</h2>\n    <br />\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Input PDF size:`}</strong>{` Input PDF files up to a maximum of 100 MB are supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Seal Image size:`}</strong>{` Seal Image files up to a maximum of 5 MB are supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Seal Image formats:`}</strong>{` Supported Seal Image formats are JPEG(image/jpeg), PNG(image/png) and PDF(application/pdf).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Password-protected Files:`}</strong>{` Encrypted or Password-protected PDFs are not supported for applying electronic seal.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Signed/Sealed Files:`}</strong>{` Any PDF which is already signed, certified or sealed cannot be used for applying electronic seal.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Input PDF version:`}</strong>{` Input PDF with version less than 1.3 are not supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Usage Rights File:`}</strong>{` Input PDF having usage rights are not supported.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`REST API`}</h2>\n    <p>{`See our public API Reference for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../apis/#tag/PDF-Electronic-Seal\"\n      }}>{`PDF Electronic Seal API`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"apply-electronic-seal-with-default-appearance-on-pdf\"\n    }}>{`Apply Electronic Seal with default appearance on PDF`}</h2>\n    <p>{`The sample below performs electronic seal operation with default appearance on a given PDF.`}</p>\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.electronicseal.ElectronicSeal\n\npackage com.adobe.pdfservices.operation.samples.electronicseal;\n\npublic class ElectronicSeal {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElectronicSeal.class);\n\n    public static void main(String[] args) {\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.servicePrincipalCredentialsBuilder()\n                .withClientId(\"PDF_SERVICES_CLIENT_ID\")\n                .withClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                .build();\n\n            // Create an ExecutionContext using credentials.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n        \n            //Get the input document to perform the sealing operation\n            FileRef sourceFile = FileRef.createFromLocalFile(\"src/main/resources/sampleInvoice.pdf\");\n        \n            //Get the background seal image for signature , if required.\n            FileRef sealImageFile = FileRef.createFromLocalFile(\"src/main/resources/sampleSealImage.png\");\n        \n            //Set the Seal Field Name to be created in input PDF document.\n            String sealFieldName = \"Signature1\";\n        \n            //Set the page number in input document for applying seal.\n            Integer sealPageNumber = 1;\n        \n            //Set if seal should be visible or invisible.\n            Boolean sealVisible = true;\n        \n            //Create FieldLocation instance and set the coordinates for applying signature\n            FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n        \n            //Create FieldOptions instance with required details.\n            FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                .setFieldLocation(fieldLocation)\n                .setPageNumber(sealPageNumber)\n                .setVisible(sealVisible)\n                .build();\n        \n            //Set the name of TSP Provider being used.\n            String providerName = \"<PROVIDER_NAME>\";\n        \n            //Set the access token to be used to access TSP provider hosted APIs.\n            String accessToken = \"<ACCESS_TOKEN>\";\n        \n            //Set the credential ID.\n            String credentialID = \"<CREDENTIAL_ID>\";\n        \n            //Set the PIN generated while creating credentials.\n            String pin = \"<PIN>\";\n        \n            //Create CSCAuthContext instance using access token and token type.\n            CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, \"Bearer\");\n        \n            //Create CertificateCredentials instance with required certificate details.\n            CertificateCredentials certificateCredentials = CertificateCredentials.cscCredentialBuilder()\n                .withProviderName(providerName)\n                .withCredentialID(credentialID)\n                .withPin(pin)\n                .withCSCAuthContext(cscAuthContext)\n                .build();\n        \n            //Create SealOptions instance with sealing parameters.\n            SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, fieldOptions).build();\n        \n            //Create the PDFElectronicSealOperation instance using the SealOptions instance\n            PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.createNew(sealOptions);\n        \n            //Set the input source file for PDFElectronicSealOperation instance\n            pdfElectronicSealOperation.setInput(sourceFile);\n        \n            //Set the optional input seal image for PDFElectronicSealOperation instance\n            pdfElectronicSealOperation.setSealImage(sealImageFile);\n        \n            //Execute the operation\n            FileRef result = pdfElectronicSealOperation.execute(executionContext);\n    \n            //Save the output at specified location\n            result.saveAs(\"output/sealedOutput.pdf\");\n\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error(\"Exception encountered while executing operation\", ex);\n        }\n    }\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ElectronicSeal/\n// dotnet run ElectronicSeal.csproj\n\nnamespace ElectronicSeal\n{\n    class Program\n    {\n        // Initialize the logger.\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n\n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n                //Set the input document to perform the sealing operation\n                FileRef sourceFile = FileRef.CreateFromLocalFile(@\"SampleInvoice.pdf\");\n\n                //Set the background seal image for signature , if required.\n                FileRef sealImageFile = FileRef.CreateFromLocalFile(@\"sampleSealImage.png\");\n\n                //Set the Seal Field Name to be created in input PDF document.\n                string sealFieldName = \"Signature1\";\n\n                //Set the page number in input document for applying seal.\n                int sealPageNumber = 1;\n\n                //Set if seal should be visible or invisible.\n                bool sealVisible = true;\n\n                //Create FieldLocation instance and set the coordinates for applying signature\n                FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n\n                //Create FieldOptions instance with required details.\n                FieldOptions sealFieldOptions = new FieldOptions.Builder(sealFieldName)\n                .SetVisible(sealVisible)\n                .SetFieldLocation(fieldLocation)\n                .SetPageNumber(sealPageNumber)\n                .Build();\n\n                //Set the name of TSP Provider being used.\n                string providerName = \"<PROVIDER_NAME>\";\n\n                //Set the access token to be used to access TSP provider hosted APIs.\n                string accessToken = \"<ACCESS_TOKEN>\";\n\n                //Set the credential ID.\n                string credentialID = \"<CREDENTIAL_ID>\";\n\n                //Set the PIN generated while creating credentials.\n                string pin = \"<PIN>\";\n\n                CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, \"Bearer\");\n\n                //Create CertificateCredentials instance with required certificate details.\n                CertificateCredentials certificateCredentials = CertificateCredentials.CSCCredentialBuilder()\n                .WithProviderName(providerName)\n                .WithCredentialID(credentialID)\n                .WithPin(pin)\n                .WithCSCAuthContext(cscAuthContext)\n                .Build();\n\n                //Create SealingOptions instance with all the sealing parameters.\n                SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, sealFieldOptions).Build();\n\n                //Create the PDFElectronicSealOperation instance using the PDFElectronicSealOptions instance\n                PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.CreateNew(sealOptions);\n\n                //Set the input source file for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetInput(sourceFile);\n\n                //Set the optional input seal image for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetSealImage(sealImageFile);\n\n                //Execute the operation\n                FileRef result = pdfElectronicSealOperation.Execute(executionContext);\n\n                // Save the output at specified location.\n                result.SaveAs(output/sealedOutput.pdf);\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (ServiceApiException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (SDKException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (IOException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (Exception ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n\n        }\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/electronicseal/electronic-seal.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\ntry {\n        // Initial setup, create credentials instance.\n        const credentials =  PDFServicesSdk.Credentials\n            .servicePrincipalCredentialsBuilder()\n            .withClientId(\"PDF_SERVICES_CLIENT_ID\")\n            .withClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n            .build();\n\n        // Create an ExecutionContext using credentials\n        const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n    \n        const pdfElectronicSeal = PDFServicesSdk.PDFElectronicSeal,\n            options = pdfElectronicSeal.options;\n    \n        //Get the input document to perform the sealing operation\n        const sourceFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/sampleInvoice.pdf'),\n    \n            //Get the background seal image for signature , if required.\n            sealImageFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/sampleSealImage.png');\n    \n        // Set the Seal Field Name to be created in input PDF document.\n        sealFieldName = \"Signature1\";\n    \n        // Set the page number in input document for applying seal.\n        sealPageNumber = 1;\n    \n        // Set if seal should be visible or invisible.\n        sealVisible = true;\n    \n        //Create FieldLocation instance and set the coordinates for applying signature\n        fieldLocation = new options.FieldLocation(150,250,350,200);\n    \n        //Create FieldOptions instance with required details.\n        fieldOptions = new options.FieldOptions.Builder(sealFieldName)\n            .setFieldLocation(fieldLocation)\n            .setPageNumber(sealPageNumber)\n            .setVisible(sealVisible)\n            .build();\n    \n        //Set the name of TSP Provider being used.\n        providerName = \"<PROVIDER_NAME>\";\n    \n        //Set the access token to be used to access TSP provider hosted APIs.\n        accessToken = \"<ACCESS_TOKEN>\";\n    \n        //Set the credential ID.\n        credentialID = \"<CREDENTIAL_ID>\";\n    \n        //Set the PIN generated while creating credentials.\n        pin = \"<PIN>\";\n    \n        //Create CSCAuthContext instance using access token and token type.\n        cscAuthContext = new options.CSCAuthContext(accessToken, \"Bearer\");\n    \n        //Create CertificateCredentials instance with required certificate details.\n        certificateCredentials = options.CertificateCredentials.cscCredentialBuilder()\n            .withProviderName(providerName)\n            .withCredentialID(credentialID)\n            .withPin(pin)\n            .withCSCAuthContext(cscAuthContext)\n            .build();\n    \n        //Create SealOptions instance with sealing parameters.\n        sealOptions = new options.SealOptions.Builder(certificateCredentials, fieldOptions)\n            .build()\n    \n        //Create the PDFElectronicSealOperation instance using the SealOptions instance\n        const pdfElectronicSealOperation = pdfElectronicSeal.Operation.createNew(sealOptions);\n    \n        //Set the input source file for PDFElectronicSealOperation instance\n        pdfElectronicSealOperation.setInput(sourceFile);\n    \n        //Set the optional input seal image for PDFElectronicSealOperation instance\n        pdfElectronicSealOperation.setSealImage(sealImageFile);\n\n        // Execute the operation and Save the result to the specified location.\n        pdfElectronicSealOperation.execute(executionContext)\n            .then(result => result.saveAsFile(\"output/sealedOutput.pdf\"))\n            .catch(err => {\n                if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                    || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                    console.log('Exception encountered while executing operation', err);\n                } else {\n                    console.log('Exception encountered while executing operation', err);\n                }\n            });\n    \n    } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`curl --location --request POST 'https://pdf-services.adobe.io/operation/electronicseal' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"inputDocumentAssetID\": \"urn:aaid:AS:UE1:23c30ee0-2c4d-xxxx-xxxx-087832fca718\",\n    \"sealImageAssetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-xxxx-xxxx-087832fca718\",\n    \"sealOptions\": {\n        \"signatureFormat\": \"PKCS7\",\n        \"cscCredentialOptions\": {\n            \"credentialId\": \"<CREDENTIAL_ID>\",\n            \"providerName\": \"<PROVIDER_NAME>\",\n            \"authorizationContext\": {\n                \"tokenType\": \"Bearer\",\n                \"accessToken\": \"<ACCESS_TOKEN>\"\n            },\n            \"credentialAuthParameters\": {\n                \"pin\": \"<PIN>\"\n            }\n        },\n        \"sealFieldOptions\": {\n            \"location\": {\n                \"top\": 300,\n                \"left\": 50,\n                \"right\": 250,\n                \"bottom\": 100\n            },\n            \"fieldName\": \"Signature1\",\n            \"pageNumber\": 1\n        }\n    }\n}'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"apply-electronic-seal-with-customized-appearance-on-pdf\"\n    }}>{`Apply Electronic Seal with customized appearance on PDF`}</h2>\n    <p>{`The sample below performs electronic seal operation with customized appearance on a given PDF.`}</p>\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://github.com/adobe/pdfservices-java-sdk-samples/tree/beta\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.electronicseal.ElectronicSealWithAppearanceOptions\n\npackage com.adobe.pdfservices.operation.samples.electronicseal;\n\npublic class ElectronicSealWithAppearanceOptions {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ElectronicSeal.class);\n\n    public static void main(String[] args) {\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.servicePrincipalCredentialsBuilder()\n                .withClientId(\"PDF_SERVICES_CLIENT_ID\")\n                .withClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                .build();\n\n            // Create an ExecutionContext using credentials.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n        \n            //Get the input document to perform the sealing operation\n            FileRef sourceFile = FileRef.createFromLocalFile(\"src/main/resources/sampleInvoice.pdf\");\n        \n            //Get the background seal image for signature , if required.\n            FileRef sealImageFile = FileRef.createFromLocalFile(\"src/main/resources/sampleSealImage.png\");\n        \n            //Create AppearanceOptions and add the required signature display items to it\n            AppearanceOptions appearanceOptions = new AppearanceOptions();\n            appearanceOptions.addItem(AppearanceItem.NAME);\n            appearanceOptions.addItem(AppearanceItem.LABELS);\n            appearanceOptions.addItem(AppearanceItem.DATE);\n            appearanceOptions.addItem(AppearanceItem.SEAL_IMAGE);\n            appearanceOptions.addItem(AppearanceItem.DISTINGUISHED_NAME);\n        \n            //Set the Seal Field Name to be created in input PDF document.\n            String sealFieldName = \"Signature1\";\n        \n            //Set the page number in input document for applying seal.\n            Integer sealPageNumber = 1;\n        \n            //Set if seal should be visible or invisible.\n            Boolean sealVisible = true;\n        \n            //Create FieldLocation instance and set the coordinates for applying signature\n            FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n        \n            //Create FieldOptions instance with required details.\n            FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                .setFieldLocation(fieldLocation)\n                .setPageNumber(sealPageNumber)\n                .setVisible(sealVisible)\n                .build();\n        \n            //Set the name of TSP Provider being used.\n            String providerName = \"<PROVIDER_NAME>\";\n        \n            //Set the access token to be used to access TSP provider hosted APIs.\n            String accessToken = \"<ACCESS_TOKEN>\";\n        \n            //Set the credential ID.\n            String credentialID = \"<CREDENTIAL_ID>\";\n        \n            //Set the PIN generated while creating credentials.\n            String pin = \"<PIN>\";\n        \n            //Create CSCAuthContext instance using access token and token type.\n            CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, \"Bearer\");\n        \n            //Create CertificateCredentials instance with required certificate details.\n            CertificateCredentials certificateCredentials = CertificateCredentials.cscCredentialBuilder()\n                .withProviderName(providerName)\n                .withCredentialID(credentialID)\n                .withPin(pin)\n                .withCSCAuthContext(cscAuthContext)\n                .build();\n        \n            //Create SealOptions instance with all the sealing parameters.\n            SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, fieldOptions)\n                .withAppearanceOptions(appearanceOptions).build();\n        \n            //Create the PDFElectronicSealOperation instance using the SealOptions instance\n            PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.createNew(sealOptions);\n        \n            //Set the input source file for PDFElectronicSealOperation instance\n            pdfElectronicSealOperation.setInput(sourceFile);\n        \n            //Set the optional input seal image for PDFElectronicSealOperation instance\n            pdfElectronicSealOperation.setSealImage(sealImageFile);\n        \n            //Execute the operation\n            FileRef result = pdfElectronicSealOperation.execute(executionContext);\n    \n            //Save the output at specified location\n            result.saveAs(\"output/sealedOutput.pdf\");\n\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error(\"Exception encountered while executing operation\", ex);\n        }\n    }\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ElectronicSealWithAppearanceOptions/\n// dotnet run ElectronicSealWithAppearanceOptions.csproj\n\nnamespace ElectronicSealWithAppearanceOptions\n{\n    class Program\n    {\n        // Initialize the logger.\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId(\"PDF_SERVICES_CLIENT_ID\")\n                    .WithClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n                    .Build();\n\n\n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n\n                //Set the input document to perform the sealing operation\n                FileRef sourceFile = FileRef.CreateFromLocalFile(@\"SampleInvoice.pdf\");\n\n                //Set the background seal image for signature , if required.\n                FileRef sealImageFile = FileRef.CreateFromLocalFile(@\"sampleSealImage.png\");\n\n                //Create AppearanceOptions and add the required signature appearance items\n                AppearanceOptions appearanceOptions = new AppearanceOptions();\n                appearanceOptions.AddItem(AppearanceItem.NAME);\n                appearanceOptions.AddItem(AppearanceItem.LABELS);\n                appearanceOptions.AddItem(AppearanceItem.DATE);\n                appearanceOptions.AddItem(AppearanceItem.SEAL_IMAGE);\n                appearanceOptions.AddItem(AppearanceItem.DISTINGUISHED_NAME);\n\n                //Set the Seal Field Name to be created in input PDF document.\n                string sealFieldName = \"Signature1\";\n\n                //Set the page number in input document for applying seal.\n                int sealPageNumber = 1;\n\n                //Set if seal should be visible or invisible.\n                bool sealVisible = true;\n\n                //Create FieldLocation instance and set the coordinates for applying signature\n                FieldLocation fieldLocation = new FieldLocation(150, 250, 350, 200);\n                \n                //Create FieldOptions instance with required details.\n                FieldOptions fieldOptions = new FieldOptions.Builder(sealFieldName)\n                    .SetVisible(sealVisible)\n                    .SetFieldLocation(fieldLocation)\n                    .SetPageNumber(sealPageNumber)\n                    .Build();\n\n                //Set the name of TSP Provider being used.\n                string providerName = \"<PROVIDER_NAME>\";\n\n                //Set the access token to be used to access TSP provider hosted APIs.\n                string accessToken = \"<ACCESS_TOKEN>\";\n\n                //Set the credential ID.\n                string credentialID = \"<CREDENTIAL_ID>\";\n\n                //Set the PIN generated while creating credentials.\n                string pin = \"<PIN>\";\n\n                CSCAuthContext cscAuthContext = new CSCAuthContext(accessToken, \"Bearer\");\n\n                //Create CertificateCredentials instance with required certificate details.\n                CertificateCredentials certificateCredentials = CertificateCredentials.CSCCredentialBuilder()\n                    .WithProviderName(providerName)\n                    .WithCredentialID(credentialID)\n                    .WithPin(pin)\n                    .WithCSCAuthContext(cscAuthContext)\n                    .Build();\n                \n                \n                //Create SealingOptions instance with all the sealing parameters.\n                SealOptions sealOptions = new SealOptions.Builder(certificateCredentials, fieldOptions)\n                    .WithAppearanceOptions(appearanceOptions).Build();\n\n                //Create the PDFElectronicSealOperation instance using the SealOptions instance\n                PDFElectronicSealOperation pdfElectronicSealOperation = PDFElectronicSealOperation.CreateNew(sealOptions);\n\n                //Set the input source file for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetInput(sourceFile);\n\n                //Set the optional input seal image for PDFElectronicSealOperation instance\n                pdfElectronicSealOperation.SetSealImage(sealImageFile);\n\n                //Execute the operation\n                FileRef result = pdfElectronicSealOperation.Execute(executionContext);\n\n                // Save the output at specified location.\n                result.SaveAs(output/sealedOutput.pdf);\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (ServiceApiException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (SDKException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (IOException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            catch (Exception ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n\n        }\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/electronicseal/electronic-seal.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\ntry {\n        // Initial setup, create credentials instance.\n        const credentials =  PDFServicesSdk.Credentials\n            .servicePrincipalCredentialsBuilder()\n            .withClientId(\"PDF_SERVICES_CLIENT_ID\")\n            .withClientSecret(\"PDF_SERVICES_CLIENT_SECRET\")\n            .build();\n    \n        // Create an ExecutionContext using credentials\n        const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n    \n        const pdfElectronicSeal = PDFServicesSdk.PDFElectronicSeal,\n            options = pdfElectronicSeal.options;\n    \n        //Get the input document to perform the sealing operation\n        const sourceFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/sampleInvoice.pdf'),\n    \n            //Get the background seal image for signature , if required.\n            sealImageFile = PDFServicesSdk.FileRef.createFromLocalFile('resources/sampleSealImage.png');\n    \n        //Create AppearanceOptions and add the required signature appearance items\n        appearanceOptions = new options.AppearanceOptions();\n        appearanceOptions.addItem(options.AppearanceOptions.AppearanceItem.DATE);\n        appearanceOptions.addItem(options.AppearanceOptions.AppearanceItem.SEAL_IMAGE);\n        appearanceOptions.addItem(options.AppearanceOptions.AppearanceItem.NAME);\n        appearanceOptions.addItem(options.AppearanceOptions.AppearanceItem.LABELS);\n        appearanceOptions.addItem(options.AppearanceOptions.AppearanceItem.DISTINGUISHED_NAME);\n    \n        // Set the Seal Field Name to be created in input PDF document.\n        sealFieldName = \"Signature1\";\n    \n        // Set the page number in input document for applying seal.\n        sealPageNumber = 1;\n    \n        // Set if seal should be visible or invisible.\n        sealVisible = true;\n    \n        //Create FieldLocation instance and set the coordinates for applying signature\n        fieldLocation = new options.FieldLocation(150,250,350,200);\n    \n        //Create FieldOptions instance with required details.\n        fieldOptions = new options.FieldOptions.Builder(sealFieldName)\n            .setFieldLocation(fieldLocation)\n            .setPageNumber(sealPageNumber)\n            .setVisible(sealVisible)\n            .build();\n    \n        //Set the name of TSP Provider being used.\n        providerName = \"<PROVIDER_NAME>\";\n    \n        //Set the access token to be used to access TSP provider hosted APIs.\n        accessToken = \"<ACCESS_TOKEN>\";\n    \n        //Set the credential ID.\n        credentialID = \"<CREDENTIAL_ID>\";\n    \n        //Set the PIN generated while creating credentials.\n        pin = \"<PIN>\";\n    \n        //Create CSCAuthContext instance using access token and token type.\n        cscAuthContext = new options.CSCAuthContext(accessToken, \"Bearer\");\n    \n        //Create CertificateCredentials instance with required certificate details.\n        certificateCredentials = options.CertificateCredentials.cscCredentialBuilder()\n            .withProviderName(providerName)\n            .withCredentialID(credentialID)\n            .withPin(pin)\n            .withCSCAuthContext(cscAuthContext)\n            .build();\n    \n        //Create SealOptions instance with sealing parameters.\n        sealOptions = new options.SealOptions.Builder(certificateCredentials, fieldOptions)\n            .withAppearanceOptions(appearanceOptions)\n            .build()\n    \n        //Create the PDFElectronicSealOperation instance using the SealOptions instance\n        const pdfElectronicSealOperation = pdfElectronicSeal.Operation.createNew(sealOptions);\n    \n        //Set the input source file for PDFElectronicSealOperation instance\n        pdfElectronicSealOperation.setInput(sourceFile);\n    \n        //Set the optional input seal image for PDFElectronicSealOperation instance\n        pdfElectronicSealOperation.setSealImage(sealImageFile);\n\n        // Execute the operation and Save the result to the specified location.\n        pdfElectronicSealOperation.execute(executionContext)\n            .then(result => result.saveAsFile(\"output/sealedOutput.pdf\"))\n            .catch(err => {\n                if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                    || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                    console.log('Exception encountered while executing operation', err);\n                } else {\n                    console.log('Exception encountered while executing operation', err);\n                }\n            });\n    \n    } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-2\"\n    }}>{`REST API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`curl --location --request POST 'https://pdf-services.adobe.io/operation/electronicseal' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"inputDocumentAssetID\": \"urn:aaid:AS:UE1:23c30ee0-2c4d-xxxx-xxxx-087832fca718\",\n    \"sealImageAssetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-xxxx-xxxx-087832fca718\",\n    \"sealOptions\": {\n        \"signatureFormat\": \"PKCS7\",\n        \"cscCredentialOptions\": {\n            \"credentialId\": \"<CREDENTIAL_ID>\",\n            \"providerName\": \"<PROVIDER_NAME>\",\n            \"authorizationContext\": {\n                \"tokenType\": \"Bearer\",\n                \"accessToken\": \"<ACCESS_TOKEN>\"\n            },\n            \"credentialAuthParameters\": {\n                \"pin\": \"<PIN>\"\n            }\n        },\n        \"sealFieldOptions\": {\n            \"location\": {\n                \"top\": 300,\n                \"left\": 50,\n                \"right\": 250,\n                \"bottom\": 100\n            },\n            \"fieldName\": \"Signature1\",\n            \"pageNumber\": 1\n        },\n        \"sealAppearanceOptions\": {\n            \"displayOptions\": [\n                \"NAME\",\n                \"DATE\",\n                \"DISTINGUISHED_NAME\",\n                \"LABELS\",\n                \"SEAL_IMAGE\"\n            ]\n        }\n    }\n}'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","CodeBlock","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","href","target","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}