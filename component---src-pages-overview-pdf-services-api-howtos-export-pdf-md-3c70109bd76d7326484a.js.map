{"version":3,"file":"component---src-pages-overview-pdf-services-api-howtos-export-pdf-md-3c70109bd76d7326484a.js","mappings":"4OAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,cADR,eAGA,2FACA,eACE,GAAM,YADR,aAGA,0DACA,oBACE,eAAIC,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,iCADQ,+CAGpB,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,oCADQ,2BAItB,eACE,GAAM,gBADR,iBAGA,4EAA6D,cAAGA,WAAW,IACvE,KAAQ,gKADiD,sBAA7D,eAKA,oBACE,eAAIA,WAAW,MAAf,kCACA,eAAIA,WAAW,MAAf,gBAEF,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,mBADY,mBAAxB,wCAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCJ,QAAQ,eAC9F,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,0gDAuCL,eACE,GAAM,OADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,o3DAoDL,eACE,GAAM,WADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,olDAuCL,eACE,GAAM,cADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,4nBAiBL,eACE,GAAM,8DADR,iEAGA,4EAA6D,cAAGA,WAAW,IACvE,KAAQ,gKADiD,sBAA7D,eAKA,oBACE,eAAIA,WAAW,MAAf,kCACA,eAAIA,WAAW,MAAf,gBAEF,0HACA,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,mBADY,mBAAxB,wCAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCJ,QAAQ,eAC9F,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,4sEA+CL,eACE,GAAM,SADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,uqEAwDL,eACE,GAAM,aADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,w4DA2CL,eACE,GAAM,cADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,upBAkBL,eACE,GAAM,0BADR,2BAGA,kWAIA,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,mBADY,mBAAxB,wCAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCJ,QAAQ,eAC9F,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,kqDA4CL,eACE,GAAM,SADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,qjEA0DL,eACE,GAAM,aADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,45DA6CL,eACE,GAAM,cADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,0qBAkBL,eACE,GAAM,sCADR,uCAGA,wLACA,uCAAwB,cAAGA,WAAW,IAClC,KAAQ,mBADY,mBAAxB,wCAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,gCAAgCJ,QAAQ,eAC9F,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,gxDAyCL,eACE,GAAM,SADR,SAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,quEAuDL,eACE,GAAM,aADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,6zDA0CL,eACE,GAAM,cADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,wqBAoBR,CAEDH,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-services-api/howtos/export-pdf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"export-pdf\"\n    }}>{`Export PDF`}</h1>\n    <p>{`Export a source PDF file into doc, docx, jpeg, png, pptx, rtf, xlsx.`}</p>\n    <h2 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h2>\n    <p>{`See our public API Reference for : `}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../apis/#tag/Export-PDF\"\n        }}>{`Export PDF to Office format or text files`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../apis/#tag/PDF-To-Images\"\n        }}>{`Export PDF to Images`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"export-a-pdf\"\n    }}>{`Export a PDF`}</h2>\n    <p>{`The sample below converts a PDF file into a number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/pdfservices-java-sdk-samples/apidocs/latest/com/adobe/pdfservices/operation/pdfops/options/exportpdf/ExportPDFTargetFormat.html\"\n      }}>{`supported\nformats`}</a>{`\nsuch as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Microsoft Office file formats`}</li>\n      <li parentName=\"ul\">{`Text files`}</li>\n    </ul>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCX\n\npublic class ExportPDFToDOCX {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCX.class);\n\n   public static void main(String[] args) {\n\n     try {\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile(\"pdfservices-api-credentials.json\")\n           .build();\n       //Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       ExportPDFOperation exportPdfOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.DOCX);\n\n       // Set operation input from a local PDF file\n       FileRef sourceFileRef = FileRef.createFromLocalFile(\"src/main/resources/exportPDFInput.pdf\");\n       exportPdfOperation.setInput(sourceFileRef);\n\n       // Execute the operation.\n       FileRef result = exportPdfOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       result.saveAs(\"output/exportPdfOutput.docx\");\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error(\"Exception encountered while executing operation\", ex);\n     }\n   }\n }\n  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocx.csproj\n\n namespace ExportPDFToDocx\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPdfOutput.docx\");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-pdf-to-docx.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   //Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       exportPDF = PDFServicesSdk.ExportPDF,\n       exportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.DOCX);\n\n   // Set operation input from a source file\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFInput.pdf');\n   exportPdfOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   exportPdfOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/exportPdfOutput.docx'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/exportpdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"docx\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-file-to-a-docx-file-apply-ocr-on-the-pdf-file\"\n    }}>{`Export a PDF file to a DOCX file (apply OCR on the PDF file)`}</h2>\n    <p>{`The sample below converts a PDF file into a number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/pdfservices-java-sdk-samples/apidocs/latest/com/adobe/pdfservices/operation/pdfops/options/exportpdf/ExportPDFTargetFormat.html\"\n      }}>{`supported\nformats`}</a>{`\nsuch as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Microsoft Office file formats`}</li>\n      <li parentName=\"ul\">{`Text files`}</li>\n    </ul>\n    <p>{`OCR processing is also performed on the input PDF file to extract text from images in the document.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCXWithOCROption\n\npublic class ExportPDFToDOCXWithOCROption {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCXWithOCROption.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n            ExportPDFOperation exportPDFOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.DOCX);\n\n            // Set operation input from a source file.\n            FileRef sourceFileRef = FileRef.createFromLocalFile(\"src/main/resources/exportPDFInput.pdf\");\n            exportPDFOperation.setInput(sourceFileRef);\n\n            // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n            ExportPDFOptions exportPDFOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n            exportPDFOperation.setOptions(exportPDFOptions);\n            \n            // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n            ExportPDFOptions exportPDFOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n            exportPDFOperation.setOptions(exportPDFOptions);\n\n            // Execute the operation.\n            FileRef result = exportPDFOperation.execute(executionContext);\n\n            // Save the result to the specified location.\n            result.saveAs(\"output/exportPDFWithOCROptionsOutput.docx\");\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error(\"Exception encountered while executing operation\", ex);\n        }\n    }\n}  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocxWithOCROption.csproj\n\n namespace ExportPDFToDocxWithOCROption\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n\n          // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n          ExportPDFOptions exportPdfOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n          exportPdfOperation.SetOptions(exportPdfOptions);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + \"/output/ExportPDFToDOCXWithOCROption.docx\");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-docx-to-pdf-with-ocr-options.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   //Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       exportPDF = PDFServicesSdk.ExportPDF,\n       exportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.DOCX);\n\n   // Set operation input from a source file\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFInput.pdf');\n   exportPdfOperation.setInput(input);\n\n   // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n   const options = new exportPDF.options.ExportPDFOptions(exportPDF.options.ExportPDFOptions.OCRSupportedLocale.EN_US);\n   exportPdfOperation.setOptions(options);\n   \n   // Execute the operation and Save the result to the specified location.\n   exportPdfOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/exportPdfWithOCROptionsOutput.docx'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-2\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/exportpdf' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"docx\",\n    \"ocrLang\": \"en-US\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-to-images\"\n    }}>{`Export a PDF to images`}</h2>\n    <p>{`The sample below converts a PDF file's pages to a list of JPEG images.\nEach image file name ends with \"`}{`_`}{`\\\\<unpadded`}{`_`}{`page`}{`_`}{`index`}{`_`}{`number`}{`>`}{`\". For example, a PDF file with 15\npages will generate 15 image files. The first file's name ends with\n\"`}{`_`}{`1\" and the last file's name ends with \"`}{`_`}{`15\".`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEG\n\n public class ExportPDFToJPEG {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEG.class);\n\n   public static void main(String[] args) {\n     try {\n\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile(\"pdfservices-api-credentials.json\")\n           .build();\n\n       // Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       ExportPDFOperation exportPdfOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.JPEG);\n\n       // Set operation input from a source file.\n       FileRef sourceFileRef = FileRef.createFromLocalFile(\"src/main/resources/exportPDFToImageInput.pdf\");\n       exportPdfOperation.setInput(sourceFileRef);\n\n       // Execute the operation.\n       List<FileRef> results = exportPDFToImagesOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       int index = 0;\n       for(FileRef result : results) {\n           result.saveAs(\"output/exportPDFToImagesOutput_\" + index + \".jpeg\");\n           index++;\n       }\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error(\"Exception encountered while executing operation\", ex);\n     }\n   }\n }\n  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-2\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEG/\n// dotnet run ExportPDFToJPEG.csproj\n\n namespace ExportPDFToJPEG\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.JPEG);\n \n          // Set operation input from a source file.\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPdfToImageInput.pdf\");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);  \n \n          // Save the result to the specified location.\n          int index = 0;\n          foreach (FileRef fileRef in result)\n            {\n                fileRef.SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPDFToImagesOutput_\" + index + \".jpeg\");\n                index++;\n            }\n        }    \n        \n        catch (ServiceUsageException ex)\n        {\n          log.Error(\"Exception encountered while executing operation\", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n      }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-2\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        exportPDFToImages = PDFServicesSdk.ExportPDFToImages,\n        exportPDFToImagesOperation = exportPDFToImages.Operation.createNew(exportPDFToImages.SupportedTargetFormats.JPEG);\n\n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFToImageInput.pdf');\n    exportPDFToImagesOperation.setInput(input);\n\n    // Execute the operation and Save the result to the specified location.\n    exportPDFToImagesOperation.execute(executionContext)\n        .then(result => {\n            let saveFilesPromises = [];\n            for(let i = 0; i < result.length; i++){\n                saveFilesPromises.push(result[i].saveAsFile(\\`output/exportPDFToImagesOutput_\\${i}.jpeg\\`));\n            }\n            return Promise.all(saveFilesPromises);\n        })\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-3\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdftoimages' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"jpeg\",\n    \"outputType\": \"listOfPageImages\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"export-a-pdf-to-zip-of-page-images\"\n    }}>{`Export a PDF to zip of page images`}</h2>\n    <p>{`The sample below converts a PDF file to one or more jpeg or png images. The resulting file is a ZIP archive containing one image per page of the source PDF file.`}</p>\n    <p>{`Please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"../api-usage.md\"\n      }}>{`API usage guide`}</a>{` to understand how to use our APIs.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEGZip\n\n  public class ExportPDFToJPEGZip {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEGZip.class);\n\n    public static void main(String[] args) {\n      try {\n\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile(\"pdfservices-api-credentials.json\")\n            .build();\n\n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        ExportPDFToImagesOperation exportPDFToImagesOperation = ExportPDFToImagesOperation.createNew(ExportPDFToImagesTargetFormat.JPEG);\n\n        // Set operation input from a source file.\n        FileRef sourceFileRef = FileRef.createFromLocalFile(\"src/main/resources/exportPDFToImageInput.pdf\");\n        exportPDFToImagesOperation.setInput(sourceFileRef);\n        \n        // Set the output type to create zip of images.\n        exportPDFToImagesOperation.setOutputType(OutputType.ZIP_OF_PAGE_IMAGES);\n\n        // Execute the operation.\n        List<FileRef> results = exportPDFToImagesOperation.execute(executionContext);\n\n        // Save the result to the specified location.\n        results.get(0).saveAs(\"output/exportPDFToJPEGOutput.zip\");\n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error(\"Exception encountered while executing operation\", ex);\n      }\n    }\n  }  \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-3\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEGZip/\n// dotnet run ExportPDFToJPEGZip.csproj\n\nnamespace\n{\n    class Program ExportPDFToJPEGZip\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                .Build();\n\n                //Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                ExportPDFToImagesOperation exportPDFToImagesOperation = ExportPDFToImagesOperation.CreateNew(ExportPDFToImagesTargetFormat.JPEG);\n\n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"exportPDFToImagesInput.pdf\");\n                exportPDFToImagesOperation.SetInput(sourceFileRef);\n\n                // Set the output type to create zip of images.\n                exportPDFToImagesOperation.SetOutputType(ExportPDFToImagesOutputType.ZIP_OF_IMAGES);\n\n                // Execute the operation.\n                List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);\n\n                // Save the result to the specified location.\n                results[0].SaveAs(Directory.GetCurrentDirectory() + \"/output/exportPDFToJPEGOutput.zip\");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here. . .\n        }\n\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-3\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg-zip.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    //Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        exportPDF = PDFServicesSdk.ExportPDF,\n        exportPdfToImagesOperation = exportPDFToImages.Operation.createNew(exportPDFToImages.SupportedTargetFormats.JPEG);\n\n    // Set the output type to create zip of images.\n    exportPDFToImagesOperation.setOutputType(exportPDFToImages.OutputType.ZIP_OF_PAGE_IMAGES);\n\n    // Set operation input from a source file\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFToImageInput.pdf');\n    exportPdfToImagesOperation.setInput(input);\n\n    // Execute the operation and Save the result to the specified location.\n    exportPdfToImagesOperation.execute(executionContext)\n        .then(result => result[0].saveAsFile('output/exportPDFToJPEG.zip'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-4\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/pdftoimages' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"jpeg\",\n    \"outputType\": \"zipOfPageImages\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}