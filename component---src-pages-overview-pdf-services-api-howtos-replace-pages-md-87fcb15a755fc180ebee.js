"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[86],{41027:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return o},default:function(){return u}});var t=n(87462),s=n(45987),r=(n(15007),n(64983)),p=n(91515);const i=["components"],o={},c=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var l;const g={_frontmatter:o},d=p.Z;function u(e){let{components:a}=e,n=(0,s.Z)(e,i);return(0,r.mdx)(d,(0,t.Z)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"replace-pages"},"Replace Pages"),(0,r.mdx)("p",null,"Replace one or more pages with another page in an existing document"),(0,r.mdx)("h2",{id:"rest-api"},"REST API"),(0,r.mdx)("p",null,"See our public API Reference for ",(0,r.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Combine-PDF"},"Replace Pages")),(0,r.mdx)("h2",{id:"replace-pages-in-pdf"},"Replace Pages in PDF"),(0,r.mdx)("p",null,"The replace pages operation replaces pages in a PDF with pages from\nother PDF files."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(c,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python REST API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.replacepages.ReplacePDFPages\n \n     public class ReplacePDFPages {\n    \n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(ReplacePDFPages.class);\n    \n       public static void main(String[] args) {\n    \n           try (InputStream baseInputStream = Files.newInputStream(new File("src/main/resources/baseInput.pdf").toPath());\n                InputStream inputStream1 = Files.newInputStream(new File("src/main/resources/replacePagesInput1.pdf").toPath());\n                InputStream inputStream2 = Files.newInputStream(new File("src/main/resources/replacePagesInput2.pdf").toPath())) {\n                // Initial setup, create credentials instance\n                Credentials credentials = new ServicePrincipalCredentials(\n                        System.getenv("PDF_SERVICES_CLIENT_ID"),\n                        System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n    \n                // Creates a PDF Services instance\n                PDFServices pdfServices = new PDFServices(credentials);\n    \n                // Creates an asset(s) from source file(s) and upload\n                Asset baseAsset = pdfServices.upload(baseInputStream, PDFServicesMediaType.PDF.getMediaType());\n                Asset asset1 = pdfServices.upload(inputStream1, PDFServicesMediaType.PDF.getMediaType());\n                Asset asset2 = pdfServices.upload(inputStream2, PDFServicesMediaType.PDF.getMediaType());\n    \n                PageRanges pageRanges = getPageRangeForFirstFile();\n    \n                // Create parameters for the job\n                ReplacePagesParams replacePagesParams = ReplacePagesParams.replacePagesParamsBuilder(baseAsset)\n                        .addPagesForReplace(asset1, pageRanges, 1) // Add the first asset as input to the params, along with its page ranges and base page\n                        .addPagesForReplace(asset2, 3) // Add the second asset as input to the params, along with base page\n                        .build();\n    \n                // Creates a new job instance\n                ReplacePagesPDFJob replacePagesPDFJob = new ReplacePagesPDFJob(replacePagesParams);\n    \n                // Submit the job and gets the job result\n                String location = pdfServices.submit(replacePagesPDFJob);\n                PDFServicesResponse<ReplacePagesResult> pdfServicesResponse = pdfServices.getJobResult(location, ReplacePagesResult.class);\n    \n                // Get content from the resulting asset(s)\n                Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n                StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n    \n                // Creates an output stream and copy stream asset\'s content to it\n                Files.createDirectories(Paths.get("output/"));\n                OutputStream outputStream = Files.newOutputStream(new File("output/replacePagesOutput.pdf").toPath());\n                LOGGER.info("Saving asset at output/replacePagesOutput.pdf");\n                IOUtils.copy(streamAsset.getInputStream(), outputStream);\n                outputStream.close();\n           } catch (IOException | ServiceApiException | SDKException | ServiceUsageException e) {\n               LOGGER.error("Exception encountered while executing operation", e);\n           }\n       }\n    \n       private static PageRanges getPageRangeForFirstFile() {\n            // Specify pages of the first file for replacing the page of base PDF file\n            PageRanges pageRanges = new PageRanges();\n            // Add pages 1 to 3\n            pageRanges.addRange(1, 3);\n    \n            // Add page 4\n            pageRanges.addSinglePage(4);\n    \n            return pageRanges;\n       }\n     }\n')),(0,r.mdx)("h4",{id:"net"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ReplacePDFPages/\n// dotnet run ReplacePDFPages.csproj\n\n   namespace ReplacePDFPages\n   {\n     class Program\n     {\n         private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n         static void Main()\n         {\n             //Configure the logging\n             ConfigureLogging();\n             try\n             {\n                 // Initial setup, create credentials instance.\n                 Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                        .WithClientId("PDF_SERVICES_CLIENT_ID")\n                        .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                        .Build();\n  \n                 // Create an ExecutionContext using credentials.\n                 ExecutionContext executionContext = ExecutionContext.Create(credentials);\n  \n                 // Create a new operation instance\n                 ReplacePagesOperation replacePagesOperation = ReplacePagesOperation.CreateNew();\n  \n                 // Set operation base input from a source file.\n                 FileRef baseSourceFile = FileRef.CreateFromLocalFile(@"baseInput.pdf");\n                 replacePagesOperation.SetBaseInput(baseSourceFile);\n  \n                 // Create a FileRef instance using a local file.\n                 FileRef firstInputFile = FileRef.CreateFromLocalFile(@"replacePagesInput1.pdf");\n                 PageRanges pageRanges = GetPageRangeForFirstFile();\n  \n                 // Adds the pages (specified by the page ranges) of the input PDF file for replacing the\n                 // page of the base PDF file.\n                 replacePagesOperation.AddPagesForReplace(firstInputFile, pageRanges, 1);\n  \n                 // Create a FileRef instance using a local file.\n                 FileRef secondInputFile = FileRef.CreateFromLocalFile(@"replacePagesInput2.pdf");\n  \n                 // Adds all the pages of the input PDF file for replacing the page of the base PDF file.\n                 replacePagesOperation.AddPagesForReplace(secondInputFile, 3);\n  \n                 // Execute the operation.\n                 FileRef result = replacePagesOperation.Execute(executionContext);\n  \n                 // Save the result to the specified location.\n                 result.SaveAs(Directory.GetCurrentDirectory() + "/output/replacePagesOutput.pdf");\n             }\n             catch (ServiceUsageException ex)\n             {\n                 log.Error("Exception encountered while executing operation", ex);\n             // Catch more errors here . . .\n         }\n  \n         private static PageRanges GetPageRangeForFirstFile()\n         {\n             // Specify pages of the first file for replacing the page of base PDF file.\n             PageRanges pageRanges = new PageRanges();\n             // Add pages 1 to 3.\n             pageRanges.AddRange(1, 3);\n  \n             // Add page 4.\n             pageRanges.AddSinglePage(4);\n  \n             return pageRanges;\n         }\n  \n         static void ConfigureLogging()\n         {\n             ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n             XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n         }\n     }\n   }\n')),(0,r.mdx)("h4",{id:"node-js"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/replacepages/replace-pdf-pages.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    PageRanges,\n    InsertPagesResult,\n    ReplacePagesJob,\n    ReplacePagesParams,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@adobe/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let baseReadStream;\n    let readStream1;\n    let readStream2;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        baseReadStream = fs.createReadStream("./baseInput.pdf");\n        readStream1 = fs.createReadStream("./replacePagesInput1.pdf");\n        readStream2 = fs.createReadStream("./replacePagesInput2.pdf");\n        const [baseAsset, asset1, asset2] = await pdfServices.uploadAssets({\n            streamAssets: [{\n                readStream: baseReadStream,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: readStream1,\n                mimeType: MimeType.PDF\n            }, {\n                readStream: readStream2,\n                mimeType: MimeType.PDF\n            }]\n        });\n\n        // Create parameters for the job\n        const params = new ReplacePagesParams(baseAsset)\n            // Add the first asset as input to the params, along with its page ranges and base page\n            .addPagesForReplace({\n                asset: asset1,\n                pageRanges: getPageRangesForFirstFile(),\n                basePage: 1\n            })\n            // Add the second asset as input to the params, along with base page\n            .addPagesForReplace({\n                asset: asset2,\n                basePage: 3\n            });\n\n        // Create a new job instance\n        const job = new ReplacePagesJob({params});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: InsertPagesResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy result asset\'s content to it\n        const outputFilePath = "./replacePagesOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        baseReadStream?.destroy();\n        readStream1?.destroy();\n        readStream2?.destroy();\n    }\n})();\n\nfunction getPageRangesForFirstFile() {\n    // Specify pages of the first file for replacing the page of base PDF file\n    const pageRanges = new PageRanges();\n    // Add pages 1 to 3\n    pageRanges.addRange(1, 3);\n    // Add page 4\n    pageRanges.addSinglePage(4);\n    return pageRanges;\n}\n')),(0,r.mdx)("h4",{id:"python"},"Python"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/replacepages/replace_pdf_pages.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass ReplacePDFPages:\n    def __init__(self):\n        try:\n            base_file = open('baseInput.pdf', 'rb')\n            base_input_stream = base_file.read()\n            base_file.close()\n\n            file_1 = open('replacePagesInput1.pdf', 'rb')\n            input_stream_1 = file_1.read()\n            file_1.close()\n\n            file_2 = open('replacePagesInput2.pdf', 'rb')\n            input_stream_2 = file_2.read()\n            file_2.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            base_asset = pdf_services.upload(input_stream=base_input_stream,\n                                             mime_type=PDFServicesMediaType.PDF)\n            asset_1 = pdf_services.upload(input_stream=input_stream_1,\n                                          mime_type=PDFServicesMediaType.PDF)\n            asset_2 = pdf_services.upload(input_stream=input_stream_2,\n                                          mime_type=PDFServicesMediaType.PDF)\n\n            page_ranges = self.get_page_range_for_first_file()\n\n            # Create parameters for the job\n            replace_pages_params = ReplacePagesParams(base_asset=base_asset)\n\n            # Add the first asset as input to the params, along with its page ranges and base page\n            replace_pages_params.add_pages_to_replace(input_asset=asset_1, page_ranges=page_ranges, base_page=1)\n\n            # Add the second asset as input to the params, along with base page\n            replace_pages_params.add_pages_to_replace(input_asset=asset_2, base_page=3)\n\n            # Creates a new job instance\n            replace_pages_job = ReplacePagesJob(replace_pages_params=replace_pages_params)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(replace_pages_job)\n            pdf_services_response = pdf_services.get_job_result(location, ReplacePagesResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = \"replacePagesOutput.pdf\"\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n    @staticmethod\n    def get_page_range_for_first_file() -> PageRanges:\n        # Specify page ranges\n        page_ranges = PageRanges()\n        # Add pages 1 to 3\n        page_ranges.add_range(1, 3)\n        # Add page 4\n        page_ranges.add_single_page(4)\n        return page_ranges\n\n\nif __name__ == \"__main__\":\n    ReplacePDFPages()\n")),(0,r.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Combine-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/combinepdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assets": [\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 1,\n                    "end": 1\n                }\n            ]\n        },\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 2\n                }\n            ]\n        },\n        {\n            "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n            "pageRanges": [\n                {\n                    "start": 3\n                }\n            ]\n        }\n    ]\n}\'\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-replace-pages-md-87fcb15a755fc180ebee.js.map