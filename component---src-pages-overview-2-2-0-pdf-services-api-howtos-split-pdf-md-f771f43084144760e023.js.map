{"version":3,"file":"component---src-pages-overview-2-2-0-pdf-services-api-howtos-split-pdf-md-f771f43084144760e023.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/overview/2.2.0/pdf-services-api/howtos/split-pdf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"split-pdf\"\n    }}>{`Split PDF`}</h1>\n    <h2 {...{\n      \"id\": \"split-pdf-by-number-of-pages\"\n    }}>{`Split PDF by number of pages`}</h2>\n    <p>{`This operation splits a PDF into multiple smaller documents. Simply use\nthe page count to specify the maximum number of pages of each output\nfile.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.splitpdf.SplitPDFByNumberOfPages\n \n   public class SplitPDFByNumberOfPages {\n  \n     // Initialize the logger.\n     private static final Logger LOGGER = LoggerFactory.getLogger(SplitPDFByNumberOfPages.class);\n  \n     public static void main(String[] args) {\n         try {\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile(\"pdfservices-api-credentials.json\")\n                     .build();\n  \n             // Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n             SplitPDFOperation splitPDFOperation = SplitPDFOperation.createNew();\n  \n             // Set operation input from a source file.\n             FileRef source = FileRef.createFromLocalFile(\"src/main/resources/splitPDFInput.pdf\");\n             splitPDFOperation.setInput(source);\n  \n             // Set the maximum number of pages each of the output files can have.\n             splitPDFOperation.setPageCount(2);\n  \n             // Execute the operation.\n             List result = splitPDFOperation.execute(executionContext);\n  \n             // Save the result to the specified location.\n             int index = 0;\n             for (FileRef fileRef : result) {\n                 fileRef.saveAs(\"output/SplitPDFByNumberOfPagesOutput_\" + index + \".pdf\");\n                 index++;\n             }\n  \n         } catch (IOException| ServiceApiException | SdkException | ServiceUsageException e) {\n             LOGGER.error(\"Exception encountered while executing operation\", e);\n         }\n     }\n  \n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd SplitPDFByNumberOfPages/\n// dotnet run SplitPDFByNumberOfPages.csproj\n\n   namespace SplitPDFByNumberOfPages\n   {\n     class Program\n     {\n         private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n         static void Main()\n         {\n             //Configure the logging\n             ConfigureLogging();\n             try\n             {\n                 // Initial setup, create credentials instance.\n                 Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                 .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                 .Build();\n  \n                 // Create an ExecutionContext using credentials.\n                 ExecutionContext executionContext = ExecutionContext.Create(credentials);\n  \n                 // Create a new operation instance\n                 SplitPDFOperation splitPDFOperation = SplitPDFOperation.CreateNew();\n  \n                 // Set operation input from a source file.\n                 FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"splitPDFInput.pdf\");\n                 splitPDFOperation.SetInput(sourceFileRef);\n  \n                 // Set the maximum number of pages each of the output files can have.\n                 splitPDFOperation.SetPageCount(2);\n  \n                 // Execute the operation.\n                 List result = splitPDFOperation.Execute(executionContext);\n  \n                 // Save the result to the specified location.\n                 int index = 0;\n                 foreach (FileRef fileRef in result)\n                 {\n                     fileRef.SaveAs(Directory.GetCurrentDirectory() + \"/output/SplitPDFByNumberOfPagesOutput_\" + index + \".pdf\");\n                     index++;\n                 }\n  \n             }\n             catch (ServiceUsageException ex)\n             {\n                 log.Error(\"Exception encountered while executing operation\", ex);\n             }\n             // Catch more errors here . . .\n         }\n  \n         static void ConfigureLogging()\n         {\n             ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n             XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n         }\n     }\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/splitpdf/split-pdf-by-number-of-pages.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   // Create an ExecutionContext using credentials\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n\n   // Create a new operation instance.\n   const splitPDFOperation = PDFServicesSdk.SplitPDF.Operation.createNew(),\n       input = PDFServicesSdk.FileRef.createFromLocalFile(\n           'resources/splitPDFInput.pdf',\n           PDFServicesSdk.SplitPDF.SupportedSourceFormat.pdf\n       );\n   // Set operation input from a source file.\n   splitPDFOperation.setInput(input);\n\n   // Set the maximum number of pages each of the output files can have.\n   splitPDFOperation.setPageCount(2);\n\n   // Execute the operation and Save the result to the specified location.\n   splitPDFOperation.execute(executionContext)\n       .then(result => {\n           let saveFilesPromises = [];\n           for(let i = 0; i < result.length; i++){\n               saveFilesPromises.push(result[i].saveAsFile(\\`output/SplitPDFByNumberOfPagesOutput_\\${i}.pdf\\`));\n           }\n           return Promise.all(saveFilesPromises);\n       })\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n     \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-splitPDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"params\\\\\": {\n            \\\\\"cpf:inline\\\\\": {\n                \\\\\"pageCount\\\\\": 4\n            }\n        },\n        \\\\\"documentIn\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-d99c7660cba14e5c98f9023221dab40f\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOutList\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"multipartLabelOut\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"text/directory\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split-pdf-by-page-ranges\"\n    }}>{`Split PDF by page ranges`}</h2>\n    <p>{`As an alternative to creating smaller PDFs with a set number of pages,\nyou can split PDFs into multiple smaller documents by specifying page\nranges where each page range corresponds to a single output file.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.splitpdf.SplitPDFByPageRanges\n \n    public class SplitPDFByPageRanges {\n   \n      // Initialize the logger.\n      private static final Logger LOGGER = LoggerFactory.getLogger(SplitPDFByPageRanges.class);\n   \n      public static void main(String[] args) {\n          try {\n              // Initial setup, create credentials instance.\n              Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                      .fromFile(\"pdfservices-api-credentials.json\")\n                      .build();\n   \n              // Create an ExecutionContext using credentials and create a new operation instance.\n              ExecutionContext executionContext = ExecutionContext.create(credentials);\n              SplitPDFOperation splitPDFOperation = SplitPDFOperation.createNew();\n   \n              // Set operation input from a source file.\n              FileRef source = FileRef.createFromLocalFile(\"src/main/resources/splitPDFInput.pdf\");\n              splitPDFOperation.setInput(source);\n   \n              // Set the page ranges where each page range corresponds to a single output file.\n              PageRanges pageRanges = getPageRanges();\n              splitPDFOperation.setPageRanges(pageRanges);\n   \n              // Execute the operation.\n              List result = splitPDFOperation.execute(executionContext);\n   \n              // Save the result to the specified location.\n              int index = 0;\n              for (FileRef fileRef : result) {\n                  fileRef.saveAs(\"output/SplitPDFByPageRangesOutput_\" + index + \".pdf\");\n                  index++;\n              }\n   \n          } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n              LOGGER.error(\"Exception encountered while executing operation\", e);\n          }\n      }\n   \n      private static PageRanges getPageRanges() {\n          // Specify page ranges.\n          PageRanges pageRanges = new PageRanges();\n          // Add page 1.\n          pageRanges.addSinglePage(1);\n   \n          // Add pages 3 to 4.\n          pageRanges.addRange(3, 4);\n          return pageRanges;\n      }\n   \n    }\n      \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-1\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd SplitPDFByPageRanges/\n// dotnet run SplitPDFByPageRanges.csproj\n\n namespace SplitPDFByPageRanges\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                SplitPDFOperation splitPDFOperation = SplitPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"splitPDFInput.pdf\");\n                splitPDFOperation.SetInput(sourceFileRef);\n \n                // Set the page ranges where each page range corresponds to a single output file.\n                PageRanges pageRanges = GetPageRanges();\n                splitPDFOperation.SetPageRanges(pageRanges);\n \n                // Execute the operation.\n                List result = splitPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                int index = 0;\n                foreach (FileRef fileRef in result)\n                {\n                    fileRef.SaveAs(Directory.GetCurrentDirectory() + \"/output/SplitPDFByPageRangesOutput_\" + index + \".pdf\");\n                    index++;\n                }\n \n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n            // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n \n        private static PageRanges GetPageRanges()\n        {\n            // Specify page ranges.\n            PageRanges pageRanges = new PageRanges();\n            // Add page 1.\n            pageRanges.AddSinglePage(1);\n \n            // Add pages 3 to 4.\n            pageRanges.AddRange(3, 4);\n            return pageRanges;\n        }\n    }\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-1\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/splitpdf/split-pdf-by-page-ranges.js\n\n  const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n  const getPageRanges = () => {\n    // Specify pages ranges.\n    const pageRanges = new PDFServicesSdk.PageRanges();\n    // Add page 1.\n    pageRanges.addSinglePage(1);\n \n    // Add pages 3 to 4.\n    pageRanges.addPageRange(3, 4);\n    return pageRanges;\n  };\n  try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n \n    // Create an ExecutionContext using credentials\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n \n    // Create a new operation instance.\n    const splitPDFOperation = PDFServicesSdk.SplitPDF.Operation.createNew(),\n        input = PDFServicesSdk.FileRef.createFromLocalFile(\n            'resources/splitPDFInput.pdf',\n            PDFServicesSdk.SplitPDF.SupportedSourceFormat.pdf\n        );\n    // Set operation input from a source file.\n    splitPDFOperation.setInput(input);\n \n    // Set the page ranges where each page range corresponds to a single output file.\n    const pageRanges = getPageRanges();\n    splitPDFOperation.setPageRanges(pageRanges);\n \n    // Execute the operation and Save the result to the specified location.\n    splitPDFOperation.execute(executionContext)\n        .then(result => {\n            let saveFilesPromises = [];\n            for(let i = 0; i < result.length; i++){\n                saveFilesPromises.push(result[i].saveAsFile(\\`output/SplitPDFByPageRangesOutput_\\${i}.pdf\\`));\n            }\n            return Promise.all(saveFilesPromises);\n        })\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n  } catch (err) {\n    console.log('Exception encountered while executing operation', err);\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-1\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-splitPDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"params\\\\\": {\n            \\\\\"cpf:inline\\\\\": {\n                \\\\\"pageRanges\\\\\": [{\n                    \\\\\"start\\\\\": 2,\n                    \\\\\"end\\\\\": 4\n                }, {\n                    \\\\\"start\\\\\": 7,\n                    \\\\\"end\\\\\": 9\n                }]\n            }\n        },\n        \\\\\"documentIn\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-d99c7660cba14e5c98f9023221dab40f\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOutList\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"multipartLabelOut\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"text/directory\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"split-pdf-into-number-of-files\"\n    }}>{`Split PDF into number of files`}</h2>\n    <p>{`As an alternative to creating smaller PDFs by specifying a set number of\npages or a page range, you can split PDFs by file count. In this case,\nthe operation creates the specified number of files with each containing\nan identical number of pages (if possible).`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"Java, .NET, Node JS, Rest API\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.splitpdf.SplitPDFIntoNumberOfFiles\n \n     public class SplitPDFIntoNumberOfFiles {\n    \n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(SplitPDFIntoNumberOfFiles.class);\n    \n       public static void main(String[] args) {\n           try {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                       .fromFile(\"pdfservices-api-credentials.json\")\n                       .build();\n    \n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.create(credentials);\n               SplitPDFOperation splitPDFOperation = SplitPDFOperation.createNew();\n    \n               // Set operation input from a source file.\n               FileRef source = FileRef.createFromLocalFile(\"src/main/resources/splitPDFInput.pdf\");\n               splitPDFOperation.setInput(source);\n    \n               // Set the number of documents to split the input PDF file into.\n               splitPDFOperation.setFileCount(2);\n    \n               // Execute the operation.\n               List result = splitPDFOperation.execute(executionContext);\n    \n               // Save the result to the specified location.\n               int index = 0;\n               for (FileRef fileRef : result) {\n                   fileRef.saveAs(\"output/SplitPDFIntoNumberOfFilesOutput_\" + index + \".pdf\");\n                   index++;\n               }\n    \n           } catch (IOException | ServiceApiException | SdkException | ServiceUsageException e) {\n               LOGGER.error(\"Exception encountered while executing operation\", e);\n           }\n       }\n    \n     }\n      \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"net-2\"\n    }}>{`.NET`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd SplitPDFIntoNumberOfFiles/\n// dotnet run SplitPDFIntoNumberOfFiles.csproj\n\n  namespace SplitPDFIntoNumberOfFiles\n  {\n    class Program\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                                .FromFile(Directory.GetCurrentDirectory() + \"/pdfservices-api-credentials.json\")\n                                .Build();\n \n                // Create an ExecutionContext using credentials.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n \n                // Create a new operation instance\n                SplitPDFOperation splitPDFOperation = SplitPDFOperation.CreateNew();\n \n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@\"splitPDFInput.pdf\");\n                splitPDFOperation.SetInput(sourceFileRef);\n \n                // Set the number of documents to split the input PDF file into.\n                splitPDFOperation.SetFileCount(2);\n \n                // Execute the operation.\n                List result = splitPDFOperation.Execute(executionContext);\n \n                // Save the result to the specified location.\n                int index = 0;\n                foreach (FileRef fileRef in result)\n                {\n                    fileRef.SaveAs(Directory.GetCurrentDirectory() + \"/output/SplitPDFIntoNumberOfFilesOutput_\" + index + \".pdf\");\n                    index++;\n                }\n \n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error(\"Exception encountered while executing operation\", ex);\n            }\n             // Catch more errors here . . .\n        }\n \n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo(\"log4net.config\"));\n        }\n    }\n  }\n      \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"node-js-2\"\n    }}>{`Node JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/splitpdf/split-pdf-into-number-of-files.js\n\n   const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n  \n   try {\n     // Initial setup, create credentials instance.\n     const credentials =  PDFServicesSdk.Credentials\n         .serviceAccountCredentialsBuilder()\n         .fromFile(\"pdfservices-api-credentials.json\")\n         .build();\n  \n     // Create an ExecutionContext using credentials\n     const executionContext = PDFServicesSdk.ExecutionContext.create(credentials);\n  \n     // Create a new operation instance.\n     const splitPDFOperation = PDFServicesSdk.SplitPDF.Operation.createNew(),\n         input = PDFServicesSdk.FileRef.createFromLocalFile(\n             'resources/splitPDFInput.pdf',\n             PDFServicesSdk.SplitPDF.SupportedSourceFormat.pdf\n         );\n     // Set operation input from a source file.\n     splitPDFOperation.setInput(input);\n  \n     // Set the number of documents to split the input PDF file into.\n     splitPDFOperation.setFileCount(2);\n  \n     // Execute the operation and Save the result to the specified location.\n     splitPDFOperation.execute(executionContext)\n         .then(result => {\n             let saveFilesPromises = [];\n             for(let i = 0; i < result.length; i++){\n                 saveFilesPromises.push(result[i].saveAsFile(\\`output/SplitPDFIntoNumberOfFilesOutput_\\${i}.pdf\\`));\n             }\n             return Promise.all(saveFilesPromises);\n         })\n         .catch(err => {\n             if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                 || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                 console.log('Exception encountered while executing operation', err);\n             } else {\n                 console.log('Exception encountered while executing operation', err);\n             }\n         });\n   } catch (err) {\n     console.log('Exception encountered while executing operation', err);\n   }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"rest-api-2\"\n    }}>{`Rest API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Please refer our Rest API docs for more information\n// https://documentcloud.adobe.com/document-services/index.html#post-splitPDF\n\ncurl --location --request POST 'https://cpf-ue1.adobe.io/ops/:create?respondWith=%7B%22reltype%22%3A%20%22http%3A%2F%2Fns.adobe.com%2Frel%2Fprimary%22%7D' \\\\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\\\n--header 'Accept: application/json, text/plain, */*' \\\\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\\\n--header 'Prefer: respond-async,wait=0' \\\\\n--form 'contentAnalyzerRequests=\"{\n    \\\\\"cpf:inputs\\\\\": {\n        \\\\\"params\\\\\": {\n            \\\\\"cpf:inline\\\\\": {\n                \\\\\"fileCount\\\\\": 2\n            }\n        },\n        \\\\\"documentIn\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"InputFile0\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"application/pdf\\\\\"\n        }\n    },\n    \\\\\"cpf:engine\\\\\": {\n        \\\\\"repo:assetId\\\\\": \\\\\"urn:aaid:cpf:Service-d99c7660cba14e5c98f9023221dab40f\\\\\"\n    },\n    \\\\\"cpf:outputs\\\\\": {\n        \\\\\"documentOutList\\\\\": {\n            \\\\\"cpf:location\\\\\": \\\\\"multipartLabelOut\\\\\",\n            \\\\\"dc:format\\\\\": \\\\\"text/directory\\\\\"\n        }\n    }\n}\"' \\\\\n--form 'InputFile0=@\"{{Placeholder for input file (absolute path)}}\"'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}