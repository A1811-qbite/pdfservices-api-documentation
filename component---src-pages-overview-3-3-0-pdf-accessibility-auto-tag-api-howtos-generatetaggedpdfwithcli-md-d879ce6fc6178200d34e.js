"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2231],{36591:function(t,e,n){n.r(e),n.d(e,{_frontmatter:function(){return p},default:function(){return f}});var a=n(87462),r=n(45987),i=(n(15007),n(64983)),s=n(91515);const o=["components"],p={},u=(g="CodeBlock",function(t){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",t)});var g;const d={_frontmatter:p},l=s.Z;function f(t){let{components:e}=t,n=(0,r.Z)(t,o);return(0,i.mdx)(l,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.mdx)("h2",{id:"generates-tagged-pdf-by-setting-options-with-command-line-arguments"},"Generates tagged PDF by setting options with command line arguments"),(0,i.mdx)("p",null,"The sample below generates tagged PDF by setting options through command line arguments."),(0,i.mdx)("p",null,"Here is a sample list of command line arguments and their description:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"--input < input file path >"),(0,i.mdx)("li",{parentName:"ul"},"--output < output file path >"),(0,i.mdx)("li",{parentName:"ul"},"--report { If this argument is present then the output will be generated with the report }"),(0,i.mdx)("li",{parentName:"ul"},"--shift_headings { If this argument is present then the headings will be shifted in the output PDF file }")),(0,i.mdx)(u,{slots:"heading, code",repeat:"2",languages:"Java, Python",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"java"},"Java"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://git.corp.adobe.com/dc/dc-cpf-sdk-java-samples/tree/beta\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFParamaterised -Dexec.args="--report --shift_headings --input src/main/resources/autotagPdfInput.pdf --output output/"\n\npublic class AutotagPDFParamaterised {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithOptions.class);\n\n    public static void main(String[] args) {\n        LOGGER.info("--input " + getInputFilePathFromCmdArgs(args));\n        LOGGER.info("--output " + getOutputFilePathFromCmdArgs(args));\n        LOGGER.info("--report " + getGenerateReportFromCmdArgs(args));\n        LOGGER.info("--shift_headings " + getShiftHeadingsFromCmdArgs(args));\n\n        try {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile("pdfservices-api-credentials.json")\n                    .build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n            AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n            // Set input for operation from command line args\n            autotagPDFOperation.setInput(FileRef.createFromLocalFile(getInputFilePathFromCmdArgs(args)));\n\n            // Get and Build AutotagPDF options from command line args and set them into the operation\n            AutotagPDFOptions autotagPDFOptions = getOptionsFromCmdArgs(args);\n            autotagPDFOperation.setOptions(autotagPDFOptions);\n\n            // Execute the operation\n            AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n            // Save the output files at the specified location\n            String outputPath = getOutputFilePathFromCmdArgs(args);\n            autotagOutputFiles.saveTaggedPDF(outputPath + "AutotagPDFParameterised-tagged.pdf");\n            if (autotagPDFOptions != null && autotagPDFOptions.isGenerateReport())\n                autotagOutputFiles.saveReport(outputPath + "AutotagPDFParameterised-report.xlsx");\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n\n    private static AutotagPDFOptions getOptionsFromCmdArgs(String[] args) {\n        Boolean generateReport = getGenerateReportFromCmdArgs(args);\n        Boolean shiftHeadings = getShiftHeadingsFromCmdArgs(args);\n\n        AutotagPDFOptions.Builder builder = AutotagPDFOptions.autotagPDFOptionsBuilder();\n\n        if (generateReport)\n            builder.generateReport();\n        if (shiftHeadings)\n            builder.shiftHeadings();\n\n        return builder.build();\n    }\n\n    private static Boolean getShiftHeadingsFromCmdArgs(String[] args) {\n        return Arrays.asList(args).contains("--shift_headings");\n    }\n\n    private static Boolean getGenerateReportFromCmdArgs(String[] args) {\n        return Arrays.asList(args).contains("--report");\n    }\n\n    private static String getInputFilePathFromCmdArgs(String[] args) {\n        String inputFilePath = "src/main/resources/autotagPdfInput.pdf";\n        int inputFilePathIndex = Arrays.asList(args).indexOf("--input");\n        if (inputFilePathIndex >= 0 && inputFilePathIndex < args.length - 1) {\n            inputFilePath = args[inputFilePathIndex + 1];\n        } else\n            LOGGER.info("input file not specified, using default value : autotagPdfInput.pdf");\n\n        return inputFilePath;\n    }\n\n    private static String getOutputFilePathFromCmdArgs(String[] args) {\n        String outputFilePath = "output/";\n        int outputFilePathIndex = Arrays.asList(args).indexOf("--output");\n        if (outputFilePathIndex >= 0 && outputFilePathIndex < args.length - 1) {\n            outputFilePath = args[outputFilePathIndex + 1];\n        } else\n            LOGGER.info("output path not specified, using default value : output/");\n\n        return outputFilePath;\n    }\n} \n')),(0,i.mdx)("h4",{id:"python"},"Python"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples from https://git.corp.adobe.com/dc/dc-cpf-python-sdk-samples/tree/beta\n# Run the sample:\n# python src/autotagpdf/autotag_pdf_parameterised.py --report --shift_headings --input resources/autotagPdfInput.pdf --output output/\n\nlogging.basicConfig(level=os.environ.get('LOGLEVEL', 'INFO'))\n\n\nclass AutotagPDFParameterised:\n\n    _input_path: str\n    _output_path: str\n    _generate_report: bool\n    _shift_headings: bool\n\n    base_path = str(Path(__file__).parents[2])\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def parse_args(*args: str):\n        if not args:\n            args = sys.argv[1:]\n        parser = argparse.ArgumentParser(description='Autotag PDF')\n\n        parser.add_argument('--input', help='Input file path', type=Path, metavar='input')\n        parser.add_argument('--output', help='Output path', type=Path, dest='output')\n        parser.add_argument('--report', dest='report', action='store_true', help='Generate report(in XLSX format)',\n                            default=False)\n        parser.add_argument('--shift_headings', dest='shift_headings', action='store_true', help='Shift headings',\n                            default=False)\n\n        return parser.parse_args(args)\n\n    def get_default_input_file_path(self) -> str:\n        return self.base_path + '/resources/autotagPdfInput.pdf'\n\n    def get_default_output_file_path(self) -> str:\n        return self.base_path + '/output/AutotagPDFParameterised'\n\n    def get_autotag_pdf_options(self) -> AutotagPDFOptions:\n        shift_headings = self._shift_headings\n        generate_report = self._generate_report\n\n        builder: AutotagPDFOptions.Builder = AutotagPDFOptions.builder()\n        if shift_headings:\n            builder.with_shift_headings()\n        if generate_report:\n            builder.with_generate_report()\n        return builder.build()\n\n    def execute(self, *args: str) -> None:\n        args = self.parse_args(*args)\n        self._input_path = args.input if args.input else self.get_default_input_file_path()\n        self._output_path = args.output if args.output else self.get_default_output_file_path()\n        self._generate_report = args.report\n        self._shift_headings = args.shift_headings\n\n        self.autotag_pdf()\n\n    def autotag_pdf(self):\n        try:\n            # Initial setup, create credentials instance.\n            credentials = Credentials.service_account_credentials_builder() \\\n                .from_file(self.base_path + '/pdfservices-api-credentials.json') \\\n                .build()\n\n            # Create an ExecutionContext using credentials and create a new operation instance.\n            execution_context = ExecutionContext.create(credentials)\n            autotag_pdf_operation = AutotagPDFOperation.create_new()\n\n            # Set operation input from a source file.\n            source = FileRef.create_from_local_file(self._input_path)\n            autotag_pdf_operation.set_input(source)\n\n            # Build AutotagPDF options and set them into the operation\n            autotag_pdf_operation.set_options(self.get_autotag_pdf_options())\n\n            # Execute the operation.\n            autotag_output_files: AutotagPDFOutputFiles = autotag_pdf_operation.execute(execution_context)\n\n            input_file_name = Path(self._input_path).stem\n            base_output_path = self._output_path\n\n            Path(base_output_path).mkdir(parents=True, exist_ok=True)\n\n            # Save the result to the specified location.\n            tagged_pdf_path = f'{base_output_path}/{input_file_name}-tagged.pdf'\n            autotag_output_files.save_pdf_file(tagged_pdf_path)\n            if self._generate_report:\n                report_path = f'{base_output_path}/{input_file_name}-report.xlsx'\n                autotag_output_files.save_xls_file(report_path)\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\n\nif __name__ == \"__main__\":\n    autotag_pdf_parameterised = AutotagPDFParameterised()\n    autotag_pdf_parameterised.execute()\n")))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-3-3-0-pdf-accessibility-auto-tag-api-howtos-generatetaggedpdfwithcli-md-d879ce6fc6178200d34e.js.map