{"version":3,"file":"component---src-pages-overview-pdf-autotag-api-beta-howtos-autotag-api-md-a7ae1820618099ef5270.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/overview/pdf-autotag-api/beta/howtos/autotag-api.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/pdfservices-api-documentation/pdfservices-api-documentation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"autotag-pdf\"\n    }}>{`Autotag PDF`}</h1>\n    <h2 {...{\n      \"id\": \"autotag-output-format\"\n    }}>{`Autotag Output Format`}</h2>\n    <p>{`The output of an SDK autotag operation contains the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The tagged pdf file of version 1.7 or 2.0 as per the option set and with headings shifted if the option of shift headings is set.`}</li>\n      <li parentName=\"ul\">{`An optional excel report containing the information of the tagging if the option of generatereport is set.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"api-limitations\"\n    }}>{`API limitations`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`File size:`}</strong>{` Files up to a maximum of 100MB are supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Number of Pages:`}</strong>{` Non-scanned PDFs up to 200 pages and scanned PDFs up to 100 pages are supported, however limits may be lower for files with a large number of tables.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Rate limits:`}</strong>{` Keep request rate below 25 requests per minutes.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Page Size:`}</strong>{` The API supports standard page sizes not to exceed 17.5” or less than 6” in either dimension.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Hidden Objects:`}</strong>{` PDF files that contain content that is not visible on the page like javascript, OCG (optional content groups), etc are not supported. Files that contain such hidden information may fail to process. For such cases, `}<a parentName=\"li\" {...{\n          \"href\": \"https://helpx.adobe.com/acrobat/using/removing-sensitive-content-pdfs.html\"\n        }}>{`removing hidden content`}</a>{` prior to processing files again may return a successful result.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Language:`}</strong>{` The API is currently optimized for English language content. Files containing content in other Latin languages should return good results, but may have issues with non-English punctuation.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`OCR and Scan quality:`}</strong>{` The quality of text extracted from scanned files is dependent on the clarity of content in the input file. Conditions like skewed pages, shadowing, obscured or overlapping fonts, and page resolution less than 200 DPI can all result in lower quality text output.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Form fields:`}</strong>{` Files containing XFA and other fillable form elements are not supported.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Unprotected files:`}</strong>{` The API supports files that are unprotected or where security restrictions allow copying of content. Files that are secured and do not allow copying of content will not be processed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Annotations:`}</strong>{` Content in PDF files containing annotations such as highlights and sticky notes will be processed, but annotations that obscure text could impact output quality. Text within annotations will not be included in the output.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`PDF Producers:`}</strong>{` The Autotag API is designed to make to PDF accessible. Files created from applications that produce other types of content like illustrations, CAD drawings or other types of vector art may not return quality results.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`PDF Collections:`}</strong>{` PDFs that are made from a collection of files including PDF Portfolios are not currently supported.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"error-codes\"\n    }}>{`Error codes`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Scenario`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Error code`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Error message`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unsuitable file`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DISQUALIFIED`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File is not suitable for conversion. Note this can still be returned even if the file was prequalified on the client.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Bad Input`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BAD_INPUT`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Input is corrupted or empty.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Bad PDF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`BAD_PDF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Not a PDF, File is corrupted, malformed or an empty PDF.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Protected PDF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PROTECTED_PDF`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`PDF is encrypted or password protected.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Disqualified Experiment`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`DISQUALIFIED_EXPERIMENT`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File belongs to an experiment.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unknown error / failure`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ERROR`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unexpected error.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"code-samples\"\n    }}>{`Code samples`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-17-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 1.7 from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-17-and-an-excel-report-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 1.7 and an excel report from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-17-and-shift-its-headings-and-an-excel-report-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 1.7 and shift its headings and an excel report from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-17-from-a-pdf-and-shift-its-headings\"\n        }}>{`Generate tagged pdf of version 1.7 from a PDF and shift its headings`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-20-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 2.0 from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-20-and-an-excel-report-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 2.0 and an excel report from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-20-and-shifting-its-headings-and-an-excel-report-from-a-pdf\"\n        }}>{`Generate tagged pdf of version 2.0 and shifting its headings and an excel report from a PDF`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"autotag-api/#generate-tagged-pdf-of-version-20-from-a-pdf-and-shift-its-headings\"\n        }}>{`Generate tagged pdf of version 2.0 from a PDF and shift its headings`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-17-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 1.7 from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 1.7 from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV17 \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV17 {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV17.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n            AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n            // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n            String filename = \"src/main/resources/autotagPdfInput.pdf\";\n            FileRef source = FileRef.createFromLocalFile(filename);\n            autotagPDFOperation.setInputFile(source);\n\n            //Extract the name of the input file to be used in saving output file with same name\n            String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n            AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .pdfVersion(PDFVersion.v17)\n                    .build();\n            autotagPDFOperation.setOptions(autotagPDFOptions);\n\n            // Execute the operation\n            AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n            // Save the output files at the specified location\n            String outputDirectory = \"output/AutotagPDFWithV17/\";\n            String taggedPDFPath = outputDirectory + inputFileName+ \"-taggedPDF.pdf\";\n\n            autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n          System.out.println(e);\n        }\n    }\n}\n      \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-17-and-an-excel-report-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 1.7 and an excel report from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 1.7 and an excel report from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV17AndReport\n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV17AndReport {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV17AndReport.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n            AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n            // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n            String filename = \"src/main/resources/autotagPdfInput.pdf\";\n            FileRef source = FileRef.createFromLocalFile(filename);\n            autotagPDFOperation.setInputFile(source);\n\n            //Extract the name of the input file to be used in saving output file with same name\n            String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n            // Build AutotagPDF options and set them into the operation\n            AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .pdfVersion(PDFVersion.v17)\n                    .generateReport()\n                    .build();\n            autotagPDFOperation.setOptions(autotagPDFOptions);\n\n            // Execute the operation\n            AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n            // Save the output files at the specified location\n            String outputDirectory = \"output/AutotagPDFWithV17AndReport/\";\n            String taggedPDFPath = outputDirectory + inputFileName+ \"-taggedPDF.pdf\";\n            String reportPath = outputDirectory  + inputFileName + \"-report.xlsx\";\n\n            autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n            autotagOutputFiles.saveReport(reportPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}      \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-17-and-shift-its-headings-and-an-excel-report-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 1.7 and shift its headings and an excel report from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 1.7 and shift its headings an excel report from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV17AndReportAndShiftHeadings \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV17AndReportAndShiftHeadings {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV17AndReportAndShiftHeadings.class);\n\n    public static void main(String[] args) {\n\n        try {\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n            AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n            // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n            String filename = \"src/main/resources/autotagPdfInput.pdf\";\n            FileRef source = FileRef.createFromLocalFile(filename);\n            autotagPDFOperation.setInputFile(source);\n\n            //Extract the name of the input file to be used in saving output file with same name\n            String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n            // Build AutotagPDF options and set them into the operation\n            AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .pdfVersion(PDFVersion.v17)\n                    .shiftHeadings()\n                    .generateReport()\n                    .build();\n            autotagPDFOperation.setOptions(autotagPDFOptions);\n\n            // Execute the operation\n            AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n            // Save the output files at the specified location\n            String outputDirectory = \"output/AutotagPDFWithV17AndReportAndShiftHeadings/\";\n            String taggedPDFPath = outputDirectory +inputFileName+ \"-taggedPDF.pdf\";\n            String reportPath = outputDirectory  + inputFileName + \"-report.xlsx\";\n\n            autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n            autotagOutputFiles.saveReport(reportPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-17-from-a-pdf-and-shift-its-headings\"\n    }}>{`Generate tagged pdf of version 1.7 from a PDF and shift its headings`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 1.7 from a PDF and shift its headings.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV17AndShiftHeadings \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV17AndShiftHeadings {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV17AndShiftHeadings.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile(\"pdfservices-api-credentials.json\")\n                     .build();\n\n             //Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n             AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n             // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n             String filename = \"src/main/resources/autotagPdfInput.pdf\";\n             FileRef source = FileRef.createFromLocalFile(filename);\n             autotagPDFOperation.setInputFile(source);\n\n             //Extract the name of the input file to be used in saving output file with same name\n             String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n             AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                     .pdfVersion(PDFVersion.v17)\n                     .shiftHeadings()\n                     .build();\n             autotagPDFOperation.setOptions(autotagPDFOptions);\n\n             // Execute the operation\n             AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n             // Save the output files at the specified location\n             String outputDirectory = \"output/AutotagPDFWithV17AndShiftHeadings/\";\n             String taggedPDFPath = outputDirectory +inputFileName+ \"-taggedPDF.pdf\";\n\n             autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n             System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-20-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 2.0 from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 2.0 from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV20 \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV20 {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV20.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile(\"pdfservices-api-credentials.json\")\n                     .build();\n\n             //Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n             AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n             // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n             String filename = \"src/main/resources/autotagPdfInput.pdf\";\n             FileRef source = FileRef.createFromLocalFile(filename);\n             autotagPDFOperation.setInputFile(source);\n\n             //Extract the name of the input file to be used in saving output file with same name\n             String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n             AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                     .pdfVersion(PDFVersion.v20)\n                     .build();\n             autotagPDFOperation.setOptions(autotagPDFOptions);\n\n             // Execute the operation\n             AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n             // Save the output files at the specified location\n             String outputDirectory = \"output/AutotagPDFWithV20/\";\n             String taggedPDFPath = outputDirectory + inputFileName+ \"-taggedPDF.pdf\";\n\n             autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-20-and-an-excel-report-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 2.0 and an excel report from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 2.0 and an excel report from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV20AndReport \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV20AndReport {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV20AndReport.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                     .fromFile(\"pdfservices-api-credentials.json\")\n                     .build();\n\n             //Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n             AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n             // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n             String filename = \"src/main/resources/autotagPdfInput.pdf\";\n             FileRef source = FileRef.createFromLocalFile(filename);\n             autotagPDFOperation.setInputFile(source);\n\n             //Extract the name of the input file to be used in saving output file with same name\n             String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n             AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .pdfVersion(PDFVersion.v20)\n                    .generateReport()\n                    .build();\n             autotagPDFOperation.setOptions(autotagPDFOptions);\n\n             // Execute the operation\n             AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n             // Save the output files at the specified location\n             String outputDirectory = \"output/AutotagPDFWithV20AndReport/\";\n             String taggedPDFPath = outputDirectory + inputFileName+ \"-taggedPDF.pdf\";\n             String reportPath = outputDirectory  + inputFileName + \"-report.xlsx\";\n\n             autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n             autotagOutputFiles.saveReport(reportPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-20-and-shifting-its-headings-and-an-excel-report-from-a-pdf\"\n    }}>{`Generate tagged pdf of version 2.0 and shifting its headings and an excel report from a PDF`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 2.0 and shifting its headings an excel report from a PDF document.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV20AndReportAndShiftHeadings \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-6\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV20AndReportAndShiftHeadings {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV20AndReportAndShiftHeadings.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile(\"pdfservices-api-credentials.json\")\n                    .build();\n\n             //Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n             AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n             // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n             String filename = \"src/main/resources/autotagPdfInput.pdf\";\n             FileRef source = FileRef.createFromLocalFile(filename);\n             autotagPDFOperation.setInputFile(source);\n\n             //Extract the name of the input file to be used in saving output file with same name\n             String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n             AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                    .pdfVersion(PDFVersion.v20)\n                    .generateReport()\n                    .shiftHeadings()\n                    .build();\n             autotagPDFOperation.setOptions(autotagPDFOptions);\n\n             // Execute the operation\n             AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n             // Save the output files at the specified location\n             String outputDirectory = \"output/AutotagPDFWithV20AndReportAndShiftHeadings/\";\n             String taggedPDFPath = outputDirectory +inputFileName+ \"-taggedPDF.pdf\";\n             String reportPath = outputDirectory +inputFileName+ \"-report.xlsx\";\n\n             autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n             autotagOutputFiles.saveReport(reportPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n            System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-tagged-pdf-of-version-20-from-a-pdf-and-shift-its-headings\"\n    }}>{`Generate tagged pdf of version 2.0 from a PDF and shift its headings`}</h2>\n    <p>{`Use the sample below to generate tagged pdf of version 2.0 from a PDF and shift its headings.`}</p>\n    <p>{`Copy this command in terminal to run the sample:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.autotagpdf.AutotagPDFWithV20AndShiftHeadings \n`}</code></pre>\n    <p>{`Sample code:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" /> \n    <h4 {...{\n      \"id\": \"java-7\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`public class AutotagPDFWithV20AndShiftHeadings {\n\n    private static final org.slf4j.Logger LOGGER = LoggerFactory.getLogger(AutotagPDFWithV20AndShiftHeadings.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n             // Initial setup, create credentials instance.\n             Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                      .fromFile(\"pdfservices-api-credentials.json\")\n                      .build();\n\n             //Create an ExecutionContext using credentials and create a new operation instance.\n             ExecutionContext executionContext = ExecutionContext.create(credentials);\n\n             AutotagPDFOperation autotagPDFOperation = AutotagPDFOperation.createNew();\n\n             // Provide an input FileRef for the operation and take the name of the input file to be used in output file\n             String filename = \"src/main/resources/autotagPdfInput.pdf\";\n             FileRef source = FileRef.createFromLocalFile(filename);\n             autotagPDFOperation.setInputFile(source);\n\n             //Extract the name of the input file to be used in saving output file with same name\n             String inputFileName = filename.substring(filename.lastIndexOf('/') + 1, filename.indexOf('.'));\n\n             // Build AutotagPDF options and set them into the operation\n             AutotagPDFOptions autotagPDFOptions = AutotagPDFOptions.autotagPDFOptionsBuilder()\n                      .pdfVersion(PDFVersion.v20)\n                      .shiftHeadings()\n                      .build();\n             autotagPDFOperation.setOptions(autotagPDFOptions);\n\n             // Execute the operation\n             AutotagOutputFiles autotagOutputFiles = autotagPDFOperation.execute(executionContext);\n\n             // Save the output files at the specified location\n             String outputDirectory = \"output/AutotagPDFWithV20AndShiftHeadings/\";\n             String taggedPDFPath = outputDirectory +inputFileName+ \"-taggedPDF.pdf\";\n\n             autotagOutputFiles.saveTaggedPDF(taggedPDFPath);\n\n        } catch (ServiceApiException | IOException | ServiceUsageException e) {\n              System.out.println(e);\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}