"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9494],{11415:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return x}});var o=n(87462),r=n(45987),a=(n(15007),n(64983)),i=n(91515);const s=["components"],p={},c=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",e)});var l;const d={_frontmatter:p},u=i.Z;function x(e){let{components:t}=e,n=(0,r.Z)(e,s);return(0,a.mdx)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"export-pdf"},"Export PDF"),(0,a.mdx)("p",null,"Export a source PDF file into doc, docx, jpeg, png, pptx, rtf, xlsx."),(0,a.mdx)("h2",{id:"rest-api"},"Rest API"),(0,a.mdx)("p",null,"See our public API Reference for : "),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF"},"Export PDF to Office format or text files")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images"},"Export PDF to Images"))),(0,a.mdx)("h2",{id:"export-a-pdf"},"Export a PDF"),(0,a.mdx)("p",null,"The sample below converts a PDF file into a number of ",(0,a.mdx)("a",{parentName:"p",href:"https://opensource.adobe.com/pdfservices-java-sdk-samples/apidocs/latest/com/adobe/pdfservices/operation/pdfops/options/exportpdf/ExportPDFTargetFormat.html"},"supported\nformats"),"\nsuch as:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Microsoft Office file formats"),(0,a.mdx)("li",{parentName:"ul"},"Text files")),(0,a.mdx)("p",null,"Please refer the ",(0,a.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,a.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"java"},"Java"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCX\n\npublic class ExportPDFToDOCX {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCX.class);\n\n   public static void main(String[] args) {\n\n     try {\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile("pdfservices-api-credentials.json")\n           .build();\n       //Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       ExportPDFOperation exportPdfOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.DOCX);\n\n       // Set operation input from a local PDF file\n       FileRef sourceFileRef = FileRef.createFromLocalFile("src/main/resources/exportPDFInput.pdf");\n       exportPdfOperation.setInput(sourceFileRef);\n\n       // Execute the operation.\n       FileRef result = exportPdfOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       result.saveAs("output/exportPdfOutput.docx");\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error("Exception encountered while executing operation", ex);\n     }\n   }\n }\n  \n')),(0,a.mdx)("h4",{id:"net"},".NET"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocx.csproj\n\n namespace ExportPDFToDocx\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"exportPdfInput.pdf");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + "/output/exportPdfOutput.docx");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n      }\n    }\n  }\n')),(0,a.mdx)("h4",{id:"node-js"},"Node JS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-pdf-to-docx.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   //Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       exportPDF = PDFServicesSdk.ExportPDF,\n       exportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.DOCX);\n\n   // Set operation input from a source file\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFInput.pdf');\n   exportPdfOperation.setInput(input);\n\n   // Execute the operation and Save the result to the specified location.\n   exportPdfOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/exportPdfOutput.docx'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,a.mdx)("h4",{id:"rest-api-1"},"Rest API"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/exportpdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\",\n    \"targetFormat\": \"docx\"\n}'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n")),(0,a.mdx)("h2",{id:"export-a-pdf-file-to-a-docx-file-apply-ocr-on-the-pdf-file"},"Export a PDF file to a DOCX file (apply OCR on the PDF file)"),(0,a.mdx)("p",null,"The sample below converts a PDF file into a number of ",(0,a.mdx)("a",{parentName:"p",href:"https://opensource.adobe.com/pdfservices-java-sdk-samples/apidocs/latest/com/adobe/pdfservices/operation/pdfops/options/exportpdf/ExportPDFTargetFormat.html"},"supported\nformats"),"\nsuch as:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Microsoft Office file formats"),(0,a.mdx)("li",{parentName:"ul"},"Text files")),(0,a.mdx)("p",null,"OCR processing is also performed on the input PDF file to extract text from images in the document."),(0,a.mdx)("p",null,"Please refer the ",(0,a.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,a.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"java-1"},"Java"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdf.ExportPDFToDOCXWithOCROption\n\npublic class ExportPDFToDOCXWithOCROption {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToDOCXWithOCROption.class);\n\n    public static void main(String[] args) {\n\n        try {\n\n            // Initial setup, create credentials instance.\n            Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n                    .fromFile("pdfservices-api-credentials.json")\n                    .build();\n            //Create an ExecutionContext using credentials and create a new operation instance.\n            ExecutionContext executionContext = ExecutionContext.create(credentials);\n            ExportPDFOperation exportPDFOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.DOCX);\n\n            // Set operation input from a source file.\n            FileRef sourceFileRef = FileRef.createFromLocalFile("src/main/resources/exportPDFInput.pdf");\n            exportPDFOperation.setInput(sourceFileRef);\n\n            // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n            ExportPDFOptions exportPDFOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n            exportPDFOperation.setOptions(exportPDFOptions);\n            \n            // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n            ExportPDFOptions exportPDFOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n            exportPDFOperation.setOptions(exportPDFOptions);\n\n            // Execute the operation.\n            FileRef result = exportPDFOperation.execute(executionContext);\n\n            // Save the result to the specified location.\n            result.saveAs("output/exportPDFWithOCROptionsOutput.docx");\n\n        } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n            LOGGER.error("Exception encountered while executing operation", ex);\n        }\n    }\n}  \n')),(0,a.mdx)("h4",{id:"net-1"},".NET"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToDocx/\n// dotnet run ExportPDFToDocxWithOCROption.csproj\n\n namespace ExportPDFToDocxWithOCROption\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.DOCX);\n \n          // Set operation input from a local PDF file\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"exportPdfInput.pdf");\n          exportPdfOperation.SetInput(sourceFileRef);\n\n          // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n          ExportPDFOptions exportPdfOptions = new ExportPDFOptions(ExportOCRLocale.EN_US);\n          exportPdfOperation.SetOptions(exportPdfOptions);\n \n          // Execute the operation.\n          FileRef result = exportPdfOperation.Execute(executionContext);\n \n          // Save the result to the specified location.\n          result.SaveAs(Directory.GetCurrentDirectory() + "/output/ExportPDFToDOCXWithOCROption.docx");\n        }\n        catch (ServiceUsageException ex)\n        {\n          log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n      }\n    }\n  }\n')),(0,a.mdx)("h4",{id:"node-js-1"},"Node JS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdf/export-docx-to-pdf-with-ocr-options.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\n try {\n   // Initial setup, create credentials instance.\n   const credentials =  PDFServicesSdk.Credentials\n       .serviceAccountCredentialsBuilder()\n       .fromFile(\"pdfservices-api-credentials.json\")\n       .build();\n\n   //Create an ExecutionContext using credentials and create a new operation instance.\n   const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n       exportPDF = PDFServicesSdk.ExportPDF,\n       exportPdfOperation = exportPDF.Operation.createNew(exportPDF.SupportedTargetFormats.DOCX);\n\n   // Set operation input from a source file\n   const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFInput.pdf');\n   exportPdfOperation.setInput(input);\n\n   // Create a new ExportPDFOptions instance from the specified OCR locale and set it into the operation.\n   const options = new exportPDF.options.ExportPDFOptions(exportPDF.options.ExportPDFOptions.OCRSupportedLocale.EN_US);\n   exportPdfOperation.setOptions(options);\n   \n   // Execute the operation and Save the result to the specified location.\n   exportPdfOperation.execute(executionContext)\n       .then(result => result.saveAsFile('output/exportPdfWithOCROptionsOutput.docx'))\n       .catch(err => {\n           if(err instanceof PDFServicesSdk.Error.ServiceApiError\n               || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n               console.log('Exception encountered while executing operation', err);\n           } else {\n               console.log('Exception encountered while executing operation', err);\n           }\n       });\n } catch (err) {\n   console.log('Exception encountered while executing operation', err);\n }\n")),(0,a.mdx)("h4",{id:"rest-api-2"},"Rest API"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Export-PDF\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/exportpdf\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "targetFormat": "docx",\n    "ocrLang": "en-US"\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n')),(0,a.mdx)("h2",{id:"export-a-pdf-to-images"},"Export a PDF to images"),(0,a.mdx)("p",null,"The sample below converts a PDF file's pages to a list of JPEG images.\nEach image file name ends with \"","_","\\<unpadded","_","page","_","index","_","number",">",'". For example, a PDF file with 15\npages will generate 15 image files. The first file\'s name ends with\n"',"_",'1" and the last file\'s name ends with "',"_",'15".'),(0,a.mdx)("p",null,"Please refer the ",(0,a.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,a.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"java-2"},"Java"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEG\n\n public class ExportPDFToJPEG {\n\n   // Initialize the logger.\n   private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEG.class);\n\n   public static void main(String[] args) {\n     try {\n\n       // Initial setup, create credentials instance.\n       Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n           .fromFile("pdfservices-api-credentials.json")\n           .build();\n\n       // Create an ExecutionContext using credentials and create a new operation instance.\n       ExecutionContext executionContext = ExecutionContext.create(credentials);\n       ExportPDFOperation exportPdfOperation = ExportPDFOperation.createNew(ExportPDFTargetFormat.JPEG);\n\n       // Set operation input from a source file.\n       FileRef sourceFileRef = FileRef.createFromLocalFile("src/main/resources/exportPDFToImageInput.pdf");\n       exportPdfOperation.setInput(sourceFileRef);\n\n       // Execute the operation.\n       List<FileRef> results = exportPDFToImagesOperation.execute(executionContext);\n\n       // Save the result to the specified location.\n       int index = 0;\n       for(FileRef result : results) {\n           result.saveAs("output/exportPDFToImagesOutput_" + index + ".jpeg");\n           index++;\n       }\n\n     } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n       LOGGER.error("Exception encountered while executing operation", ex);\n     }\n   }\n }\n  \n')),(0,a.mdx)("h4",{id:"net-2"},".NET"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEG/\n// dotnet run ExportPDFToJPEG.csproj\n\n namespace ExportPDFToJPEG\n  {\n    class Program\n    {\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n      static void Main()\n      {\n        //Configure the logging\n        ConfigureLogging();\n        try\n        {\n          // Initial setup, create credentials instance.\n          Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                  .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                  .Build();\n \n          //Create an ExecutionContext using credentials and create a new operation instance.\n          ExecutionContext executionContext = ExecutionContext.Create(credentials);\n          ExportPDFOperation exportPdfOperation = ExportPDFOperation.CreateNew(ExportPDFTargetFormat.JPEG);\n \n          // Set operation input from a source file.\n          FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"exportPdfToImageInput.pdf");\n          exportPdfOperation.SetInput(sourceFileRef);\n \n          // Execute the operation.\n          List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);  \n \n          // Save the result to the specified location.\n          int index = 0;\n          foreach (FileRef fileRef in result)\n            {\n                fileRef.SaveAs(Directory.GetCurrentDirectory() + "/output/exportPDFToImagesOutput_" + index + ".jpeg");\n                index++;\n            }\n        }    \n        \n        catch (ServiceUsageException ex)\n        {\n          log.Error("Exception encountered while executing operation", ex);\n        }\n        // Catch more errors here. . .\n      }\n \n      static void ConfigureLogging()\n      {\n        ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n        XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n      }\n    }\n  }\n')),(0,a.mdx)("h4",{id:"node-js-2"},"Node JS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg.js\n\n const PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n try {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    // Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        exportPDFToImages = PDFServicesSdk.ExportPDFToImages,\n        exportPDFToImagesOperation = exportPDFToImages.Operation.createNew(exportPDFToImages.SupportedTargetFormats.JPEG);\n\n    // Set operation input from a source file.\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFToImageInput.pdf');\n    exportPDFToImagesOperation.setInput(input);\n\n    // Execute the operation and Save the result to the specified location.\n    exportPDFToImagesOperation.execute(executionContext)\n        .then(result => {\n            let saveFilesPromises = [];\n            for(let i = 0; i < result.length; i++){\n                saveFilesPromises.push(result[i].saveAsFile(`output/exportPDFToImagesOutput_${i}.jpeg`));\n            }\n            return Promise.all(saveFilesPromises);\n        })\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n\n")),(0,a.mdx)("h4",{id:"rest-api-3"},"Rest API"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/pdftoimages\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "targetFormat": "jpeg",\n    "outputType": "listOfPageImages"\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n')),(0,a.mdx)("h2",{id:"export-a-pdf-to-zip-of-page-images"},"Export a PDF to zip of page images"),(0,a.mdx)("p",null,"The sample below converts a PDF file to one or more jpeg or png images. The resulting file is a ZIP archive containing one image per page of the source PDF file."),(0,a.mdx)("p",null,"Please refer the ",(0,a.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,a.mdx)(c,{slots:"heading, code",repeat:"4",languages:"Java, .NET, Node JS, Rest API",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"java-3"},"Java"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.exportpdftoimages.ExportPDFToJPEGZip\n\n  public class ExportPDFToJPEGZip {\n\n    // Initialize the logger.\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExportPDFToJPEGZip.class);\n\n    public static void main(String[] args) {\n      try {\n\n        // Initial setup, create credentials instance.\n        Credentials credentials = Credentials.serviceAccountCredentialsBuilder()\n            .fromFile("pdfservices-api-credentials.json")\n            .build();\n\n        //Create an ExecutionContext using credentials and create a new operation instance.\n        ExecutionContext executionContext = ExecutionContext.create(credentials);\n        ExportPDFToImagesOperation exportPDFToImagesOperation = ExportPDFToImagesOperation.createNew(ExportPDFToImagesTargetFormat.JPEG);\n\n        // Set operation input from a source file.\n        FileRef sourceFileRef = FileRef.createFromLocalFile("src/main/resources/exportPDFToImageInput.pdf");\n        exportPDFToImagesOperation.setInput(sourceFileRef);\n        \n        // Set the output type to create zip of images.\n        exportPDFToImagesOperation.setOutputType(OutputType.ZIP_OF_PAGE_IMAGES);\n\n        // Execute the operation.\n        List<FileRef> results = exportPDFToImagesOperation.execute(executionContext);\n\n        // Save the result to the specified location.\n        results.get(0).saveAs("output/exportPDFToJPEGOutput.zip");\n      } catch (ServiceApiException | IOException | SdkException | ServiceUsageException ex) {\n        LOGGER.error("Exception encountered while executing operation", ex);\n      }\n    }\n  }  \n')),(0,a.mdx)("h4",{id:"net-3"},".NET"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd ExportPDFToJPEGZip/\n// dotnet run ExportPDFToJPEGZip.csproj\n\nnamespace\n{\n    class Program ExportPDFToJPEGZip\n    {\n        private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n        static void Main()\n        {\n            //Configure the logging\n            ConfigureLogging();\n            try\n            {\n                // Initial setup, create credentials instance.\n                Credentials credentials = Credentials.ServiceAccountCredentialsBuilder()\n                .FromFile(Directory.GetCurrentDirectory() + "/pdfservices-api-credentials.json")\n                .Build();\n\n                //Create an ExecutionContext using credentials and create a new operation instance.\n                ExecutionContext executionContext = ExecutionContext.Create(credentials);\n                ExportPDFToImagesOperation exportPDFToImagesOperation = ExportPDFToImagesOperation.CreateNew(ExportPDFToImagesTargetFormat.JPEG);\n\n                // Set operation input from a source file.\n                FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"exportPDFToImagesInput.pdf");\n                exportPDFToImagesOperation.SetInput(sourceFileRef);\n\n                // Set the output type to create zip of images.\n                exportPDFToImagesOperation.SetOutputType(ExportPDFToImagesOutputType.ZIP_OF_IMAGES);\n\n                // Execute the operation.\n                List<FileRef> result = exportPDFToImagesOperation.Execute(executionContext);\n\n                // Save the result to the specified location.\n                results[0].SaveAs(Directory.GetCurrentDirectory() + "/output/exportPDFToJPEGOutput.zip");\n            }\n            catch (ServiceUsageException ex)\n            {\n                log.Error("Exception encountered while executing operation", ex);\n            }\n            // Catch more errors here. . .\n        }\n\n        static void ConfigureLogging()\n        {\n            ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n        }\n    }\n}\n')),(0,a.mdx)("h4",{id:"node-js-3"},"Node JS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/exportpdftoimages/export-pdf-to-jpeg-zip.js\n\nconst PDFServicesSdk = require('@adobe/pdfservices-node-sdk');\n\ntry {\n    // Initial setup, create credentials instance.\n    const credentials =  PDFServicesSdk.Credentials\n        .serviceAccountCredentialsBuilder()\n        .fromFile(\"pdfservices-api-credentials.json\")\n        .build();\n\n    //Create an ExecutionContext using credentials and create a new operation instance.\n    const executionContext = PDFServicesSdk.ExecutionContext.create(credentials),\n        exportPDF = PDFServicesSdk.ExportPDF,\n        exportPdfToImagesOperation = exportPDFToImages.Operation.createNew(exportPDFToImages.SupportedTargetFormats.JPEG);\n\n    // Set the output type to create zip of images.\n    exportPDFToImagesOperation.setOutputType(exportPDFToImages.OutputType.ZIP_OF_PAGE_IMAGES);\n\n    // Set operation input from a source file\n    const input = PDFServicesSdk.FileRef.createFromLocalFile('resources/exportPDFToImageInput.pdf');\n    exportPdfToImagesOperation.setInput(input);\n\n    // Execute the operation and Save the result to the specified location.\n    exportPdfToImagesOperation.execute(executionContext)\n        .then(result => result[0].saveAsFile('output/exportPDFToJPEG.zip'))\n        .catch(err => {\n            if(err instanceof PDFServicesSdk.Error.ServiceApiError\n                || err instanceof PDFServicesSdk.Error.ServiceUsageError) {\n                console.log('Exception encountered while executing operation', err);\n            } else {\n                console.log('Exception encountered while executing operation', err);\n            }\n        });\n} catch (err) {\n    console.log('Exception encountered while executing operation', err);\n}\n")),(0,a.mdx)("h4",{id:"rest-api-4"},"Rest API"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Please refer our Rest API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/PDF-To-Images\n\ncurl --location --request POST \'https://pdf-services.adobe.io/operation/pdftoimages\' \\\n--header \'x-api-key: {{Placeholder for client_id}}\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Authorization: Bearer {{Placeholder for token}}\' \\\n--data-raw \'{\n    "assetID": "urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718",\n    "targetFormat": "jpeg",\n    "outputType": "zipOfPageImages"\n}\'\n\n// Legacy API can be found here \n// https://documentcloud.adobe.com/document-services/index.html#post-exportPDF\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-3-3-0-pdf-services-api-howtos-export-pdf-md-ec97499c180d7d301861.js.map