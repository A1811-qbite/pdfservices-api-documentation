"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9575],{98031:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return c},default:function(){return m}});var i=t(87462),a=t(45987),r=(t(15007),t(64983)),s=t(91515);const o=["components"],c={},p=(l="CodeBlock",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var l;const d={_frontmatter:c},u=s.Z;function m(e){let{components:n}=e,t=(0,a.Z)(e,o);return(0,r.mdx)(u,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"linearize-pdfs"},"Linearize PDFs"),(0,r.mdx)("p",null,"Optimize PDFs for quick viewing on the web, especially for mobile clients. Linearization allows your end users to view large PDF documents incrementally so that they can view pages much faster in lower bandwidth conditions."),(0,r.mdx)("h2",{id:"rest-api"},"REST API"),(0,r.mdx)("p",null,"See our public API Reference for ",(0,r.mdx)("a",{parentName:"p",href:"../../../apis/#tag/Linearize-PDF"},"Linearize PDF")),(0,r.mdx)("h2",{id:"linearize-pdf"},"Linearize PDF"),(0,r.mdx)("p",null,"Linearizing a PDF creates a web-optimized PDF file which supports\nincremental access in network environments."),(0,r.mdx)("p",null,"Please refer the ",(0,r.mdx)("a",{parentName:"p",href:"../api-usage.md"},"API usage guide")," to understand how to use our APIs."),(0,r.mdx)(p,{slots:"heading, code",repeat:"5",languages:"Java, .NET, Node JS, Python, REST API",mdxType:"CodeBlock"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_java_samples\n// Run the sample:\n// mvn -f pom.xml exec:java -Dexec.mainClass=com.adobe.pdfservices.operation.samples.linearizepdf.LinearizePDF\n \n     public class LinearizePDF {\n       // Initialize the logger.\n       private static final Logger LOGGER = LoggerFactory.getLogger(LinearizePDF.class);\n    \n       public static void main(String[] args) {\n    \n           try (InputStream inputStream = Files.newInputStream(new File("src/main/resources/linearizePDFInput.pdf").toPath())) {\n                // Initial setup, create credentials instance\n                Credentials credentials = new ServicePrincipalCredentials(\n                        System.getenv("PDF_SERVICES_CLIENT_ID"),\n                        System.getenv("PDF_SERVICES_CLIENT_SECRET"));\n    \n                // Creates a PDF Services instance\n                PDFServices pdfServices = new PDFServices(credentials);\n    \n                // Creates an asset(s) from source file(s) and upload\n                Asset asset = pdfServices.upload(inputStream, PDFServicesMediaType.PDF.getMediaType());\n    \n                // Creates a new job instance\n                LinearizePDFJob linearizePDFJob = new LinearizePDFJob(asset);\n    \n                // Submit the job and gets the job result\n                String location = pdfServices.submit(linearizePDFJob);\n                PDFServicesResponse<LinearizePDFResult> pdfServicesResponse = pdfServices.getJobResult(location, LinearizePDFResult.class);\n    \n                // Get content from the resulting asset(s)\n                Asset resultAsset = pdfServicesResponse.getResult().getAsset();\n                StreamAsset streamAsset = pdfServices.getContent(resultAsset);\n    \n                // Creates an output stream and copy stream asset\'s content to it\n                Files.createDirectories(Paths.get("output/"));\n                OutputStream outputStream = Files.newOutputStream(new File("output/linearizePDFOutput.pdf").toPath());\n                LOGGER.info("Saving asset at output/linearizePDFOutput.pdf");\n                IOUtils.copy(streamAsset.getInputStream(), outputStream);\n                outputStream.close();\n           } catch (ServiceApiException | IOException | SDKException | ServiceUsageException ex) {\n               LOGGER.error("Exception encountered while executing operation", ex);\n           }\n       }\n     }\n')),(0,r.mdx)("h4",{id:"net"},".NET"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from https://www.adobe.com/go/pdftoolsapi_net_samples\n// Run the sample:\n// cd LinearizePDF/\n// dotnet run LinearizePDF.csproj\n\n namespace LinearizePDF\n {\n   class Program\n   {\n       private static readonly ILog log = LogManager.GetLogger(typeof(Program));\n       static void Main()\n       {\n           //Configure the logging\n           ConfigureLogging();\n           try\n           {\n               // Initial setup, create credentials instance.\n               Credentials credentials = Credentials.ServicePrincipalCredentialsBuilder()\n                    .WithClientId("PDF_SERVICES_CLIENT_ID")\n                    .WithClientSecret("PDF_SERVICES_CLIENT_SECRET")\n                    .Build();\n\n               // Create an ExecutionContext using credentials and create a new operation instance.\n               ExecutionContext executionContext = ExecutionContext.Create(credentials);\n               LinearizePDFOperation linearizePDFOperation = LinearizePDFOperation.CreateNew();\n\n               // Set operation input from a source file.\n               FileRef sourceFileRef = FileRef.CreateFromLocalFile(@"linearizePDFInput.pdf");\n               linearizePDFOperation.SetInput(sourceFileRef);\n\n               // Execute the operation.\n               FileRef result = linearizePDFOperation.Execute(executionContext);\n\n               // Save the result to the specified location.\n               result.SaveAs(Directory.GetCurrentDirectory() + "/output/linearizePDFOutput.pdf");\n           }\n           catch (ServiceUsageException ex)\n           {\n               log.Error("Exception encountered while executing operation", ex);\n           }\n           // Catch more errors here . . .\n       }\n\n       static void ConfigureLogging()\n       {\n           ILoggerRepository logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());\n           XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));\n       }\n   }\n }\n')),(0,r.mdx)("h4",{id:"node-js"},"Node JS"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},'// Get the samples from http://www.adobe.com/go/pdftoolsapi_node_sample\n// Run the sample:\n// node src/linearizepdf/linearize-pdf.js\n\nconst {\n    ServicePrincipalCredentials,\n    PDFServices,\n    MimeType,\n    LinearizePDFJob,\n    LinearizePDFResult,\n    SDKError,\n    ServiceUsageError,\n    ServiceApiError\n} = require("@dcloud/pdfservices-node-sdk");\nconst fs = require("fs");\n\n(async () => {\n    let readStream;\n    try {\n        // Initial setup, create credentials instance\n        const credentials = new ServicePrincipalCredentials({\n            clientId: process.env.PDF_SERVICES_CLIENT_ID,\n            clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET\n        });\n\n        // Creates a PDF Services instance\n        const pdfServices = new PDFServices({credentials});\n\n        // Creates an asset(s) from source file(s) and upload\n        readStream = fs.createReadStream("./linearizePDFInput.pdf");\n        const inputAsset = await pdfServices.upload({\n            readStream,\n            mimeType: MimeType.PDF\n        });\n\n        // Creates a new job instance\n        const job = new LinearizePDFJob({inputAsset});\n\n        // Submit the job and get the job result\n        const pollingURL = await pdfServices.submit({job});\n        const pdfServicesResponse = await pdfServices.getJobResult({\n            pollingURL,\n            resultType: LinearizePDFResult\n        });\n\n        // Get content from the resulting asset(s)\n        const resultAsset = pdfServicesResponse.result.asset;\n        const streamAsset = await pdfServices.getContent({asset: resultAsset});\n\n        // Creates an output stream and copy stream asset\'s content to it\n        const outputFilePath = "./linearizePDFOutput.pdf";\n        console.log(`Saving asset at ${outputFilePath}`);\n\n        const outputStream = fs.createWriteStream(outputFilePath);\n        streamAsset.readStream.pipe(outputStream);\n    } catch (err) {\n        if (err instanceof SDKError || err instanceof ServiceUsageError || err instanceof ServiceApiError) {\n            console.log("Exception encountered while executing operation", err);\n        } else {\n            console.log("Exception encountered while executing operation", err);\n        }\n    } finally {\n        readStream?.destroy();\n    }\n})();\n')),(0,r.mdx)("h4",{id:"python"},"Python"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"# Get the samples https://github.com/adobe/pdfservices-python-sdk-samples\n# Run the sample:\n# python src/linearizepdf/linearize_pdf.py\n\n# Initialize the logger\nlogging.basicConfig(level=logging.INFO)\n\nclass LinearizePDF:\n    def __init__(self):\n        try:\n            file = open('./linearizePDFInput.pdf', 'rb')\n            input_stream = file.read()\n            file.close()\n\n            # Initial setup, create credentials instance\n            credentials = ServicePrincipalCredentials(\n                client_id=os.getenv('PDF_SERVICES_CLIENT_ID'),\n                client_secret=os.getenv('PDF_SERVICES_CLIENT_SECRET')\n            )\n\n            # Creates a PDF Services instance\n            pdf_services = PDFServices(credentials=credentials)\n\n            # Creates an asset(s) from source file(s) and upload\n            input_asset = pdf_services.upload(input_stream=input_stream,\n                                              mime_type=PDFServicesMediaType.PDF)\n\n            # Creates a new job instance\n            linearize_pdf_job = LinearizePDFJob(input_asset=input_asset)\n\n            # Submit the job and gets the job result\n            location = pdf_services.submit(linearize_pdf_job)\n            pdf_services_response = pdf_services.get_job_result(location, LinearizePDFResult)\n\n            # Get content from the resulting asset(s)\n            result_asset: CloudAsset = pdf_services_response.get_result().get_asset()\n            stream_asset: StreamAsset = pdf_services.get_content(result_asset)\n\n            # Creates an output stream and copy stream asset's content to it\n            output_file_path = 'output/LinearizePDF.pdf'\n            with open(output_file_path, \"wb\") as file:\n                file.write(stream_asset.get_input_stream())\n\n        except (ServiceApiException, ServiceUsageException, SdkException) as e:\n            logging.exception(f'Exception encountered while executing operation: {e}')\n\nif __name__ == \"__main__\":\n    LinearizePDF()\n")),(0,r.mdx)("h4",{id:"rest-api-1"},"REST API"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Please refer our REST API docs for more information \n// https://developer.adobe.com/document-services/docs/apis/#tag/Linearize-PDF\n\ncurl --location --request POST 'https://pdf-services.adobe.io/operation/linearizepdf' \\\n--header 'x-api-key: {{Placeholder for client_id}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer {{Placeholder for token}}' \\\n--data-raw '{\n    \"assetID\": \"urn:aaid:AS:UE1:23c30ee0-2e4d-46d6-87f2-087832fca718\"\n}'\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-overview-pdf-services-api-howtos-linearize-pdf-md-170efef6aa75e525d4d4.js.map